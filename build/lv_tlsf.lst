ARM GAS  /tmp/cc0wa2R1.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"lv_tlsf.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.block_size,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	block_size:
  24              	.LFB3:
  25              		.file 1 "Drivers/lvgl/lvgl/src/misc/lv_tlsf.c"
   1:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include "../lv_conf_internal.h"
   2:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if LV_MEM_CUSTOM == 0
   3:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
   4:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include <limits.h>
   5:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include "lv_tlsf.h"
   6:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include "lv_mem.h"
   7:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include "lv_log.h"
   8:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include "lv_assert.h"
   9:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  10:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #undef  printf
  11:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define printf LV_LOG_ERROR
  12:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  13:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_MAX_POOL_SIZE LV_MEM_SIZE
  14:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  15:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if !defined(_DEBUG)
  16:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define _DEBUG 0
  17:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
  18:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  19:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined(__cplusplus)
  20:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl inline
  21:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
  22:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define tlsf_decl static
  23:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
  24:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  25:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
  26:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Architecture-specific bit manipulation routines.
  27:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **
  28:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** TLSF achieves O(1) cost for malloc and free operations by limiting
  29:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** the search for a free block to a free list of guaranteed size
  30:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** adequate to fulfill the request, combined with efficient free list
  31:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** queries using bitmasks and architecture-specific bit-manipulation
  32:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** routines.
  33:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **
ARM GAS  /tmp/cc0wa2R1.s 			page 2


  34:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Most modern processors provide instructions to count leading zeroes
  35:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** in a word, find the lowest and highest set bit, etc. These
  36:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** specific implementations will be used when available, falling back
  37:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** to a reasonably efficient generic implementation.
  38:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **
  39:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** NOTE: TLSF spec relies on ffs/fls returning value 0..31.
  40:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** ffs/fls return 1-32 by default, returning 0 for error.
  41:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
  42:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  43:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
  44:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Detect whether or not we are building for a 32- or 64-bit (LP/LLP)
  45:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** architecture. There is no reliable portable method at compile-time.
  46:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
  47:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (__alpha__) || defined (__ia64__) || defined (__x86_64__) \
  48:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     || defined (_WIN64) || defined (__LP64__) || defined (__LLP64__)
  49:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define TLSF_64BIT
  50:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
  51:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  52:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
  53:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Returns one plus the index of the most significant 1-bit of n,
  54:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** or if n is zero, returns zero.
  55:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
  56:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #ifdef TLSF_64BIT
  57:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) ((n) & 0xffffffff00000000ull ? 32 + TLSF_FLS32((size_t)(n) >> 32) : TLSF_FL
  58:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
  59:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define TLSF_FLS(n) TLSF_FLS32(n)
  60:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
  61:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  62:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS32(n) ((n) & 0xffff0000 ? 16 + TLSF_FLS16((n) >> 16) : TLSF_FLS16(n))
  63:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS16(n) ((n) & 0xff00     ?  8 + TLSF_FLS8 ((n) >>  8) : TLSF_FLS8 (n))
  64:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS8(n)  ((n) & 0xf0       ?  4 + TLSF_FLS4 ((n) >>  4) : TLSF_FLS4 (n))
  65:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS4(n)  ((n) & 0xc        ?  2 + TLSF_FLS2 ((n) >>  2) : TLSF_FLS2 (n))
  66:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS2(n)  ((n) & 0x2        ?  1 + TLSF_FLS1 ((n) >>  1) : TLSF_FLS1 (n))
  67:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_FLS1(n)  ((n) & 0x1        ?  1 : 0)
  68:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  69:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
  70:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Returns round up value of log2(n).
  71:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Note: it is used at compile time.
  72:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
  73:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define TLSF_LOG2_CEIL(n) ((n) & (n - 1) ? TLSF_FLS(n) : TLSF_FLS(n) - 1)
  74:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  75:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
  76:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** gcc 3.4 and above have builtin support, specialized for architecture.
  77:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Some compilers masquerade as gcc; patchlevel test filters them out.
  78:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
  79:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (__GNUC__) && (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)) \
  80:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     && defined (__GNUC_PATCHLEVEL__)
  81:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  82:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (__SNC__)
  83:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* SNC for Playstation 3. */
  84:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  85:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  86:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
  87:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
  88:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __builtin_clz(reverse);
  89:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
  90:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
ARM GAS  /tmp/cc0wa2R1.s 			page 3


  91:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  92:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
  93:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  94:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
  95:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
  96:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
  97:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
  98:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
  99:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 100:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 101:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 102:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 103:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 104:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 105:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 106:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 107:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && (_MSC_VER >= 1400) && (defined (_M_IX86) || defined (_M_X64))
 108:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on x86/X64 architectures. */
 109:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 110:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include <intrin.h>
 111:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 112:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanReverse)
 113:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #pragma intrinsic(_BitScanForward)
 114:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 115:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 116:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 117:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 118:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return _BitScanReverse(&index, word) ? index : -1;
 119:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 120:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 121:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 122:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 123:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     unsigned long index;
 124:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return _BitScanForward(&index, word) ? index : -1;
 125:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 126:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 127:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #elif defined (_MSC_VER) && defined (_M_PPC)
 128:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Microsoft Visual C++ support on PowerPC architectures. */
 129:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 130:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include <ppcintrinsics.h>
 131:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 132:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 133:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 134:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(word);
 135:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 136:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 137:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 138:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 139:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 140:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 141:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - _CountLeadingZeros(reverse);
 142:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 143:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 144:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 145:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #elif defined (__ARMCC_VERSION)
 146:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* RealView Compilation Tools for ARM */
 147:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  /tmp/cc0wa2R1.s 			page 4


 148:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 149:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 150:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 151:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __clz(reverse);
 152:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 153:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 154:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 155:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 156:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 157:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __clz(word) : 0;
 158:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 159:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 160:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 161:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #elif defined (__ghs__)
 162:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Green Hills support for PowerPC */
 163:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 164:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #include <ppc_ghs.h>
 165:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 166:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 167:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 168:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 169:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = 32 - __CLZ32(reverse);
 170:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 171:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 172:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 173:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 174:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 175:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __CLZ32(word) : 0;
 176:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 177:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 178:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 179:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
 180:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Fall back to generic implementation. */
 181:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 182:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Implement ffs in terms of fls. */
 183:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_ffs(unsigned int word)
 184:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 185:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const unsigned int reverse = word & (~word + 1);
 186:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(reverse) - 1;
 187:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 188:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 189:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls(unsigned int word)
 190:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 191:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return TLSF_FLS32(word) - 1;
 192:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 193:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 194:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 195:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 196:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Possibly 64-bit version of tlsf_fls. */
 197:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 198:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_decl int tlsf_fls_sizet(size_t size)
 199:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 200:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int high = (int)(size >> 32);
 201:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int bits = 0;
 202:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(high) {
 203:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         bits = 32 + tlsf_fls(high);
 204:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
ARM GAS  /tmp/cc0wa2R1.s 			page 5


 205:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     else {
 206:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         bits = tlsf_fls((int)size & 0xffffffff);
 207:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 208:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 209:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bits;
 210:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 211:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
 212:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_fls_sizet tlsf_fls
 213:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 214:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 215:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #undef tlsf_decl
 216:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 217:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 218:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Constants.
 219:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 220:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 221:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Public constants: may be modified. */
 222:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** enum tlsf_public {
 223:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* log2 of number of linear subdivisions of block sizes. Larger
 224:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** values require more memory in the control structure. Values of
 225:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** 4 or 5 are typical.
 226:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
 227:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT_LOG2 = 5,
 228:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** };
 229:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 230:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Private constants: do not modify. */
 231:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** enum tlsf_private {
 232:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 233:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 8 bytes. */
 234:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 3,
 235:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
 236:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* All allocation sizes and addresses are aligned to 4 bytes. */
 237:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE_LOG2 = 2,
 238:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 239:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ALIGN_SIZE = (1 << ALIGN_SIZE_LOG2),
 240:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 241:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
 242:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** We support allocations of sizes up to (1 << FL_INDEX_MAX) bits.
 243:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** However, because we linearly subdivide the second-level lists, and
 244:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** our minimum size granularity is 4 bytes, it doesn't make sense to
 245:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** create first-level lists for sizes smaller than SL_INDEX_COUNT * 4,
 246:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** or (1 << (SL_INDEX_COUNT_LOG2 + 2)) bytes, as there we will be
 247:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** trying to split size ranges into more slots than we have available.
 248:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** Instead, we calculate the minimum threshold size, and place all
 249:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** blocks below that size into the 0th first-level list.
 250:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
 251:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 252:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_MAX_POOL_SIZE)
 253:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = TLSF_LOG2_CEIL(TLSF_MAX_POOL_SIZE),
 254:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #elif defined (TLSF_64BIT)
 255:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
 256:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** TODO: We can increase this to support larger sizes, at the expense
 257:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** of more overhead in the TLSF structure.
 258:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
 259:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 32,
 260:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
 261:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_MAX = 30,
ARM GAS  /tmp/cc0wa2R1.s 			page 6


 262:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 263:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     SL_INDEX_COUNT = (1 << SL_INDEX_COUNT_LOG2),
 264:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_SHIFT = (SL_INDEX_COUNT_LOG2 + ALIGN_SIZE_LOG2),
 265:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     FL_INDEX_COUNT = (FL_INDEX_MAX - FL_INDEX_SHIFT + 1),
 266:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 267:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     SMALL_BLOCK_SIZE = (1 << FL_INDEX_SHIFT),
 268:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** };
 269:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 270:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 271:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Cast and min/max macros.
 272:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 273:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 274:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_cast(t, exp)   ((t) (exp))
 275:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_min(a, b)      ((a) < (b) ? (a) : (b))
 276:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_max(a, b)      ((a) > (b) ? (a) : (b))
 277:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 278:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 279:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Set assert macro, if it has not been provided by the user.
 280:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 281:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_assert LV_ASSERT
 282:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 283:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if !defined (tlsf_assert)
 284:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     #define tlsf_assert assert
 285:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 286:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 287:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 288:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Static assertion mechanism.
 289:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 290:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 291:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue2(x, y) x ## y
 292:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define _tlsf_glue(x, y) _tlsf_glue2(x, y)
 293:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_static_assert(exp) \
 294:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     typedef char _tlsf_glue(static_assert, __LINE__) [(exp) ? 1 : -1]
 295:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 296:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* This code has been tested on 32- and 64-bit (LP/LLP) architectures. */
 297:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(int) * CHAR_BIT == 32);
 298:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT >= 32);
 299:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(size_t) * CHAR_BIT <= 64);
 300:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 301:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* SL_INDEX_COUNT must be <= number of bits in sl_bitmap's storage type. */
 302:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(sizeof(unsigned int) * CHAR_BIT >= SL_INDEX_COUNT);
 303:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 304:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Ensure we've properly tuned our sizes. */
 305:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** tlsf_static_assert(ALIGN_SIZE == SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 306:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 307:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 308:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Data structures and associated constants.
 309:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 310:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 311:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 312:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Block header structure.
 313:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **
 314:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** There are several implementation subtleties involved:
 315:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is only valid if the previous block is free.
 316:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - The prev_phys_block field is actually stored at the end of the
 317:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **   previous block. It appears at the beginning of this structure only to
 318:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **   simplify the implementation.
ARM GAS  /tmp/cc0wa2R1.s 			page 7


 319:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - The next_free / prev_free fields are only valid if the block is free.
 320:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 321:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** typedef struct block_header_t {
 322:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Points to the previous physical block. */
 323:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_phys_block;
 324:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 325:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* The size of this block, excluding the block header. */
 326:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     size_t size;
 327:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 328:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Next and previous free blocks. */
 329:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * next_free;
 330:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     struct block_header_t * prev_free;
 331:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** } block_header_t;
 332:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 333:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 334:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Since block sizes are always at least a multiple of 4, the two least
 335:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** significant bits of the size field are used to store the block status:
 336:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - bit 0: whether block is busy or free
 337:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - bit 1: whether previous block is busy or free
 338:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 339:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_free_bit = 1 << 0;
 340:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_prev_free_bit = 1 << 1;
 341:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 342:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 343:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** The size of the block header exposed to used blocks is the size field.
 344:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** The prev_phys_block field is stored *inside* the previous free block.
 345:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 346:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_header_overhead = sizeof(size_t);
 347:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 348:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* User data starts directly after the size field in a used block. */
 349:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_start_offset =
 350:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     offsetof(block_header_t, size) + sizeof(size_t);
 351:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 352:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 353:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** A free block must be large enough to store its header minus the size of
 354:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** the prev_phys_block field, and no larger than the number of addressable
 355:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** bits for FL_INDEX.
 356:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 357:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_min =
 358:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     sizeof(block_header_t) - sizeof(block_header_t *);
 359:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static const size_t block_size_max = tlsf_cast(size_t, 1) << FL_INDEX_MAX;
 360:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 361:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 362:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* The TLSF control structure. */
 363:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** typedef struct control_t {
 364:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Empty lists point at this block to indicate they are free. */
 365:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t block_null;
 366:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 367:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Bitmaps for free lists. */
 368:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     unsigned int fl_bitmap;
 369:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_bitmap[FL_INDEX_COUNT];
 370:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 371:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Head of free lists. */
 372:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * blocks[FL_INDEX_COUNT][SL_INDEX_COUNT];
 373:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** } control_t;
 374:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 375:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* A type used for casting when doing pointer arithmetic. */
ARM GAS  /tmp/cc0wa2R1.s 			page 8


 376:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** typedef ptrdiff_t tlsfptr_t;
 377:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 378:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 379:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** block_header_t member functions.
 380:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 381:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 382:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static size_t block_size(const block_header_t * block)
 383:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
  26              		.loc 1 383 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 384:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
  32              		.loc 1 384 0
  33 0000 4068     		ldr	r0, [r0, #4]
  34              	.LVL1:
 385:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
  35              		.loc 1 385 0
  36 0002 20F00300 		bic	r0, r0, #3
  37 0006 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE3:
  41              		.section	.text.block_set_size,"ax",%progbits
  42              		.align	1
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu fpv5-d16
  48              	block_set_size:
  49              	.LFB4:
 386:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 387:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_set_size(block_header_t * block, size_t size)
 388:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
  50              		.loc 1 388 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.LVL2:
 389:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t oldsize = block->size;
  56              		.loc 1 389 0
  57 0000 4368     		ldr	r3, [r0, #4]
  58              	.LVL3:
 390:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
  59              		.loc 1 390 0
  60 0002 03F00303 		and	r3, r3, #3
  61              	.LVL4:
  62 0006 0B43     		orrs	r3, r3, r1
  63 0008 4360     		str	r3, [r0, #4]
  64              	.LVL5:
 391:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
  65              		.loc 1 391 0
  66 000a 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE4:
ARM GAS  /tmp/cc0wa2R1.s 			page 9


  70              		.section	.text.block_is_last,"ax",%progbits
  71              		.align	1
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv5-d16
  77              	block_is_last:
  78              	.LFB5:
 392:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 393:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static int block_is_last(const block_header_t * block)
 394:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
  79              		.loc 1 394 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL6:
  84 0000 08B5     		push	{r3, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
 395:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_size(block) == 0;
  89              		.loc 1 395 0
  90 0002 FFF7FEFF 		bl	block_size
  91              	.LVL7:
 396:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
  92              		.loc 1 396 0
  93 0006 B0FA80F0 		clz	r0, r0
  94 000a 4009     		lsrs	r0, r0, #5
  95 000c 08BD     		pop	{r3, pc}
  96              		.cfi_endproc
  97              	.LFE5:
  99              		.section	.text.block_is_free,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv5-d16
 106              	block_is_free:
 107              	.LFB6:
 397:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 398:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static int block_is_free(const block_header_t * block)
 399:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 108              		.loc 1 399 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL8:
 400:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_free_bit);
 114              		.loc 1 400 0
 115 0000 4068     		ldr	r0, [r0, #4]
 116              	.LVL9:
 401:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 117              		.loc 1 401 0
 118 0002 00F00100 		and	r0, r0, #1
 119 0006 7047     		bx	lr
ARM GAS  /tmp/cc0wa2R1.s 			page 10


 120              		.cfi_endproc
 121              	.LFE6:
 123              		.section	.text.block_set_free,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu fpv5-d16
 130              	block_set_free:
 131              	.LFB7:
 402:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 403:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_set_free(block_header_t * block)
 404:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 132              		.loc 1 404 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137              	.LVL10:
 405:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_free_bit;
 138              		.loc 1 405 0
 139 0000 4368     		ldr	r3, [r0, #4]
 140 0002 43F00103 		orr	r3, r3, #1
 141 0006 4360     		str	r3, [r0, #4]
 406:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 142              		.loc 1 406 0
 143 0008 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE7:
 147              		.section	.text.block_set_used,"ax",%progbits
 148              		.align	1
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv5-d16
 154              	block_set_used:
 155              	.LFB8:
 407:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 408:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_set_used(block_header_t * block)
 409:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 156              		.loc 1 409 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161              	.LVL11:
 410:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_free_bit;
 162              		.loc 1 410 0
 163 0000 4368     		ldr	r3, [r0, #4]
 164 0002 23F00103 		bic	r3, r3, #1
 165 0006 4360     		str	r3, [r0, #4]
 411:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 166              		.loc 1 411 0
 167 0008 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE8:
 171              		.section	.text.block_is_prev_free,"ax",%progbits
ARM GAS  /tmp/cc0wa2R1.s 			page 11


 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv5-d16
 178              	block_is_prev_free:
 179              	.LFB9:
 412:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 413:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static int block_is_prev_free(const block_header_t * block)
 414:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 180              		.loc 1 414 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185              	.LVL12:
 415:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(int, block->size & block_header_prev_free_bit);
 186              		.loc 1 415 0
 187 0000 4068     		ldr	r0, [r0, #4]
 188              	.LVL13:
 416:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 189              		.loc 1 416 0
 190 0002 00F00200 		and	r0, r0, #2
 191 0006 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE9:
 195              		.section	.text.block_set_prev_free,"ax",%progbits
 196              		.align	1
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu fpv5-d16
 202              	block_set_prev_free:
 203              	.LFB10:
 417:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 418:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_free(block_header_t * block)
 419:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 204              		.loc 1 419 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209              	.LVL14:
 420:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->size |= block_header_prev_free_bit;
 210              		.loc 1 420 0
 211 0000 4368     		ldr	r3, [r0, #4]
 212 0002 43F00203 		orr	r3, r3, #2
 213 0006 4360     		str	r3, [r0, #4]
 421:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 214              		.loc 1 421 0
 215 0008 7047     		bx	lr
 216              		.cfi_endproc
 217              	.LFE10:
 219              		.section	.text.block_set_prev_used,"ax",%progbits
 220              		.align	1
 221              		.syntax unified
 222              		.thumb
ARM GAS  /tmp/cc0wa2R1.s 			page 12


 223              		.thumb_func
 224              		.fpu fpv5-d16
 226              	block_set_prev_used:
 227              	.LFB11:
 422:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 423:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_set_prev_used(block_header_t * block)
 424:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 228              		.loc 1 424 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 233              	.LVL15:
 425:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->size &= ~block_header_prev_free_bit;
 234              		.loc 1 425 0
 235 0000 4368     		ldr	r3, [r0, #4]
 236 0002 23F00203 		bic	r3, r3, #2
 237 0006 4360     		str	r3, [r0, #4]
 426:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 238              		.loc 1 426 0
 239 0008 7047     		bx	lr
 240              		.cfi_endproc
 241              	.LFE11:
 243              		.section	.text.block_from_ptr,"ax",%progbits
 244              		.align	1
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv5-d16
 250              	block_from_ptr:
 251              	.LFB12:
 427:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 428:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_from_ptr(const void * ptr)
 429:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 252              		.loc 1 429 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257              	.LVL16:
 430:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *,
 431:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, ptr) - block_start_offset);
 432:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 258              		.loc 1 432 0
 259 0000 0838     		subs	r0, r0, #8
 260              	.LVL17:
 261 0002 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE12:
 265              		.section	.text.block_to_ptr,"ax",%progbits
 266              		.align	1
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv5-d16
 272              	block_to_ptr:
 273              	.LFB13:
ARM GAS  /tmp/cc0wa2R1.s 			page 13


 433:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 434:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void * block_to_ptr(const block_header_t * block)
 435:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 274              		.loc 1 435 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL18:
 436:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *,
 437:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                      tlsf_cast(unsigned char *, block) + block_start_offset);
 438:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 280              		.loc 1 438 0
 281 0000 0830     		adds	r0, r0, #8
 282              	.LVL19:
 283 0002 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE13:
 287              		.section	.text.offset_to_block,"ax",%progbits
 288              		.align	1
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu fpv5-d16
 294              	offset_to_block:
 295              	.LFB14:
 439:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 440:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Return location of next block after block of given size. */
 441:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * offset_to_block(const void * ptr, size_t size)
 442:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 296              		.loc 1 442 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.LVL20:
 443:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 444:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 302              		.loc 1 444 0
 303 0000 0844     		add	r0, r0, r1
 304              	.LVL21:
 305 0002 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE14:
 309              		.section	.text.block_prev,"ax",%progbits
 310              		.align	1
 311              		.syntax unified
 312              		.thumb
 313              		.thumb_func
 314              		.fpu fpv5-d16
 316              	block_prev:
 317              	.LFB15:
 445:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 446:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Return location of previous block. */
 447:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_prev(const block_header_t * block)
 448:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 318              		.loc 1 448 0
ARM GAS  /tmp/cc0wa2R1.s 			page 14


 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL22:
 323 0000 10B5     		push	{r4, lr}
 324              	.LCFI1:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 4, -8
 327              		.cfi_offset 14, -4
 328 0002 0446     		mov	r4, r0
 449:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 329              		.loc 1 449 0
 330 0004 FFF7FEFF 		bl	block_is_prev_free
 331              	.LVL23:
 332 0008 00B9     		cbnz	r0, .L15
 333              	.L16:
 334 000a FEE7     		b	.L16
 335              	.L15:
 450:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block->prev_phys_block;
 451:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 336              		.loc 1 451 0
 337 000c 2068     		ldr	r0, [r4]
 338 000e 10BD     		pop	{r4, pc}
 339              		.cfi_endproc
 340              	.LFE15:
 342              		.section	.text.block_next,"ax",%progbits
 343              		.align	1
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv5-d16
 349              	block_next:
 350              	.LFB16:
 452:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 453:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Return location of next existing block. */
 454:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_next(const block_header_t * block)
 455:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 351              		.loc 1 455 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              	.LVL24:
 356 0000 38B5     		push	{r3, r4, r5, lr}
 357              	.LCFI2:
 358              		.cfi_def_cfa_offset 16
 359              		.cfi_offset 3, -16
 360              		.cfi_offset 4, -12
 361              		.cfi_offset 5, -8
 362              		.cfi_offset 14, -4
 363 0002 0446     		mov	r4, r0
 456:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 364              		.loc 1 456 0
 365 0004 FFF7FEFF 		bl	block_to_ptr
 366              	.LVL25:
 367 0008 0546     		mov	r5, r0
 457:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                                             block_size(block) - block_header_overhead);
 368              		.loc 1 457 0
ARM GAS  /tmp/cc0wa2R1.s 			page 15


 369 000a 2046     		mov	r0, r4
 370 000c FFF7FEFF 		bl	block_size
 371              	.LVL26:
 456:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = offset_to_block(block_to_ptr(block),
 372              		.loc 1 456 0
 373 0010 011F     		subs	r1, r0, #4
 374 0012 2846     		mov	r0, r5
 375 0014 FFF7FEFF 		bl	offset_to_block
 376              	.LVL27:
 377 0018 0546     		mov	r5, r0
 378              	.LVL28:
 458:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(block));
 379              		.loc 1 458 0
 380 001a 2046     		mov	r0, r4
 381              	.LVL29:
 382 001c FFF7FEFF 		bl	block_is_last
 383              	.LVL30:
 384 0020 00B1     		cbz	r0, .L18
 385              	.L20:
 386 0022 FEE7     		b	.L20
 387              	.L18:
 459:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return next;
 460:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 388              		.loc 1 460 0
 389 0024 2846     		mov	r0, r5
 390 0026 38BD     		pop	{r3, r4, r5, pc}
 391              		.cfi_endproc
 392              	.LFE16:
 394              		.section	.text.block_link_next,"ax",%progbits
 395              		.align	1
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv5-d16
 401              	block_link_next:
 402              	.LFB17:
 461:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 462:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Link a new block with its physical neighbor, return the neighbor. */
 463:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_link_next(block_header_t * block)
 464:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 403              		.loc 1 464 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL31:
 408 0000 10B5     		push	{r4, lr}
 409              	.LCFI3:
 410              		.cfi_def_cfa_offset 8
 411              		.cfi_offset 4, -8
 412              		.cfi_offset 14, -4
 413 0002 0446     		mov	r4, r0
 465:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 414              		.loc 1 465 0
 415 0004 FFF7FEFF 		bl	block_next
 416              	.LVL32:
 466:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     next->prev_phys_block = block;
 417              		.loc 1 466 0
ARM GAS  /tmp/cc0wa2R1.s 			page 16


 418 0008 0460     		str	r4, [r0]
 467:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return next;
 468:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 419              		.loc 1 468 0
 420 000a 10BD     		pop	{r4, pc}
 421              		.cfi_endproc
 422              	.LFE17:
 424              		.section	.text.block_mark_as_free,"ax",%progbits
 425              		.align	1
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu fpv5-d16
 431              	block_mark_as_free:
 432              	.LFB18:
 469:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 470:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_free(block_header_t * block)
 471:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 433              		.loc 1 471 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              	.LVL33:
 438 0000 10B5     		push	{r4, lr}
 439              	.LCFI4:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 443 0002 0446     		mov	r4, r0
 472:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Link the block to the next block, first. */
 473:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_link_next(block);
 444              		.loc 1 473 0
 445 0004 FFF7FEFF 		bl	block_link_next
 446              	.LVL34:
 474:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
 447              		.loc 1 474 0
 448 0008 FFF7FEFF 		bl	block_set_prev_free
 449              	.LVL35:
 475:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 450              		.loc 1 475 0
 451 000c 2046     		mov	r0, r4
 452 000e FFF7FEFF 		bl	block_set_free
 453              	.LVL36:
 476:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 454              		.loc 1 476 0
 455 0012 10BD     		pop	{r4, pc}
 456              		.cfi_endproc
 457              	.LFE18:
 459              		.section	.text.block_mark_as_used,"ax",%progbits
 460              		.align	1
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv5-d16
 466              	block_mark_as_used:
 467              	.LFB19:
 477:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  /tmp/cc0wa2R1.s 			page 17


 478:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_mark_as_used(block_header_t * block)
 479:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 468              		.loc 1 479 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL37:
 473 0000 10B5     		push	{r4, lr}
 474              	.LCFI5:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 4, -8
 477              		.cfi_offset 14, -4
 478 0002 0446     		mov	r4, r0
 480:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 479              		.loc 1 480 0
 480 0004 FFF7FEFF 		bl	block_next
 481              	.LVL38:
 481:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(next);
 482              		.loc 1 481 0
 483 0008 FFF7FEFF 		bl	block_set_prev_used
 484              	.LVL39:
 482:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_used(block);
 485              		.loc 1 482 0
 486 000c 2046     		mov	r0, r4
 487 000e FFF7FEFF 		bl	block_set_used
 488              	.LVL40:
 483:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 489              		.loc 1 483 0
 490 0012 10BD     		pop	{r4, pc}
 491              		.cfi_endproc
 492              	.LFE19:
 494              		.section	.text.align_up,"ax",%progbits
 495              		.align	1
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu fpv5-d16
 501              	align_up:
 502              	.LFB20:
 484:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 485:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static size_t align_up(size_t x, size_t align)
 486:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 503              		.loc 1 486 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL41:
 487:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 509              		.loc 1 487 0
 510 0000 4B1E     		subs	r3, r1, #1
 511 0002 0B42     		tst	r3, r1
 512 0004 00D0     		beq	.L29
 513              	.L30:
 514 0006 FEE7     		b	.L30
 515              	.L29:
 488:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return (x + (align - 1)) & ~(align - 1);
ARM GAS  /tmp/cc0wa2R1.s 			page 18


 516              		.loc 1 488 0
 517 0008 0844     		add	r0, r0, r1
 518              	.LVL42:
 519 000a 0138     		subs	r0, r0, #1
 520 000c 4942     		negs	r1, r1
 521              	.LVL43:
 489:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 522              		.loc 1 489 0
 523 000e 0840     		ands	r0, r0, r1
 524 0010 7047     		bx	lr
 525              		.cfi_endproc
 526              	.LFE20:
 528              		.section	.text.align_down,"ax",%progbits
 529              		.align	1
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu fpv5-d16
 535              	align_down:
 536              	.LFB21:
 490:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 491:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static size_t align_down(size_t x, size_t align)
 492:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 537              		.loc 1 492 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542              	.LVL44:
 493:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 543              		.loc 1 493 0
 544 0000 4B1E     		subs	r3, r1, #1
 545 0002 0B42     		tst	r3, r1
 546 0004 00D0     		beq	.L32
 547              	.L33:
 548 0006 FEE7     		b	.L33
 549              	.L32:
 494:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return x - (x & (align - 1));
 550              		.loc 1 494 0
 551 0008 4942     		negs	r1, r1
 552              	.LVL45:
 495:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 553              		.loc 1 495 0
 554 000a 0840     		ands	r0, r0, r1
 555              	.LVL46:
 556 000c 7047     		bx	lr
 557              		.cfi_endproc
 558              	.LFE21:
 560              		.section	.text.align_ptr,"ax",%progbits
 561              		.align	1
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu fpv5-d16
 567              	align_ptr:
 568              	.LFB22:
 496:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  /tmp/cc0wa2R1.s 			page 19


 497:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void * align_ptr(const void * ptr, size_t align)
 498:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 569              		.loc 1 498 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL47:
 499:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const tlsfptr_t aligned =
 500:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 575              		.loc 1 500 0
 576 0000 0844     		add	r0, r0, r1
 577              	.LVL48:
 578 0002 0138     		subs	r0, r0, #1
 579 0004 4B42     		negs	r3, r1
 580 0006 1840     		ands	r0, r0, r3
 581              	.LVL49:
 501:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 582              		.loc 1 501 0
 583 0008 4B1E     		subs	r3, r1, #1
 584 000a 0B42     		tst	r3, r1
 585 000c 00D0     		beq	.L35
 586              	.L36:
 587 000e FEE7     		b	.L36
 588              	.L35:
 502:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(void *, aligned);
 503:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 589              		.loc 1 503 0
 590 0010 7047     		bx	lr
 591              		.cfi_endproc
 592              	.LFE22:
 594              		.section	.text.adjust_request_size,"ax",%progbits
 595              		.align	1
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 599              		.fpu fpv5-d16
 601              	adjust_request_size:
 602              	.LFB23:
 504:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 505:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 506:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Adjust an allocation size to be aligned to word size, and no smaller
 507:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** than internal minimum.
 508:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 509:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static size_t adjust_request_size(size_t size, size_t align)
 510:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 603              		.loc 1 510 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              	.LVL50:
 608 0000 08B5     		push	{r3, lr}
 609              	.LCFI6:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 3, -8
 612              		.cfi_offset 14, -4
 613              	.LVL51:
ARM GAS  /tmp/cc0wa2R1.s 			page 20


 511:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     size_t adjust = 0;
 512:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size) {
 614              		.loc 1 512 0
 615 0002 0346     		mov	r3, r0
 616 0004 08B9     		cbnz	r0, .L42
 617              	.LVL52:
 618              	.L38:
 513:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 514:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 515:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
 516:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(aligned < block_size_max) {
 517:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 518:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 519:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 520:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return adjust;
 521:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 619              		.loc 1 521 0
 620 0006 1846     		mov	r0, r3
 621 0008 08BD     		pop	{r3, pc}
 622              	.LVL53:
 623              	.L42:
 624              	.LBB2:
 513:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t aligned = align_up(size, align);
 625              		.loc 1 513 0
 626 000a FFF7FEFF 		bl	align_up
 627              	.LVL54:
 628 000e 0346     		mov	r3, r0
 629              	.LVL55:
 516:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             adjust = tlsf_max(aligned, block_size_min);
 630              		.loc 1 516 0
 631 0010 B0F5803F 		cmp	r0, #65536
 632 0014 03D2     		bcs	.L39
 517:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 633              		.loc 1 517 0
 634 0016 0C28     		cmp	r0, #12
 635 0018 F5D8     		bhi	.L38
 636 001a 0C23     		movs	r3, #12
 637 001c F3E7     		b	.L38
 638              	.L39:
 639              	.LBE2:
 511:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size) {
 640              		.loc 1 511 0
 641 001e 0023     		movs	r3, #0
 642 0020 F1E7     		b	.L38
 643              		.cfi_endproc
 644              	.LFE23:
 646              		.section	.text.remove_free_block,"ax",%progbits
 647              		.align	1
 648              		.syntax unified
 649              		.thumb
 650              		.thumb_func
 651              		.fpu fpv5-d16
 653              	remove_free_block:
 654              	.LFB27:
 522:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 523:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 524:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** TLSF utility functions. In most cases, these are direct translations of
ARM GAS  /tmp/cc0wa2R1.s 			page 21


 525:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** the documentation found in the white paper.
 526:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 527:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 528:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void mapping_insert(size_t size, int * fli, int * sli)
 529:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 530:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 531:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size < SMALL_BLOCK_SIZE) {
 532:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 533:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         fl = 0;
 534:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 535:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 536:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     else {
 537:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_fls_sizet(size);
 538:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 539:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 540:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 541:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     *fli = fl;
 542:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 543:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 544:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 545:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* This version rounds up to the next block size (for allocations) */
 546:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void mapping_search(size_t size, int * fli, int * sli)
 547:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 548:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 549:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 550:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         size += round;
 551:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 552:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     mapping_insert(size, fli, sli);
 553:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 554:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 555:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
 556:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 557:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 558:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 559:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 560:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
 561:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** First, search for a block in the list associated with the given
 562:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** fl/sl index.
 563:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
 564:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 565:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 566:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 567:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 568:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 569:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 570:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             return 0;
 571:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 572:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 573:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         fl = tlsf_ffs(fl_map);
 574:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 575:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 576:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 577:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sl_map && "internal error - second level bitmap is null");
 578:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 579:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 580:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 581:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Return the first block in the free list. */
ARM GAS  /tmp/cc0wa2R1.s 			page 22


 582:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return control->blocks[fl][sl];
 583:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 584:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 585:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Remove a free block from the free list.*/
 586:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
 587:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 655              		.loc 1 587 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660              	.LVL56:
 661 0000 30B4     		push	{r4, r5}
 662              	.LCFI7:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 4, -8
 665              		.cfi_offset 5, -4
 588:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * prev = block->prev_free;
 666              		.loc 1 588 0
 667 0002 CD68     		ldr	r5, [r1, #12]
 668              	.LVL57:
 589:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block->next_free;
 669              		.loc 1 589 0
 670 0004 8C68     		ldr	r4, [r1, #8]
 671              	.LVL58:
 590:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(prev && "prev_free field can not be null");
 672              		.loc 1 590 0
 673 0006 05B9     		cbnz	r5, .L44
 674              	.L45:
 675 0008 FEE7     		b	.L45
 676              	.L44:
 591:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next_free field can not be null");
 677              		.loc 1 591 0
 678 000a 04B9     		cbnz	r4, .L46
 679              	.L47:
 680 000c FEE7     		b	.L47
 681              	.L46:
 592:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     next->prev_free = prev;
 682              		.loc 1 592 0
 683 000e E560     		str	r5, [r4, #12]
 593:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     prev->next_free = next;
 684              		.loc 1 593 0
 685 0010 AC60     		str	r4, [r5, #8]
 594:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 595:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* If this block is the head of the free list, set new head. */
 596:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(control->blocks[fl][sl] == block) {
 686              		.loc 1 596 0
 687 0012 03EB4215 		add	r5, r3, r2, lsl #5
 688              	.LVL59:
 689 0016 0E35     		adds	r5, r5, #14
 690 0018 00EB8505 		add	r5, r0, r5, lsl #2
 691 001c 6D68     		ldr	r5, [r5, #4]
 692 001e 8D42     		cmp	r5, r1
 693 0020 18D1     		bne	.L43
 597:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         control->blocks[fl][sl] = next;
 694              		.loc 1 597 0
 695 0022 03EB4211 		add	r1, r3, r2, lsl #5
ARM GAS  /tmp/cc0wa2R1.s 			page 23


 696              	.LVL60:
 697 0026 0E31     		adds	r1, r1, #14
 698 0028 00EB8101 		add	r1, r0, r1, lsl #2
 699 002c 4C60     		str	r4, [r1, #4]
 598:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 599:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* If the new head is null, clear the bitmap. */
 600:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(next == &control->block_null) {
 700              		.loc 1 600 0
 701 002e A042     		cmp	r0, r4
 702 0030 10D1     		bne	.L43
 601:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             control->sl_bitmap[fl] &= ~(1U << sl);
 703              		.loc 1 601 0
 704 0032 0124     		movs	r4, #1
 705              	.LVL61:
 706 0034 9C40     		lsls	r4, r4, r3
 707 0036 111D     		adds	r1, r2, #4
 708              	.LVL62:
 709 0038 00EB8101 		add	r1, r0, r1, lsl #2
 710 003c 4B68     		ldr	r3, [r1, #4]
 711              	.LVL63:
 712 003e 23EA0403 		bic	r3, r3, r4
 713 0042 4B60     		str	r3, [r1, #4]
 714              	.LVL64:
 602:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 603:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* If the second bitmap is now empty, clear the fl bitmap. */
 604:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(!control->sl_bitmap[fl]) {
 715              		.loc 1 604 0
 716 0044 33B9     		cbnz	r3, .L43
 605:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 control->fl_bitmap &= ~(1U << fl);
 717              		.loc 1 605 0
 718 0046 0123     		movs	r3, #1
 719 0048 03FA02F2 		lsl	r2, r3, r2
 720              	.LVL65:
 721 004c 0369     		ldr	r3, [r0, #16]
 722 004e 23EA0203 		bic	r3, r3, r2
 723 0052 0361     		str	r3, [r0, #16]
 724              	.L43:
 606:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 607:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 608:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 609:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 725              		.loc 1 609 0
 726 0054 30BC     		pop	{r4, r5}
 727              	.LCFI8:
 728              		.cfi_restore 5
 729              		.cfi_restore 4
 730              		.cfi_def_cfa_offset 0
 731 0056 7047     		bx	lr
 732              		.cfi_endproc
 733              	.LFE27:
 735              		.section	.text.insert_free_block,"ax",%progbits
 736              		.align	1
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu fpv5-d16
 742              	insert_free_block:
ARM GAS  /tmp/cc0wa2R1.s 			page 24


 743              	.LFB28:
 610:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 611:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Insert a free block into the free block list. */
 612:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
 613:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 744              		.loc 1 613 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL66:
 749 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 750              	.LCFI9:
 751              		.cfi_def_cfa_offset 24
 752              		.cfi_offset 4, -24
 753              		.cfi_offset 5, -20
 754              		.cfi_offset 6, -16
 755              		.cfi_offset 7, -12
 756              		.cfi_offset 8, -8
 757              		.cfi_offset 14, -4
 758 0004 1F46     		mov	r7, r3
 614:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * current = control->blocks[fl][sl];
 759              		.loc 1 614 0
 760 0006 03EB421C 		add	ip, r3, r2, lsl #5
 761 000a 0CF10E0C 		add	ip, ip, #14
 762 000e 00EB8C0C 		add	ip, r0, ip, lsl #2
 763 0012 DCF80430 		ldr	r3, [ip, #4]
 764              	.LVL67:
 615:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(current && "free list cannot have a null entry");
 765              		.loc 1 615 0
 766 0016 0BB1     		cbz	r3, .L52
 616:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block && "cannot insert a null entry into the free list");
 767              		.loc 1 616 0
 768 0018 09B9     		cbnz	r1, .L53
 769              	.L54:
 770 001a FEE7     		b	.L54
 771              	.L52:
 772 001c FEE7     		b	.L52
 773              	.L53:
 774 001e 1546     		mov	r5, r2
 775 0020 0E46     		mov	r6, r1
 776 0022 0446     		mov	r4, r0
 617:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->next_free = current;
 777              		.loc 1 617 0
 778 0024 8B60     		str	r3, [r1, #8]
 618:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block->prev_free = &control->block_null;
 779              		.loc 1 618 0
 780 0026 F060     		str	r0, [r6, #12]
 619:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     current->prev_free = block;
 781              		.loc 1 619 0
 782 0028 D960     		str	r1, [r3, #12]
 620:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 621:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 783              		.loc 1 621 0
 784 002a 0846     		mov	r0, r1
 785              	.LVL68:
 786 002c FFF7FEFF 		bl	block_to_ptr
 787              	.LVL69:
ARM GAS  /tmp/cc0wa2R1.s 			page 25


 788 0030 8046     		mov	r8, r0
 789 0032 0421     		movs	r1, #4
 790 0034 FFF7FEFF 		bl	align_ptr
 791              	.LVL70:
 792 0038 8045     		cmp	r8, r0
 793 003a 00D0     		beq	.L55
 794              	.L56:
 795 003c FEE7     		b	.L56
 796              	.L55:
 622:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 && "block not aligned properly");
 623:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
 624:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** Insert the new block at the head of the list, and mark the first-
 625:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** and second-level bitmaps appropriately.
 626:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
 627:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->blocks[fl][sl] = block;
 797              		.loc 1 627 0
 798 003e 07EB4513 		add	r3, r7, r5, lsl #5
 799 0042 0E33     		adds	r3, r3, #14
 800 0044 04EB8303 		add	r3, r4, r3, lsl #2
 801 0048 5E60     		str	r6, [r3, #4]
 628:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap |= (1U << fl);
 802              		.loc 1 628 0
 803 004a 0123     		movs	r3, #1
 804 004c 03FA05F1 		lsl	r1, r3, r5
 805 0050 2269     		ldr	r2, [r4, #16]
 806 0052 0A43     		orrs	r2, r2, r1
 807 0054 2261     		str	r2, [r4, #16]
 629:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->sl_bitmap[fl] |= (1U << sl);
 808              		.loc 1 629 0
 809 0056 BB40     		lsls	r3, r3, r7
 810 0058 0435     		adds	r5, r5, #4
 811              	.LVL71:
 812 005a 04EB8504 		add	r4, r4, r5, lsl #2
 813              	.LVL72:
 814 005e 6268     		ldr	r2, [r4, #4]
 815 0060 1343     		orrs	r3, r3, r2
 816 0062 6360     		str	r3, [r4, #4]
 630:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 817              		.loc 1 630 0
 818 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 819              		.cfi_endproc
 820              	.LFE28:
 822              		.section	.text.block_can_split,"ax",%progbits
 823              		.align	1
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv5-d16
 829              	block_can_split:
 830              	.LFB31:
 631:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 632:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Remove a given block from the free list. */
 633:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_remove(control_t * control, block_header_t * block)
 634:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 635:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 636:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 637:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
ARM GAS  /tmp/cc0wa2R1.s 			page 26


 638:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 639:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 640:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Insert a given block into the free list. */
 641:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_insert(control_t * control, block_header_t * block)
 642:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 643:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 644:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 645:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 646:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 647:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 648:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static int block_can_split(block_header_t * block, size_t size)
 649:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 831              		.loc 1 649 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL73:
 836 0000 10B5     		push	{r4, lr}
 837              	.LCFI10:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 4, -8
 840              		.cfi_offset 14, -4
 841 0002 0C46     		mov	r4, r1
 650:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_size(block) >= sizeof(block_header_t) + size;
 842              		.loc 1 650 0
 843 0004 FFF7FEFF 		bl	block_size
 844              	.LVL74:
 845 0008 1034     		adds	r4, r4, #16
 846              	.LVL75:
 651:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 847              		.loc 1 651 0
 848 000a A042     		cmp	r0, r4
 849 000c 34BF     		ite	cc
 850 000e 0020     		movcc	r0, #0
 851 0010 0120     		movcs	r0, #1
 852 0012 10BD     		pop	{r4, pc}
 853              		.cfi_endproc
 854              	.LFE31:
 856              		.section	.text.block_split,"ax",%progbits
 857              		.align	1
 858              		.syntax unified
 859              		.thumb
 860              		.thumb_func
 861              		.fpu fpv5-d16
 863              	block_split:
 864              	.LFB32:
 652:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 653:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Split a block into two, the second of which is free. */
 654:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_split(block_header_t * block, size_t size)
 655:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 865              		.loc 1 655 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 0
 868              		@ frame_needed = 0, uses_anonymous_args = 0
 869              	.LVL76:
 870 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 871              	.LCFI11:
ARM GAS  /tmp/cc0wa2R1.s 			page 27


 872              		.cfi_def_cfa_offset 32
 873              		.cfi_offset 3, -32
 874              		.cfi_offset 4, -28
 875              		.cfi_offset 5, -24
 876              		.cfi_offset 6, -20
 877              		.cfi_offset 7, -16
 878              		.cfi_offset 8, -12
 879              		.cfi_offset 9, -8
 880              		.cfi_offset 14, -4
 881 0004 0746     		mov	r7, r0
 882 0006 0D46     		mov	r5, r1
 656:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Calculate the amount of space left in the remaining block. */
 657:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining =
 658:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         offset_to_block(block_to_ptr(block), size - block_header_overhead);
 883              		.loc 1 658 0
 884 0008 FFF7FEFF 		bl	block_to_ptr
 885              	.LVL77:
 657:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         offset_to_block(block_to_ptr(block), size - block_header_overhead);
 886              		.loc 1 657 0
 887 000c 291F     		subs	r1, r5, #4
 888 000e FFF7FEFF 		bl	offset_to_block
 889              	.LVL78:
 890 0012 0446     		mov	r4, r0
 891              	.LVL79:
 659:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 660:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t remain_size = block_size(block) - (size + block_header_overhead);
 892              		.loc 1 660 0
 893 0014 3846     		mov	r0, r7
 894              	.LVL80:
 895 0016 FFF7FEFF 		bl	block_size
 896              	.LVL81:
 897 001a 8046     		mov	r8, r0
 898 001c 461B     		subs	r6, r0, r5
 899              	.LVL82:
 661:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 662:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 900              		.loc 1 662 0
 901 001e 2046     		mov	r0, r4
 902 0020 FFF7FEFF 		bl	block_to_ptr
 903              	.LVL83:
 904 0024 8146     		mov	r9, r0
 905 0026 0421     		movs	r1, #4
 906 0028 FFF7FEFF 		bl	align_ptr
 907              	.LVL84:
 908 002c 8145     		cmp	r9, r0
 909 002e 00D0     		beq	.L61
 910              	.L62:
 911 0030 FEE7     		b	.L62
 912              	.L61:
 913 0032 043E     		subs	r6, r6, #4
 914              	.LVL85:
 663:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 && "remaining block not aligned properly");
 664:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 665:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 915              		.loc 1 665 0
 916 0034 AB19     		adds	r3, r5, r6
 917 0036 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc0wa2R1.s 			page 28


 918 0038 9845     		cmp	r8, r3
 919 003a 00D0     		beq	.L63
 920              	.L64:
 921 003c FEE7     		b	.L64
 922              	.L63:
 666:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_size(remaining, remain_size);
 923              		.loc 1 666 0
 924 003e 3146     		mov	r1, r6
 925 0040 2046     		mov	r0, r4
 926 0042 FFF7FEFF 		bl	block_set_size
 927              	.LVL86:
 667:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 928              		.loc 1 667 0
 929 0046 2046     		mov	r0, r4
 930 0048 FFF7FEFF 		bl	block_size
 931              	.LVL87:
 932 004c 0B28     		cmp	r0, #11
 933 004e 00D8     		bhi	.L65
 934              	.L66:
 935 0050 FEE7     		b	.L66
 936              	.L65:
 668:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 669:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, size);
 937              		.loc 1 669 0
 938 0052 2946     		mov	r1, r5
 939 0054 3846     		mov	r0, r7
 940 0056 FFF7FEFF 		bl	block_set_size
 941              	.LVL88:
 670:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_mark_as_free(remaining);
 942              		.loc 1 670 0
 943 005a 2046     		mov	r0, r4
 944 005c FFF7FEFF 		bl	block_mark_as_free
 945              	.LVL89:
 671:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 672:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return remaining;
 673:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 946              		.loc 1 673 0
 947 0060 2046     		mov	r0, r4
 948 0062 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 949              		.cfi_endproc
 950              	.LFE32:
 952              		.section	.text.block_absorb,"ax",%progbits
 953              		.align	1
 954              		.syntax unified
 955              		.thumb
 956              		.thumb_func
 957              		.fpu fpv5-d16
 959              	block_absorb:
 960              	.LFB33:
 674:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 675:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Absorb a free block's storage into an adjacent previous free block. */
 676:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
 677:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 961              		.loc 1 677 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 0
 964              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0wa2R1.s 			page 29


 965              	.LVL90:
 966 0000 38B5     		push	{r3, r4, r5, lr}
 967              	.LCFI12:
 968              		.cfi_def_cfa_offset 16
 969              		.cfi_offset 3, -16
 970              		.cfi_offset 4, -12
 971              		.cfi_offset 5, -8
 972              		.cfi_offset 14, -4
 973 0002 0446     		mov	r4, r0
 974 0004 0D46     		mov	r5, r1
 678:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 975              		.loc 1 678 0
 976 0006 FFF7FEFF 		bl	block_is_last
 977              	.LVL91:
 978 000a 00B1     		cbz	r0, .L69
 979              	.L70:
 980 000c FEE7     		b	.L70
 981              	.L69:
 679:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Note: Leaves flags untouched. */
 680:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     prev->size += block_size(block) + block_header_overhead;
 982              		.loc 1 680 0
 983 000e 2846     		mov	r0, r5
 984 0010 FFF7FEFF 		bl	block_size
 985              	.LVL92:
 986 0014 0430     		adds	r0, r0, #4
 987 0016 6368     		ldr	r3, [r4, #4]
 988 0018 0344     		add	r3, r3, r0
 989 001a 6360     		str	r3, [r4, #4]
 681:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_link_next(prev);
 990              		.loc 1 681 0
 991 001c 2046     		mov	r0, r4
 992 001e FFF7FEFF 		bl	block_link_next
 993              	.LVL93:
 682:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return prev;
 683:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 994              		.loc 1 683 0
 995 0022 2046     		mov	r0, r4
 996 0024 38BD     		pop	{r3, r4, r5, pc}
 997              		.cfi_endproc
 998              	.LFE33:
 1000              		.section	.text.control_constructor,"ax",%progbits
 1001              		.align	1
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu fpv5-d16
 1007              	control_constructor:
 1008              	.LFB41:
 684:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 685:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent previous free block. */
 686:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
 687:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 688:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 689:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 690:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 691:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 692:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
ARM GAS  /tmp/cc0wa2R1.s 			page 30


 693:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 694:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 695:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 696:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block;
 697:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 698:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 699:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Merge a just-freed block with an adjacent free block. */
 700:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_merge_next(control_t * control, block_header_t * block)
 701:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 702:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 703:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 704:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 705:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_is_free(next)) {
 706:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 707:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 708:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 709:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 710:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 711:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block;
 712:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 713:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 714:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a block, return to pool. */
 715:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_trim_free(control_t * control, block_header_t * block, size_t size)
 716:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 717:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 718:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 719:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 720:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 721:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 722:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 723:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 724:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 725:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 726:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Trim any trailing block space off the end of a used block, return to pool. */
 727:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void block_trim_used(control_t * control, block_header_t * block, size_t size)
 728:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 729:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 730:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 731:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 732:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 733:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
 734:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 735:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_merge_next(control, remaining_block);
 736:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 737:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 738:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 739:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 740:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_trim_free_leading(control_t * control, block_header_t * block, size_t
 741:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 742:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 743:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 744:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 745:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         remaining_block = block_split(block, size - block_header_overhead);
 746:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 747:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 748:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 749:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
ARM GAS  /tmp/cc0wa2R1.s 			page 31


 750:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 751:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 752:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return remaining_block;
 753:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 754:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 755:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static block_header_t * block_locate_free(control_t * control, size_t size)
 756:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 757:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 758:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 759:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 760:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size) {
 761:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 762:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 763:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /*
 764:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** mapping_search can futz with the size, so for excessively large sizes it can sometimes w
 765:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** with indices that are off the end of the block array.
 766:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** So, we protect against that here, since this is the only callsite of mapping_search.
 767:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** Note that we don't need to check sl, since it comes from a modulo operation that guarant
 768:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         */
 769:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(fl < FL_INDEX_COUNT) {
 770:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 771:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 772:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 773:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 774:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block) {
 775:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 776:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 777:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 778:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 779:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block;
 780:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 781:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 782:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 783:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 784:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 785:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block) {
 786:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 787:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 788:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 789:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 790:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 791:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return p;
 792:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 793:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 794:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /* Clear structure and point all empty lists at the null block. */
 795:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void control_constructor(control_t * control)
 796:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 1009              		.loc 1 796 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014              	.LVL94:
 1015 0000 10B4     		push	{r4}
 1016              	.LCFI13:
 1017              		.cfi_def_cfa_offset 4
 1018              		.cfi_offset 4, -4
ARM GAS  /tmp/cc0wa2R1.s 			page 32


 797:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int i, j;
 798:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 799:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->block_null.next_free = &control->block_null;
 1019              		.loc 1 799 0
 1020 0002 0446     		mov	r4, r0
 1021 0004 8060     		str	r0, [r0, #8]
 800:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->block_null.prev_free = &control->block_null;
 1022              		.loc 1 800 0
 1023 0006 C060     		str	r0, [r0, #12]
 801:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 802:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control->fl_bitmap = 0;
 1024              		.loc 1 802 0
 1025 0008 0021     		movs	r1, #0
 1026 000a 0161     		str	r1, [r0, #16]
 1027              	.LVL95:
 803:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1028              		.loc 1 803 0
 1029 000c 09E0     		b	.L73
 1030              	.LVL96:
 1031              	.L75:
 804:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 805:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 806:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1032              		.loc 1 806 0 discriminator 3
 1033 000e 02EB4113 		add	r3, r2, r1, lsl #5
 1034 0012 0E33     		adds	r3, r3, #14
 1035 0014 00EB8303 		add	r3, r0, r3, lsl #2
 1036 0018 5C60     		str	r4, [r3, #4]
 805:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1037              		.loc 1 805 0 discriminator 3
 1038 001a 0132     		adds	r2, r2, #1
 1039              	.LVL97:
 1040              	.L74:
 805:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1041              		.loc 1 805 0 is_stmt 0 discriminator 1
 1042 001c 1F2A     		cmp	r2, #31
 1043 001e F6DD     		ble	.L75
 803:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1044              		.loc 1 803 0 is_stmt 1 discriminator 2
 1045 0020 0131     		adds	r1, r1, #1
 1046              	.LVL98:
 1047              	.L73:
 803:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 1048              		.loc 1 803 0 is_stmt 0 discriminator 1
 1049 0022 0929     		cmp	r1, #9
 1050 0024 05DC     		bgt	.L78
 804:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         control->sl_bitmap[i] = 0;
 1051              		.loc 1 804 0 is_stmt 1
 1052 0026 0B1D     		adds	r3, r1, #4
 1053 0028 00EB8303 		add	r3, r0, r3, lsl #2
 1054 002c 0022     		movs	r2, #0
 1055 002e 5A60     		str	r2, [r3, #4]
 1056              	.LVL99:
 805:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             control->blocks[i][j] = &control->block_null;
 1057              		.loc 1 805 0
 1058 0030 F4E7     		b	.L74
 1059              	.LVL100:
ARM GAS  /tmp/cc0wa2R1.s 			page 33


 1060              	.L78:
 807:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 808:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 809:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1061              		.loc 1 809 0
 1062 0032 5DF8044B 		ldr	r4, [sp], #4
 1063              	.LCFI14:
 1064              		.cfi_restore 4
 1065              		.cfi_def_cfa_offset 0
 1066 0036 7047     		bx	lr
 1067              		.cfi_endproc
 1068              	.LFE41:
 1070              		.section	.text.integrity_walker,"ax",%progbits
 1071              		.align	1
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv5-d16
 1077              	integrity_walker:
 1078              	.LFB42:
 810:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 811:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 812:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Debugging utilities.
 813:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 814:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 815:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** typedef struct integrity_t {
 816:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int prev_status;
 817:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int status;
 818:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** } integrity_t;
 819:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 820:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #define tlsf_insist(x) { tlsf_assert(x); if (!(x)) { status--; } }
 821:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 822:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void integrity_walker(void * ptr, size_t size, int used, void * user)
 823:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 1079              		.loc 1 823 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL101:
 1084 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1085              	.LCFI15:
 1086              		.cfi_def_cfa_offset 24
 1087              		.cfi_offset 4, -24
 1088              		.cfi_offset 5, -20
 1089              		.cfi_offset 6, -16
 1090              		.cfi_offset 7, -12
 1091              		.cfi_offset 8, -8
 1092              		.cfi_offset 14, -4
 1093 0004 0F46     		mov	r7, r1
 1094 0006 1C46     		mov	r4, r3
 824:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_from_ptr(ptr);
 1095              		.loc 1 824 0
 1096 0008 FFF7FEFF 		bl	block_from_ptr
 1097              	.LVL102:
 1098 000c 0546     		mov	r5, r0
 1099              	.LVL103:
 825:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     integrity_t * integ = tlsf_cast(integrity_t *, user);
ARM GAS  /tmp/cc0wa2R1.s 			page 34


 826:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int this_prev_status = block_is_prev_free(block) ? 1 : 0;
 1100              		.loc 1 826 0
 1101 000e FFF7FEFF 		bl	block_is_prev_free
 1102              	.LVL104:
 1103 0012 10F10008 		adds	r8, r0, #0
 1104 0016 18BF     		it	ne
 1105 0018 4FF00108 		movne	r8, #1
 1106              	.LVL105:
 827:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int this_status = block_is_free(block) ? 1 : 0;
 1107              		.loc 1 827 0
 1108 001c 2846     		mov	r0, r5
 1109 001e FFF7FEFF 		bl	block_is_free
 1110              	.LVL106:
 1111 0022 061C     		adds	r6, r0, #0
 1112 0024 18BF     		it	ne
 1113 0026 0126     		movne	r6, #1
 1114              	.LVL107:
 828:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t this_block_size = block_size(block);
 1115              		.loc 1 828 0
 1116 0028 2846     		mov	r0, r5
 1117 002a FFF7FEFF 		bl	block_size
 1118              	.LVL108:
 829:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 830:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 831:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(used);
 832:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(integ->prev_status == this_prev_status && "prev status incorrect");
 1119              		.loc 1 832 0
 1120 002e 2368     		ldr	r3, [r4]
 1121 0030 4345     		cmp	r3, r8
 1122 0032 00D0     		beq	.L80
 1123              	.L81:
 1124 0034 FEE7     		b	.L81
 1125              	.L80:
 833:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_insist(size == this_block_size && "block size incorrect");
 1126              		.loc 1 833 0
 1127 0036 B842     		cmp	r0, r7
 1128 0038 00D0     		beq	.L82
 1129              	.L83:
 1130 003a FEE7     		b	.L83
 1131              	.L82:
 834:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 835:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     integ->prev_status = this_status;
 1132              		.loc 1 835 0
 1133 003c 2660     		str	r6, [r4]
 836:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     integ->status += status;
 837:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1134              		.loc 1 837 0
 1135 003e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1136              		.cfi_endproc
 1137              	.LFE42:
 1139              		.section	.text.default_walker,"ax",%progbits
 1140              		.align	1
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv5-d16
 1146              	default_walker:
ARM GAS  /tmp/cc0wa2R1.s 			page 35


 1147              	.LFB44:
 838:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 839:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check(lv_tlsf_t tlsf)
 840:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 841:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int i, j;
 842:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 843:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
 844:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int status = 0;
 845:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 846:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Check that the free lists and bitmaps are accurate. */
 847:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     for(i = 0; i < FL_INDEX_COUNT; ++i) {
 848:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 849:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 850:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 851:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 852:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 853:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 854:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* Check that first- and second-level lists agree. */
 855:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(!fl_map) {
 856:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 857:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 858:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 859:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(!sl_map) {
 860:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 861:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 continue;
 862:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 863:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 864:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* Check that there is at least one free block. */
 865:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(sl_list && "no free blocks in second-level map");
 866:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 867:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 868:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             while(block != &control->block_null) {
 869:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 870:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_free(block) && "block should be free");
 871:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 872:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 873:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 874:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 875:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 876:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 mapping_insert(block_size(block), &fli, &sli);
 877:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 878:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 879:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 880:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 881:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 882:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 883:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return status;
 884:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 885:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 886:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #undef tlsf_insist
 887:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 888:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** static void default_walker(void * ptr, size_t size, int used, void * user)
 889:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 1148              		.loc 1 889 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0wa2R1.s 			page 36


 1152              		@ link register save eliminated.
 1153              	.LVL109:
 890:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(user);
 891:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)bloc
 892:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1154              		.loc 1 892 0
 1155 0000 7047     		bx	lr
 1156              		.cfi_endproc
 1157              	.LFE44:
 1159              		.section	.text.tlsf_fls,"ax",%progbits
 1160              		.align	1
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1164              		.fpu fpv5-d16
 1166              	tlsf_fls:
 1167              	.LFB2:
 102:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const int bit = word ? 32 - __builtin_clz(word) : 0;
 1168              		.loc 1 102 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
 1173              	.LVL110:
 103:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1174              		.loc 1 103 0
 1175 0000 28B1     		cbz	r0, .L88
 103:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1176              		.loc 1 103 0 is_stmt 0 discriminator 1
 1177 0002 B0FA80F0 		clz	r0, r0
 1178              	.LVL111:
 1179 0006 C0F12000 		rsb	r0, r0, #32
 1180              	.L87:
 1181              	.LVL112:
 105:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1182              		.loc 1 105 0 is_stmt 1 discriminator 4
 1183 000a 0138     		subs	r0, r0, #1
 1184              	.LVL113:
 1185 000c 7047     		bx	lr
 1186              	.LVL114:
 1187              	.L88:
 103:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return bit - 1;
 1188              		.loc 1 103 0
 1189 000e 0020     		movs	r0, #0
 1190              	.LVL115:
 1191 0010 FBE7     		b	.L87
 1192              		.cfi_endproc
 1193              	.LFE2:
 1195              		.section	.text.mapping_insert,"ax",%progbits
 1196              		.align	1
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv5-d16
 1202              	mapping_insert:
 1203              	.LFB24:
 529:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
ARM GAS  /tmp/cc0wa2R1.s 			page 37


 1204              		.loc 1 529 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              	.LVL116:
 1209 0000 70B5     		push	{r4, r5, r6, lr}
 1210              	.LCFI16:
 1211              		.cfi_def_cfa_offset 16
 1212              		.cfi_offset 4, -16
 1213              		.cfi_offset 5, -12
 1214              		.cfi_offset 6, -8
 1215              		.cfi_offset 14, -4
 1216 0002 0446     		mov	r4, r0
 1217 0004 0E46     		mov	r6, r1
 1218 0006 1546     		mov	r5, r2
 531:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* Store small blocks in first list. */
 1219              		.loc 1 531 0
 1220 0008 7F28     		cmp	r0, #127
 1221 000a 09D9     		bls	.L94
 537:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 1222              		.loc 1 537 0
 1223 000c FFF7FEFF 		bl	tlsf_fls
 1224              	.LVL117:
 538:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         fl -= (FL_INDEX_SHIFT - 1);
 1225              		.loc 1 538 0
 1226 0010 431F     		subs	r3, r0, #5
 1227 0012 DC40     		lsrs	r4, r4, r3
 1228              	.LVL118:
 1229 0014 84F02004 		eor	r4, r4, #32
 1230              	.LVL119:
 539:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1231              		.loc 1 539 0
 1232 0018 0638     		subs	r0, r0, #6
 1233              	.LVL120:
 1234              	.L92:
 541:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1235              		.loc 1 541 0
 1236 001a 3060     		str	r0, [r6]
 542:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1237              		.loc 1 542 0
 1238 001c 2C60     		str	r4, [r5]
 543:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1239              		.loc 1 543 0
 1240 001e 70BD     		pop	{r4, r5, r6, pc}
 1241              	.LVL121:
 1242              	.L94:
 534:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1243              		.loc 1 534 0
 1244 0020 0346     		mov	r3, r0
 1245 0022 0028     		cmp	r0, #0
 1246 0024 02DB     		blt	.L95
 1247              	.L91:
 1248 0026 9C10     		asrs	r4, r3, #2
 1249              	.LVL122:
 533:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 1250              		.loc 1 533 0
 1251 0028 0020     		movs	r0, #0
ARM GAS  /tmp/cc0wa2R1.s 			page 38


 1252              	.LVL123:
 1253 002a F6E7     		b	.L92
 1254              	.LVL124:
 1255              	.L95:
 534:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1256              		.loc 1 534 0
 1257 002c C31C     		adds	r3, r0, #3
 1258 002e FAE7     		b	.L91
 1259              		.cfi_endproc
 1260              	.LFE24:
 1262              		.section	.text.block_insert,"ax",%progbits
 1263              		.align	1
 1264              		.syntax unified
 1265              		.thumb
 1266              		.thumb_func
 1267              		.fpu fpv5-d16
 1269              	block_insert:
 1270              	.LFB30:
 642:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1271              		.loc 1 642 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 8
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              	.LVL125:
 1276 0000 30B5     		push	{r4, r5, lr}
 1277              	.LCFI17:
 1278              		.cfi_def_cfa_offset 12
 1279              		.cfi_offset 4, -12
 1280              		.cfi_offset 5, -8
 1281              		.cfi_offset 14, -4
 1282 0002 83B0     		sub	sp, sp, #12
 1283              	.LCFI18:
 1284              		.cfi_def_cfa_offset 24
 1285 0004 0546     		mov	r5, r0
 1286 0006 0C46     		mov	r4, r1
 644:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     insert_free_block(control, block, fl, sl);
 1287              		.loc 1 644 0
 1288 0008 0846     		mov	r0, r1
 1289              	.LVL126:
 1290 000a FFF7FEFF 		bl	block_size
 1291              	.LVL127:
 1292 000e 6A46     		mov	r2, sp
 1293 0010 01A9     		add	r1, sp, #4
 1294 0012 FFF7FEFF 		bl	mapping_insert
 1295              	.LVL128:
 645:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1296              		.loc 1 645 0
 1297 0016 009B     		ldr	r3, [sp]
 1298 0018 019A     		ldr	r2, [sp, #4]
 1299 001a 2146     		mov	r1, r4
 1300 001c 2846     		mov	r0, r5
 1301 001e FFF7FEFF 		bl	insert_free_block
 1302              	.LVL129:
 646:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1303              		.loc 1 646 0
 1304 0022 03B0     		add	sp, sp, #12
 1305              	.LCFI19:
ARM GAS  /tmp/cc0wa2R1.s 			page 39


 1306              		.cfi_def_cfa_offset 12
 1307              		@ sp needed
 1308 0024 30BD     		pop	{r4, r5, pc}
 1309              		.cfi_endproc
 1310              	.LFE30:
 1312              		.section	.text.block_trim_free,"ax",%progbits
 1313              		.align	1
 1314              		.syntax unified
 1315              		.thumb
 1316              		.thumb_func
 1317              		.fpu fpv5-d16
 1319              	block_trim_free:
 1320              	.LFB36:
 716:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block must be free");
 1321              		.loc 1 716 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 0
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 1325              	.LVL130:
 1326 0000 70B5     		push	{r4, r5, r6, lr}
 1327              	.LCFI20:
 1328              		.cfi_def_cfa_offset 16
 1329              		.cfi_offset 4, -16
 1330              		.cfi_offset 5, -12
 1331              		.cfi_offset 6, -8
 1332              		.cfi_offset 14, -4
 1333 0002 0646     		mov	r6, r0
 1334 0004 0C46     		mov	r4, r1
 1335 0006 1546     		mov	r5, r2
 717:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1336              		.loc 1 717 0
 1337 0008 0846     		mov	r0, r1
 1338              	.LVL131:
 1339 000a FFF7FEFF 		bl	block_is_free
 1340              	.LVL132:
 1341 000e 00B9     		cbnz	r0, .L99
 1342              	.L100:
 1343 0010 FEE7     		b	.L100
 1344              	.L99:
 718:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * remaining_block = block_split(block, size);
 1345              		.loc 1 718 0
 1346 0012 2946     		mov	r1, r5
 1347 0014 2046     		mov	r0, r4
 1348 0016 FFF7FEFF 		bl	block_can_split
 1349              	.LVL133:
 1350 001a 70B1     		cbz	r0, .L98
 1351              	.LBB3:
 719:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_link_next(block);
 1352              		.loc 1 719 0
 1353 001c 2946     		mov	r1, r5
 1354 001e 2046     		mov	r0, r4
 1355 0020 FFF7FEFF 		bl	block_split
 1356              	.LVL134:
 1357 0024 0546     		mov	r5, r0
 1358              	.LVL135:
 720:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1359              		.loc 1 720 0
ARM GAS  /tmp/cc0wa2R1.s 			page 40


 1360 0026 2046     		mov	r0, r4
 1361              	.LVL136:
 1362 0028 FFF7FEFF 		bl	block_link_next
 1363              	.LVL137:
 721:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 1364              		.loc 1 721 0
 1365 002c 2846     		mov	r0, r5
 1366 002e FFF7FEFF 		bl	block_set_prev_free
 1367              	.LVL138:
 722:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1368              		.loc 1 722 0
 1369 0032 2946     		mov	r1, r5
 1370 0034 3046     		mov	r0, r6
 1371 0036 FFF7FEFF 		bl	block_insert
 1372              	.LVL139:
 1373              	.L98:
 1374              	.LBE3:
 724:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1375              		.loc 1 724 0
 1376 003a 70BD     		pop	{r4, r5, r6, pc}
 1377              		.cfi_endproc
 1378              	.LFE36:
 1380              		.section	.text.block_prepare_used,"ax",%progbits
 1381              		.align	1
 1382              		.syntax unified
 1383              		.thumb
 1384              		.thumb_func
 1385              		.fpu fpv5-d16
 1387              	block_prepare_used:
 1388              	.LFB40:
 783:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1389              		.loc 1 783 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL140:
 785:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(size && "size must be non-zero");
 1394              		.loc 1 785 0
 1395 0000 61B1     		cbz	r1, .L107
 783:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
 1396              		.loc 1 783 0
 1397 0002 10B5     		push	{r4, lr}
 1398              	.LCFI21:
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 4, -8
 1401              		.cfi_offset 14, -4
 1402 0004 0C46     		mov	r4, r1
 786:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_trim_free(control, block, size);
 1403              		.loc 1 786 0
 1404 0006 02B9     		cbnz	r2, .L105
 1405              	.L106:
 1406 0008 FEE7     		b	.L106
 1407              	.L105:
 787:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_mark_as_used(block);
 1408              		.loc 1 787 0
 1409 000a FFF7FEFF 		bl	block_trim_free
 1410              	.LVL141:
ARM GAS  /tmp/cc0wa2R1.s 			page 41


 788:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         p = block_to_ptr(block);
 1411              		.loc 1 788 0
 1412 000e 2046     		mov	r0, r4
 1413 0010 FFF7FEFF 		bl	block_mark_as_used
 1414              	.LVL142:
 789:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1415              		.loc 1 789 0
 1416 0014 2046     		mov	r0, r4
 1417 0016 FFF7FEFF 		bl	block_to_ptr
 1418              	.LVL143:
 792:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1419              		.loc 1 792 0
 1420 001a 10BD     		pop	{r4, pc}
 1421              	.LVL144:
 1422              	.L107:
 1423              	.LCFI22:
 1424              		.cfi_def_cfa_offset 0
 1425              		.cfi_restore 4
 1426              		.cfi_restore 14
 784:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block) {
 1427              		.loc 1 784 0
 1428 001c 0020     		movs	r0, #0
 1429              	.LVL145:
 792:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1430              		.loc 1 792 0
 1431 001e 7047     		bx	lr
 1432              		.cfi_endproc
 1433              	.LFE40:
 1435              		.section	.text.block_trim_free_leading,"ax",%progbits
 1436              		.align	1
 1437              		.syntax unified
 1438              		.thumb
 1439              		.thumb_func
 1440              		.fpu fpv5-d16
 1442              	block_trim_free_leading:
 1443              	.LFB38:
 741:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * remaining_block = block;
 1444              		.loc 1 741 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              	.LVL146:
 1449 0000 70B5     		push	{r4, r5, r6, lr}
 1450              	.LCFI23:
 1451              		.cfi_def_cfa_offset 16
 1452              		.cfi_offset 4, -16
 1453              		.cfi_offset 5, -12
 1454              		.cfi_offset 6, -8
 1455              		.cfi_offset 14, -4
 1456 0002 0646     		mov	r6, r0
 1457 0004 0C46     		mov	r4, r1
 1458 0006 1546     		mov	r5, r2
 1459              	.LVL147:
 743:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* We want the 2nd block. */
 1460              		.loc 1 743 0
 1461 0008 1146     		mov	r1, r2
 1462              	.LVL148:
ARM GAS  /tmp/cc0wa2R1.s 			page 42


 1463 000a 2046     		mov	r0, r4
 1464              	.LVL149:
 1465 000c FFF7FEFF 		bl	block_can_split
 1466              	.LVL150:
 1467 0010 70B1     		cbz	r0, .L113
 745:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1468              		.loc 1 745 0
 1469 0012 291F     		subs	r1, r5, #4
 1470 0014 2046     		mov	r0, r4
 1471 0016 FFF7FEFF 		bl	block_split
 1472              	.LVL151:
 1473 001a 0546     		mov	r5, r0
 1474              	.LVL152:
 746:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1475              		.loc 1 746 0
 1476 001c FFF7FEFF 		bl	block_set_prev_free
 1477              	.LVL153:
 748:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 1478              		.loc 1 748 0
 1479 0020 2046     		mov	r0, r4
 1480 0022 FFF7FEFF 		bl	block_link_next
 1481              	.LVL154:
 749:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1482              		.loc 1 749 0
 1483 0026 2146     		mov	r1, r4
 1484 0028 3046     		mov	r0, r6
 1485 002a FFF7FEFF 		bl	block_insert
 1486              	.LVL155:
 745:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_free(remaining_block);
 1487              		.loc 1 745 0
 1488 002e 2C46     		mov	r4, r5
 1489              	.LVL156:
 1490              	.L113:
 753:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1491              		.loc 1 753 0
 1492 0030 2046     		mov	r0, r4
 1493 0032 70BD     		pop	{r4, r5, r6, pc}
 1494              		.cfi_endproc
 1495              	.LFE38:
 1497              		.section	.text.block_remove,"ax",%progbits
 1498              		.align	1
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv5-d16
 1504              	block_remove:
 1505              	.LFB29:
 634:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl, sl;
 1506              		.loc 1 634 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              	.LVL157:
 1511 0000 30B5     		push	{r4, r5, lr}
 1512              	.LCFI24:
 1513              		.cfi_def_cfa_offset 12
 1514              		.cfi_offset 4, -12
ARM GAS  /tmp/cc0wa2R1.s 			page 43


 1515              		.cfi_offset 5, -8
 1516              		.cfi_offset 14, -4
 1517 0002 83B0     		sub	sp, sp, #12
 1518              	.LCFI25:
 1519              		.cfi_def_cfa_offset 24
 1520 0004 0546     		mov	r5, r0
 1521 0006 0C46     		mov	r4, r1
 636:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 1522              		.loc 1 636 0
 1523 0008 0846     		mov	r0, r1
 1524              	.LVL158:
 1525 000a FFF7FEFF 		bl	block_size
 1526              	.LVL159:
 1527 000e 6A46     		mov	r2, sp
 1528 0010 01A9     		add	r1, sp, #4
 1529 0012 FFF7FEFF 		bl	mapping_insert
 1530              	.LVL160:
 637:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1531              		.loc 1 637 0
 1532 0016 009B     		ldr	r3, [sp]
 1533 0018 019A     		ldr	r2, [sp, #4]
 1534 001a 2146     		mov	r1, r4
 1535 001c 2846     		mov	r0, r5
 1536 001e FFF7FEFF 		bl	remove_free_block
 1537              	.LVL161:
 638:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1538              		.loc 1 638 0
 1539 0022 03B0     		add	sp, sp, #12
 1540              	.LCFI26:
 1541              		.cfi_def_cfa_offset 12
 1542              		@ sp needed
 1543 0024 30BD     		pop	{r4, r5, pc}
 1544              		.cfi_endproc
 1545              	.LFE29:
 1547              		.section	.text.block_merge_prev,"ax",%progbits
 1548              		.align	1
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.fpu fpv5-d16
 1554              	block_merge_prev:
 1555              	.LFB34:
 687:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_is_prev_free(block)) {
 1556              		.loc 1 687 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL162:
 1561 0000 70B5     		push	{r4, r5, r6, lr}
 1562              	.LCFI27:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 4, -16
 1565              		.cfi_offset 5, -12
 1566              		.cfi_offset 6, -8
 1567              		.cfi_offset 14, -4
 1568 0002 0646     		mov	r6, r0
 1569 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/cc0wa2R1.s 			page 44


 688:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * prev = block_prev(block);
 1570              		.loc 1 688 0
 1571 0006 0846     		mov	r0, r1
 1572              	.LVL163:
 1573 0008 FFF7FEFF 		bl	block_is_prev_free
 1574              	.LVL164:
 1575 000c 90B1     		cbz	r0, .L118
 1576              	.LBB4:
 689:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(prev && "prev physical block can't be null");
 1577              		.loc 1 689 0
 1578 000e 2046     		mov	r0, r4
 1579 0010 FFF7FEFF 		bl	block_prev
 1580              	.LVL165:
 690:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 1581              		.loc 1 690 0
 1582 0014 0546     		mov	r5, r0
 1583 0016 00B9     		cbnz	r0, .L119
 1584              	.L120:
 1585 0018 FEE7     		b	.L120
 1586              	.L119:
 691:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_remove(control, prev);
 1587              		.loc 1 691 0
 1588 001a FFF7FEFF 		bl	block_is_free
 1589              	.LVL166:
 1590 001e 00B9     		cbnz	r0, .L121
 1591              	.L122:
 1592 0020 FEE7     		b	.L122
 1593              	.L121:
 692:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(prev, block);
 1594              		.loc 1 692 0
 1595 0022 2946     		mov	r1, r5
 1596 0024 3046     		mov	r0, r6
 1597 0026 FFF7FEFF 		bl	block_remove
 1598              	.LVL167:
 693:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1599              		.loc 1 693 0
 1600 002a 2146     		mov	r1, r4
 1601 002c 2846     		mov	r0, r5
 1602 002e FFF7FEFF 		bl	block_absorb
 1603              	.LVL168:
 1604 0032 0446     		mov	r4, r0
 1605              	.LVL169:
 1606              	.L118:
 1607              	.LBE4:
 697:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1608              		.loc 1 697 0
 1609 0034 2046     		mov	r0, r4
 1610 0036 70BD     		pop	{r4, r5, r6, pc}
 1611              		.cfi_endproc
 1612              	.LFE34:
 1614              		.section	.text.block_merge_next,"ax",%progbits
 1615              		.align	1
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu fpv5-d16
 1621              	block_merge_next:
ARM GAS  /tmp/cc0wa2R1.s 			page 45


 1622              	.LFB35:
 701:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next = block_next(block);
 1623              		.loc 1 701 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627              	.LVL170:
 1628 0000 70B5     		push	{r4, r5, r6, lr}
 1629              	.LCFI28:
 1630              		.cfi_def_cfa_offset 16
 1631              		.cfi_offset 4, -16
 1632              		.cfi_offset 5, -12
 1633              		.cfi_offset 6, -8
 1634              		.cfi_offset 14, -4
 1635 0002 0646     		mov	r6, r0
 1636 0004 0C46     		mov	r4, r1
 702:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(next && "next physical block can't be null");
 1637              		.loc 1 702 0
 1638 0006 0846     		mov	r0, r1
 1639              	.LVL171:
 1640 0008 FFF7FEFF 		bl	block_next
 1641              	.LVL172:
 703:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1642              		.loc 1 703 0
 1643 000c 00B9     		cbnz	r0, .L125
 1644              	.L126:
 1645 000e FEE7     		b	.L126
 1646              	.L125:
 1647 0010 0546     		mov	r5, r0
 705:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_last(block) && "previous block can't be last");
 1648              		.loc 1 705 0
 1649 0012 FFF7FEFF 		bl	block_is_free
 1650              	.LVL173:
 1651 0016 68B1     		cbz	r0, .L127
 706:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_remove(control, next);
 1652              		.loc 1 706 0
 1653 0018 2046     		mov	r0, r4
 1654 001a FFF7FEFF 		bl	block_is_last
 1655              	.LVL174:
 1656 001e 00B1     		cbz	r0, .L128
 1657              	.L129:
 1658 0020 FEE7     		b	.L129
 1659              	.L128:
 707:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_absorb(block, next);
 1660              		.loc 1 707 0
 1661 0022 2946     		mov	r1, r5
 1662 0024 3046     		mov	r0, r6
 1663 0026 FFF7FEFF 		bl	block_remove
 1664              	.LVL175:
 708:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1665              		.loc 1 708 0
 1666 002a 2946     		mov	r1, r5
 1667 002c 2046     		mov	r0, r4
 1668 002e FFF7FEFF 		bl	block_absorb
 1669              	.LVL176:
 1670 0032 0446     		mov	r4, r0
 1671              	.LVL177:
ARM GAS  /tmp/cc0wa2R1.s 			page 46


 1672              	.L127:
 712:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1673              		.loc 1 712 0
 1674 0034 2046     		mov	r0, r4
 1675 0036 70BD     		pop	{r4, r5, r6, pc}
 1676              		.cfi_endproc
 1677              	.LFE35:
 1679              		.section	.text.block_trim_used,"ax",%progbits
 1680              		.align	1
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1684              		.fpu fpv5-d16
 1686              	block_trim_used:
 1687              	.LFB37:
 728:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block) && "block must be used");
 1688              		.loc 1 728 0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692              	.LVL178:
 1693 0000 70B5     		push	{r4, r5, r6, lr}
 1694              	.LCFI29:
 1695              		.cfi_def_cfa_offset 16
 1696              		.cfi_offset 4, -16
 1697              		.cfi_offset 5, -12
 1698              		.cfi_offset 6, -8
 1699              		.cfi_offset 14, -4
 1700 0002 0546     		mov	r5, r0
 1701 0004 0C46     		mov	r4, r1
 1702 0006 1646     		mov	r6, r2
 729:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block_can_split(block, size)) {
 1703              		.loc 1 729 0
 1704 0008 0846     		mov	r0, r1
 1705              	.LVL179:
 1706 000a FFF7FEFF 		bl	block_is_free
 1707              	.LVL180:
 1708 000e 00B1     		cbz	r0, .L132
 1709              	.L133:
 1710 0010 FEE7     		b	.L133
 1711              	.L132:
 730:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* If the next block is free, we must coalesce. */
 1712              		.loc 1 730 0
 1713 0012 3146     		mov	r1, r6
 1714 0014 2046     		mov	r0, r4
 1715 0016 FFF7FEFF 		bl	block_can_split
 1716              	.LVL181:
 1717 001a 00B9     		cbnz	r0, .L136
 1718              	.LVL182:
 1719              	.L131:
 738:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1720              		.loc 1 738 0
 1721 001c 70BD     		pop	{r4, r5, r6, pc}
 1722              	.LVL183:
 1723              	.L136:
 1724              	.LBB5:
 732:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_set_prev_used(remaining_block);
ARM GAS  /tmp/cc0wa2R1.s 			page 47


 1725              		.loc 1 732 0
 1726 001e 3146     		mov	r1, r6
 1727 0020 2046     		mov	r0, r4
 1728 0022 FFF7FEFF 		bl	block_split
 1729              	.LVL184:
 1730 0026 0446     		mov	r4, r0
 1731              	.LVL185:
 733:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1732              		.loc 1 733 0
 1733 0028 FFF7FEFF 		bl	block_set_prev_used
 1734              	.LVL186:
 735:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, remaining_block);
 1735              		.loc 1 735 0
 1736 002c 2146     		mov	r1, r4
 1737 002e 2846     		mov	r0, r5
 1738 0030 FFF7FEFF 		bl	block_merge_next
 1739              	.LVL187:
 736:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1740              		.loc 1 736 0
 1741 0034 0146     		mov	r1, r0
 1742 0036 2846     		mov	r0, r5
 1743              	.LVL188:
 1744 0038 FFF7FEFF 		bl	block_insert
 1745              	.LVL189:
 1746              	.LBE5:
 738:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1747              		.loc 1 738 0
 1748 003c EEE7     		b	.L131
 1749              		.cfi_endproc
 1750              	.LFE37:
 1752              		.section	.text.mapping_search,"ax",%progbits
 1753              		.align	1
 1754              		.syntax unified
 1755              		.thumb
 1756              		.thumb_func
 1757              		.fpu fpv5-d16
 1759              	mapping_search:
 1760              	.LFB25:
 547:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(size >= SMALL_BLOCK_SIZE) {
 1761              		.loc 1 547 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 0
 1764              		@ frame_needed = 0, uses_anonymous_args = 0
 1765              	.LVL190:
 1766 0000 70B5     		push	{r4, r5, r6, lr}
 1767              	.LCFI30:
 1768              		.cfi_def_cfa_offset 16
 1769              		.cfi_offset 4, -16
 1770              		.cfi_offset 5, -12
 1771              		.cfi_offset 6, -8
 1772              		.cfi_offset 14, -4
 1773 0002 0446     		mov	r4, r0
 1774 0004 0D46     		mov	r5, r1
 1775 0006 1646     		mov	r6, r2
 548:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 1776              		.loc 1 548 0
 1777 0008 7F28     		cmp	r0, #127
ARM GAS  /tmp/cc0wa2R1.s 			page 48


 1778 000a 06D9     		bls	.L138
 1779              	.LBB6:
 549:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         size += round;
 1780              		.loc 1 549 0
 1781 000c FFF7FEFF 		bl	tlsf_fls
 1782              	.LVL191:
 1783 0010 431F     		subs	r3, r0, #5
 1784 0012 0120     		movs	r0, #1
 1785 0014 9840     		lsls	r0, r0, r3
 1786 0016 0138     		subs	r0, r0, #1
 1787              	.LVL192:
 550:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1788              		.loc 1 550 0
 1789 0018 0444     		add	r4, r4, r0
 1790              	.LVL193:
 1791              	.L138:
 1792              	.LBE6:
 552:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1793              		.loc 1 552 0
 1794 001a 3246     		mov	r2, r6
 1795 001c 2946     		mov	r1, r5
 1796 001e 2046     		mov	r0, r4
 1797 0020 FFF7FEFF 		bl	mapping_insert
 1798              	.LVL194:
 553:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1799              		.loc 1 553 0
 1800 0024 70BD     		pop	{r4, r5, r6, pc}
 1801              		.cfi_endproc
 1802              	.LFE25:
 1804              		.section	.text.tlsf_ffs,"ax",%progbits
 1805              		.align	1
 1806              		.syntax unified
 1807              		.thumb
 1808              		.thumb_func
 1809              		.fpu fpv5-d16
 1811              	tlsf_ffs:
 1812              	.LFB1:
  95:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return __builtin_ffs(word) - 1;
 1813              		.loc 1 95 0
 1814              		.cfi_startproc
 1815              		@ args = 0, pretend = 0, frame = 0
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817              		@ link register save eliminated.
 1818              	.LVL195:
 1819 0000 0346     		mov	r3, r0
  96:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1820              		.loc 1 96 0
 1821 0002 90FAA0F0 		rbit	r0, r0
 1822              	.LVL196:
 1823 0006 B0FA80F0 		clz	r0, r0
 1824 000a 0BB9     		cbnz	r3, .L141
 1825 000c 4FF0FF30 		mov	r0, #-1
 1826              	.L141:
  97:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1827              		.loc 1 97 0
 1828 0010 7047     		bx	lr
 1829              		.cfi_endproc
ARM GAS  /tmp/cc0wa2R1.s 			page 49


 1830              	.LFE1:
 1832              		.section	.text.search_suitable_block,"ax",%progbits
 1833              		.align	1
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu fpv5-d16
 1839              	search_suitable_block:
 1840              	.LFB26:
 556:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl = *fli;
 1841              		.loc 1 556 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              	.LVL197:
 1846 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1847              	.LCFI31:
 1848              		.cfi_def_cfa_offset 24
 1849              		.cfi_offset 3, -24
 1850              		.cfi_offset 4, -20
 1851              		.cfi_offset 5, -16
 1852              		.cfi_offset 6, -12
 1853              		.cfi_offset 7, -8
 1854              		.cfi_offset 14, -4
 1855 0002 0546     		mov	r5, r0
 1856 0004 1646     		mov	r6, r2
 557:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int sl = *sli;
 1857              		.loc 1 557 0
 1858 0006 0C68     		ldr	r4, [r1]
 1859              	.LVL198:
 558:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1860              		.loc 1 558 0
 1861 0008 1268     		ldr	r2, [r2]
 1862              	.LVL199:
 564:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(!sl_map) {
 1863              		.loc 1 564 0
 1864 000a 231D     		adds	r3, r4, #4
 1865 000c 00EB8303 		add	r3, r0, r3, lsl #2
 1866 0010 5868     		ldr	r0, [r3, #4]
 1867              	.LVL200:
 1868 0012 4FF0FF33 		mov	r3, #-1
 1869 0016 9340     		lsls	r3, r3, r2
 1870              	.LVL201:
 565:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* No block exists. Search in the next largest first-level list. */
 1871              		.loc 1 565 0
 1872 0018 1840     		ands	r0, r0, r3
 1873              	.LVL202:
 1874 001a 0FD1     		bne	.L143
 1875 001c 0F46     		mov	r7, r1
 1876              	.LBB7:
 567:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(!fl_map) {
 1877              		.loc 1 567 0
 1878 001e 2B69     		ldr	r3, [r5, #16]
 1879 0020 0134     		adds	r4, r4, #1
 1880              	.LVL203:
 1881 0022 4FF0FF30 		mov	r0, #-1
 1882              	.LVL204:
ARM GAS  /tmp/cc0wa2R1.s 			page 50


 1883 0026 A040     		lsls	r0, r0, r4
 1884              	.LVL205:
 568:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* No free blocks available, memory has been exhausted. */
 1885              		.loc 1 568 0
 1886 0028 1840     		ands	r0, r3, r0
 1887              	.LVL206:
 1888 002a 13D0     		beq	.L147
 573:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         *fli = fl;
 1889              		.loc 1 573 0
 1890 002c FFF7FEFF 		bl	tlsf_ffs
 1891              	.LVL207:
 1892 0030 0446     		mov	r4, r0
 1893              	.LVL208:
 574:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         sl_map = control->sl_bitmap[fl];
 1894              		.loc 1 574 0
 1895 0032 3860     		str	r0, [r7]
 575:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1896              		.loc 1 575 0
 1897 0034 031D     		adds	r3, r0, #4
 1898 0036 05EB8303 		add	r3, r5, r3, lsl #2
 1899 003a 5868     		ldr	r0, [r3, #4]
 1900              	.LVL209:
 1901              	.L143:
 1902              	.LBE7:
 577:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     sl = tlsf_ffs(sl_map);
 1903              		.loc 1 577 0
 1904 003c 00B9     		cbnz	r0, .L145
 1905              	.L146:
 1906 003e FEE7     		b	.L146
 1907              	.L145:
 578:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     *sli = sl;
 1908              		.loc 1 578 0
 1909 0040 FFF7FEFF 		bl	tlsf_ffs
 1910              	.LVL210:
 579:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1911              		.loc 1 579 0
 1912 0044 3060     		str	r0, [r6]
 582:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 1913              		.loc 1 582 0
 1914 0046 00EB4413 		add	r3, r0, r4, lsl #5
 1915 004a 0E33     		adds	r3, r3, #14
 1916 004c 05EB8305 		add	r5, r5, r3, lsl #2
 1917              	.LVL211:
 1918 0050 6868     		ldr	r0, [r5, #4]
 1919              	.LVL212:
 1920              	.L142:
 583:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1921              		.loc 1 583 0
 1922 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1923              	.LVL213:
 1924              	.L147:
 1925              	.LBB8:
 570:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 1926              		.loc 1 570 0
 1927 0054 0020     		movs	r0, #0
 1928              	.LVL214:
 1929 0056 FCE7     		b	.L142
ARM GAS  /tmp/cc0wa2R1.s 			page 51


 1930              	.LBE8:
 1931              		.cfi_endproc
 1932              	.LFE26:
 1934              		.section	.text.block_locate_free,"ax",%progbits
 1935              		.align	1
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv5-d16
 1941              	block_locate_free:
 1942              	.LFB39:
 756:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 1943              		.loc 1 756 0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 8
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947              	.LVL215:
 1948 0000 70B5     		push	{r4, r5, r6, lr}
 1949              	.LCFI32:
 1950              		.cfi_def_cfa_offset 16
 1951              		.cfi_offset 4, -16
 1952              		.cfi_offset 5, -12
 1953              		.cfi_offset 6, -8
 1954              		.cfi_offset 14, -4
 1955 0002 82B0     		sub	sp, sp, #8
 1956              	.LCFI33:
 1957              		.cfi_def_cfa_offset 24
 757:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = 0;
 1958              		.loc 1 757 0
 1959 0004 0023     		movs	r3, #0
 1960 0006 0193     		str	r3, [sp, #4]
 1961 0008 0093     		str	r3, [sp]
 1962              	.LVL216:
 760:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         mapping_search(size, &fl, &sl);
 1963              		.loc 1 760 0
 1964 000a E1B1     		cbz	r1, .L153
 1965 000c 0E46     		mov	r6, r1
 1966 000e 0546     		mov	r5, r0
 761:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 1967              		.loc 1 761 0
 1968 0010 6A46     		mov	r2, sp
 1969 0012 01A9     		add	r1, sp, #4
 1970              	.LVL217:
 1971 0014 3046     		mov	r0, r6
 1972              	.LVL218:
 1973 0016 FFF7FEFF 		bl	mapping_search
 1974              	.LVL219:
 769:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block = search_suitable_block(control, &fl, &sl);
 1975              		.loc 1 769 0
 1976 001a 019B     		ldr	r3, [sp, #4]
 1977 001c 092B     		cmp	r3, #9
 1978 001e 16DC     		bgt	.L154
 770:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 1979              		.loc 1 770 0
 1980 0020 6A46     		mov	r2, sp
 1981 0022 01A9     		add	r1, sp, #4
 1982 0024 2846     		mov	r0, r5
ARM GAS  /tmp/cc0wa2R1.s 			page 52


 1983 0026 FFF7FEFF 		bl	search_suitable_block
 1984              	.LVL220:
 774:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(block_size(block) >= size);
 1985              		.loc 1 774 0
 1986 002a 0446     		mov	r4, r0
 1987 002c 60B1     		cbz	r0, .L149
 775:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         remove_free_block(control, block, fl, sl);
 1988              		.loc 1 775 0
 1989 002e FFF7FEFF 		bl	block_size
 1990              	.LVL221:
 1991 0032 B042     		cmp	r0, r6
 1992 0034 00D2     		bcs	.L151
 1993              	.L152:
 1994 0036 FEE7     		b	.L152
 1995              	.L151:
 776:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 1996              		.loc 1 776 0
 1997 0038 009B     		ldr	r3, [sp]
 1998 003a 019A     		ldr	r2, [sp, #4]
 1999 003c 2146     		mov	r1, r4
 2000 003e 2846     		mov	r0, r5
 2001 0040 FFF7FEFF 		bl	remove_free_block
 2002              	.LVL222:
 2003 0044 00E0     		b	.L149
 2004              	.LVL223:
 2005              	.L153:
 758:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2006              		.loc 1 758 0
 2007 0046 0024     		movs	r4, #0
 2008              	.LVL224:
 2009              	.L149:
 780:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2010              		.loc 1 780 0
 2011 0048 2046     		mov	r0, r4
 2012 004a 02B0     		add	sp, sp, #8
 2013              	.LCFI34:
 2014              		.cfi_remember_state
 2015              		.cfi_def_cfa_offset 16
 2016              		@ sp needed
 2017 004c 70BD     		pop	{r4, r5, r6, pc}
 2018              	.LVL225:
 2019              	.L154:
 2020              	.LCFI35:
 2021              		.cfi_restore_state
 758:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2022              		.loc 1 758 0
 2023 004e 0024     		movs	r4, #0
 779:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2024              		.loc 1 779 0
 2025 0050 FAE7     		b	.L149
 2026              		.cfi_endproc
 2027              	.LFE39:
 2029              		.section	.text.lv_tlsf_check,"ax",%progbits
 2030              		.align	1
 2031              		.global	lv_tlsf_check
 2032              		.syntax unified
 2033              		.thumb
ARM GAS  /tmp/cc0wa2R1.s 			page 53


 2034              		.thumb_func
 2035              		.fpu fpv5-d16
 2037              	lv_tlsf_check:
 2038              	.LFB43:
 840:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int i, j;
 2039              		.loc 1 840 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 8
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              	.LVL226:
 2044 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2045              	.LCFI36:
 2046              		.cfi_def_cfa_offset 28
 2047              		.cfi_offset 4, -28
 2048              		.cfi_offset 5, -24
 2049              		.cfi_offset 6, -20
 2050              		.cfi_offset 7, -16
 2051              		.cfi_offset 8, -12
 2052              		.cfi_offset 9, -8
 2053              		.cfi_offset 14, -4
 2054 0004 83B0     		sub	sp, sp, #12
 2055              	.LCFI37:
 2056              		.cfi_def_cfa_offset 40
 2057 0006 0646     		mov	r6, r0
 2058              	.LVL227:
 847:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2059              		.loc 1 847 0
 2060 0008 0025     		movs	r5, #0
 2061              	.LVL228:
 2062              	.L157:
 847:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2063              		.loc 1 847 0 is_stmt 0 discriminator 1
 2064 000a 092D     		cmp	r5, #9
 2065 000c 50DC     		bgt	.L184
 848:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2066              		.loc 1 848 0 is_stmt 1
 2067 000e 0027     		movs	r7, #0
 2068              	.L181:
 2069              	.LVL229:
 848:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2070              		.loc 1 848 0 is_stmt 0 discriminator 1
 2071 0010 1F2F     		cmp	r7, #31
 2072 0012 4BDC     		bgt	.L185
 2073              	.LBB9:
 849:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int sl_list = control->sl_bitmap[i];
 2074              		.loc 1 849 0 is_stmt 1
 2075 0014 0123     		movs	r3, #1
 2076 0016 03FA05F0 		lsl	r0, r3, r5
 2077              	.LVL230:
 850:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int sl_map = sl_list & (1U << j);
 2078              		.loc 1 850 0
 2079 001a 291D     		adds	r1, r5, #4
 2080 001c 06EB8101 		add	r1, r6, r1, lsl #2
 2081 0020 4A68     		ldr	r2, [r1, #4]
 2082              	.LVL231:
 851:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const block_header_t * block = control->blocks[i][j];
 2083              		.loc 1 851 0
ARM GAS  /tmp/cc0wa2R1.s 			page 54


 2084 0022 BB40     		lsls	r3, r3, r7
 2085 0024 1340     		ands	r3, r3, r2
 2086              	.LVL232:
 852:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2087              		.loc 1 852 0
 2088 0026 07EB4511 		add	r1, r7, r5, lsl #5
 2089 002a 0E31     		adds	r1, r1, #14
 2090 002c 06EB8101 		add	r1, r6, r1, lsl #2
 2091 0030 4C68     		ldr	r4, [r1, #4]
 2092              	.LVL233:
 855:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!sl_map && "second-level map must be null");
 2093              		.loc 1 855 0
 2094 0032 3169     		ldr	r1, [r6, #16]
 2095 0034 0142     		tst	r1, r0
 2096 0036 00D1     		bne	.L158
 856:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 2097              		.loc 1 856 0
 2098 0038 1BB9     		cbnz	r3, .L159
 2099              	.L158:
 859:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block == &control->block_null && "block list must be null");
 2100              		.loc 1 859 0
 2101 003a 1BB9     		cbnz	r3, .L160
 860:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 continue;
 2102              		.loc 1 860 0
 2103 003c A642     		cmp	r6, r4
 2104 003e 33D0     		beq	.L161
 2105              	.L162:
 2106 0040 FEE7     		b	.L162
 2107              	.LVL234:
 2108              	.L159:
 2109 0042 FEE7     		b	.L159
 2110              	.L160:
 865:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             tlsf_insist(block != &control->block_null && "block should not be null");
 2111              		.loc 1 865 0
 2112 0044 42B3     		cbz	r2, .L164
 866:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2113              		.loc 1 866 0
 2114 0046 B046     		mov	r8, r6
 2115 0048 A642     		cmp	r6, r4
 2116 004a 26D0     		beq	.L166
 2117              	.LVL235:
 2118              	.L165:
 868:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 int fli, sli;
 2119              		.loc 1 868 0
 2120 004c A045     		cmp	r8, r4
 2121 004e 2BD0     		beq	.L161
 2122              	.LBB10:
 870:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_prev_free(block) && "blocks should have coalesced");
 2123              		.loc 1 870 0
 2124 0050 2046     		mov	r0, r4
 2125 0052 FFF7FEFF 		bl	block_is_free
 2126              	.LVL236:
 2127 0056 08B3     		cbz	r0, .L168
 871:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(!block_is_free(block_next(block)) && "blocks should have coalesced");
 2128              		.loc 1 871 0
 2129 0058 2046     		mov	r0, r4
 2130 005a FFF7FEFF 		bl	block_is_prev_free
ARM GAS  /tmp/cc0wa2R1.s 			page 55


 2131              	.LVL237:
 2132 005e F0B9     		cbnz	r0, .L170
 872:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_is_prev_free(block_next(block)) && "block should be free");
 2133              		.loc 1 872 0
 2134 0060 2046     		mov	r0, r4
 2135 0062 FFF7FEFF 		bl	block_next
 2136              	.LVL238:
 2137 0066 8146     		mov	r9, r0
 2138 0068 FFF7FEFF 		bl	block_is_free
 2139              	.LVL239:
 2140 006c C0B9     		cbnz	r0, .L172
 873:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(block_size(block) >= block_size_min && "block not minimum size");
 2141              		.loc 1 873 0
 2142 006e 4846     		mov	r0, r9
 2143 0070 FFF7FEFF 		bl	block_is_prev_free
 2144              	.LVL240:
 2145 0074 A8B1     		cbz	r0, .L174
 874:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2146              		.loc 1 874 0
 2147 0076 2046     		mov	r0, r4
 2148 0078 FFF7FEFF 		bl	block_size
 2149              	.LVL241:
 2150 007c 0B28     		cmp	r0, #11
 2151 007e 11D9     		bls	.L176
 876:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 tlsf_insist(fli == i && sli == j && "block size indexed in wrong list");
 2152              		.loc 1 876 0
 2153 0080 01AA     		add	r2, sp, #4
 2154 0082 6946     		mov	r1, sp
 2155 0084 FFF7FEFF 		bl	mapping_insert
 2156              	.LVL242:
 877:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2157              		.loc 1 877 0
 2158 0088 009B     		ldr	r3, [sp]
 2159 008a AB42     		cmp	r3, r5
 2160 008c 0BD1     		bne	.L177
 877:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block = block->next_free;
 2161              		.loc 1 877 0 is_stmt 0 discriminator 1
 2162 008e 019B     		ldr	r3, [sp, #4]
 2163 0090 BB42     		cmp	r3, r7
 2164 0092 08D1     		bne	.L177
 878:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 2165              		.loc 1 878 0 is_stmt 1
 2166 0094 A468     		ldr	r4, [r4, #8]
 2167              	.LVL243:
 2168 0096 D9E7     		b	.L165
 2169              	.LVL244:
 2170              	.L164:
 2171 0098 FEE7     		b	.L164
 2172              	.L166:
 2173 009a FEE7     		b	.L166
 2174              	.LVL245:
 2175              	.L168:
 2176 009c FEE7     		b	.L168
 2177              	.L170:
 2178 009e FEE7     		b	.L170
 2179              	.L172:
 2180 00a0 FEE7     		b	.L172
ARM GAS  /tmp/cc0wa2R1.s 			page 56


 2181              	.L174:
 2182 00a2 FEE7     		b	.L174
 2183              	.L176:
 2184 00a4 FEE7     		b	.L176
 2185              	.L177:
 2186 00a6 FEE7     		b	.L177
 2187              	.L161:
 2188              	.LBE10:
 2189              	.LBE9:
 848:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const int fl_map = control->fl_bitmap & (1U << i);
 2190              		.loc 1 848 0 discriminator 2
 2191 00a8 0137     		adds	r7, r7, #1
 2192              	.LVL246:
 2193 00aa B1E7     		b	.L181
 2194              	.LVL247:
 2195              	.L185:
 847:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         for(j = 0; j < SL_INDEX_COUNT; ++j) {
 2196              		.loc 1 847 0 discriminator 2
 2197 00ac 0135     		adds	r5, r5, #1
 2198              	.LVL248:
 2199 00ae ACE7     		b	.L157
 2200              	.LVL249:
 2201              	.L184:
 884:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 2202              		.loc 1 884 0
 2203 00b0 0020     		movs	r0, #0
 2204 00b2 03B0     		add	sp, sp, #12
 2205              	.LCFI38:
 2206              		.cfi_def_cfa_offset 28
 2207              		@ sp needed
 2208 00b4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2209              		.cfi_endproc
 2210              	.LFE43:
 2212              		.section	.text.lv_tlsf_walk_pool,"ax",%progbits
 2213              		.align	1
 2214              		.global	lv_tlsf_walk_pool
 2215              		.syntax unified
 2216              		.thumb
 2217              		.thumb_func
 2218              		.fpu fpv5-d16
 2220              	lv_tlsf_walk_pool:
 2221              	.LFB45:
 893:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 894:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
 895:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2222              		.loc 1 895 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              	.LVL250:
 2227 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2228              	.LCFI39:
 2229              		.cfi_def_cfa_offset 24
 2230              		.cfi_offset 4, -24
 2231              		.cfi_offset 5, -20
 2232              		.cfi_offset 6, -16
 2233              		.cfi_offset 7, -12
ARM GAS  /tmp/cc0wa2R1.s 			page 57


 2234              		.cfi_offset 8, -8
 2235              		.cfi_offset 14, -4
 2236 0004 9046     		mov	r8, r2
 896:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 2237              		.loc 1 896 0
 2238 0006 0F46     		mov	r7, r1
 2239 0008 29B1     		cbz	r1, .L193
 2240              	.L187:
 2241              	.LVL251:
 897:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2242              		.loc 1 897 0 discriminator 4
 2243 000a 6FF00301 		mvn	r1, #3
 2244              	.LVL252:
 2245 000e FFF7FEFF 		bl	offset_to_block
 2246              	.LVL253:
 2247 0012 0446     		mov	r4, r0
 2248              	.LVL254:
 898:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         offset_to_block(pool, -(int)block_header_overhead);
 899:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 900:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     while(block && !block_is_last(block)) {
 2249              		.loc 1 900 0 discriminator 4
 2250 0014 17E0     		b	.L188
 2251              	.LVL255:
 2252              	.L193:
 896:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block =
 2253              		.loc 1 896 0
 2254 0016 104F     		ldr	r7, .L194
 2255 0018 F7E7     		b	.L187
 2256              	.LVL256:
 2257              	.L190:
 901:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2258              		.loc 1 901 0
 2259 001a 2046     		mov	r0, r4
 2260 001c FFF7FEFF 		bl	block_to_ptr
 2261              	.LVL257:
 2262 0020 0546     		mov	r5, r0
 2263 0022 2046     		mov	r0, r4
 2264 0024 FFF7FEFF 		bl	block_size
 2265              	.LVL258:
 2266 0028 0646     		mov	r6, r0
 902:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block_to_ptr(block),
 903:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block_size(block),
 904:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             !block_is_free(block),
 2267              		.loc 1 904 0
 2268 002a 2046     		mov	r0, r4
 2269 002c FFF7FEFF 		bl	block_is_free
 2270              	.LVL259:
 901:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2271              		.loc 1 901 0
 2272 0030 4346     		mov	r3, r8
 2273 0032 B0FA80F2 		clz	r2, r0
 2274 0036 5209     		lsrs	r2, r2, #5
 2275 0038 3146     		mov	r1, r6
 2276 003a 2846     		mov	r0, r5
 2277 003c B847     		blx	r7
 2278              	.LVL260:
 905:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             user);
ARM GAS  /tmp/cc0wa2R1.s 			page 58


 906:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_next(block);
 2279              		.loc 1 906 0
 2280 003e 2046     		mov	r0, r4
 2281 0040 FFF7FEFF 		bl	block_next
 2282              	.LVL261:
 2283 0044 0446     		mov	r4, r0
 2284              	.LVL262:
 2285              	.L188:
 900:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2286              		.loc 1 900 0
 2287 0046 24B1     		cbz	r4, .L186
 900:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         pool_walker(
 2288              		.loc 1 900 0 is_stmt 0 discriminator 1
 2289 0048 2046     		mov	r0, r4
 2290 004a FFF7FEFF 		bl	block_is_last
 2291              	.LVL263:
 2292 004e 0028     		cmp	r0, #0
 2293 0050 E3D0     		beq	.L190
 2294              	.L186:
 907:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 908:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2295              		.loc 1 908 0 is_stmt 1
 2296 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2297              	.LVL264:
 2298              	.L195:
 2299 0056 00BF     		.align	2
 2300              	.L194:
 2301 0058 00000000 		.word	default_walker
 2302              		.cfi_endproc
 2303              	.LFE45:
 2305              		.section	.text.lv_tlsf_block_size,"ax",%progbits
 2306              		.align	1
 2307              		.global	lv_tlsf_block_size
 2308              		.syntax unified
 2309              		.thumb
 2310              		.thumb_func
 2311              		.fpu fpv5-d16
 2313              	lv_tlsf_block_size:
 2314              	.LFB46:
 909:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 910:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size(void * ptr)
 911:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2315              		.loc 1 911 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319              	.LVL265:
 912:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 913:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2320              		.loc 1 913 0
 2321 0000 28B1     		cbz	r0, .L198
 911:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
 2322              		.loc 1 911 0
 2323 0002 08B5     		push	{r3, lr}
 2324              	.LCFI40:
 2325              		.cfi_def_cfa_offset 8
 2326              		.cfi_offset 3, -8
ARM GAS  /tmp/cc0wa2R1.s 			page 59


 2327              		.cfi_offset 14, -4
 2328              	.LBB11:
 914:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const block_header_t * block = block_from_ptr(ptr);
 2329              		.loc 1 914 0
 2330 0004 FFF7FEFF 		bl	block_from_ptr
 2331              	.LVL266:
 915:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         size = block_size(block);
 2332              		.loc 1 915 0
 2333 0008 FFF7FEFF 		bl	block_size
 2334              	.LVL267:
 2335              	.LBE11:
 916:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 917:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return size;
 918:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2336              		.loc 1 918 0
 2337 000c 08BD     		pop	{r3, pc}
 2338              	.LVL268:
 2339              	.L198:
 2340              	.LCFI41:
 2341              		.cfi_def_cfa_offset 0
 2342              		.cfi_restore 3
 2343              		.cfi_restore 14
 912:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 2344              		.loc 1 912 0
 2345 000e 0020     		movs	r0, #0
 2346              	.LVL269:
 2347              		.loc 1 918 0
 2348 0010 7047     		bx	lr
 2349              		.cfi_endproc
 2350              	.LFE46:
 2352              		.section	.text.lv_tlsf_check_pool,"ax",%progbits
 2353              		.align	1
 2354              		.global	lv_tlsf_check_pool
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv5-d16
 2360              	lv_tlsf_check_pool:
 2361              	.LFB47:
 919:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 920:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** int lv_tlsf_check_pool(lv_pool_t pool)
 921:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2362              		.loc 1 921 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 8
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 2366              	.LVL270:
 2367 0000 00B5     		push	{lr}
 2368              	.LCFI42:
 2369              		.cfi_def_cfa_offset 4
 2370              		.cfi_offset 14, -4
 2371 0002 83B0     		sub	sp, sp, #12
 2372              	.LCFI43:
 2373              		.cfi_def_cfa_offset 16
 922:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Check that the blocks are physically correct. */
 923:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     integrity_t integ = { 0, 0 };
 2374              		.loc 1 923 0
ARM GAS  /tmp/cc0wa2R1.s 			page 60


 2375 0004 0023     		movs	r3, #0
 2376 0006 0093     		str	r3, [sp]
 2377 0008 0193     		str	r3, [sp, #4]
 924:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_walk_pool(pool, integrity_walker, &integ);
 2378              		.loc 1 924 0
 2379 000a 6A46     		mov	r2, sp
 2380 000c 0349     		ldr	r1, .L205
 2381 000e FFF7FEFF 		bl	lv_tlsf_walk_pool
 2382              	.LVL271:
 925:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 926:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return integ.status;
 927:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2383              		.loc 1 927 0
 2384 0012 0198     		ldr	r0, [sp, #4]
 2385 0014 03B0     		add	sp, sp, #12
 2386              	.LCFI44:
 2387              		.cfi_def_cfa_offset 4
 2388              		@ sp needed
 2389 0016 5DF804FB 		ldr	pc, [sp], #4
 2390              	.L206:
 2391 001a 00BF     		.align	2
 2392              	.L205:
 2393 001c 00000000 		.word	integrity_walker
 2394              		.cfi_endproc
 2395              	.LFE47:
 2397              		.section	.text.lv_tlsf_size,"ax",%progbits
 2398              		.align	1
 2399              		.global	lv_tlsf_size
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv5-d16
 2405              	lv_tlsf_size:
 2406              	.LFB48:
 928:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 929:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 930:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Size of the TLSF structures in a given memory block passed to
 931:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_create, equal to the size of a control_t
 932:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 933:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_size(void)
 934:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2407              		.loc 1 934 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
 935:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return sizeof(control_t);
 936:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2412              		.loc 1 936 0
 2413 0000 40F23C50 		movw	r0, #1340
 2414 0004 7047     		bx	lr
 2415              		.cfi_endproc
 2416              	.LFE48:
 2418              		.section	.text.lv_tlsf_align_size,"ax",%progbits
 2419              		.align	1
 2420              		.global	lv_tlsf_align_size
 2421              		.syntax unified
ARM GAS  /tmp/cc0wa2R1.s 			page 61


 2422              		.thumb
 2423              		.thumb_func
 2424              		.fpu fpv5-d16
 2426              	lv_tlsf_align_size:
 2427              	.LFB49:
 937:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 938:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_align_size(void)
 939:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2428              		.loc 1 939 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              		@ link register save eliminated.
 940:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return ALIGN_SIZE;
 941:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2433              		.loc 1 941 0
 2434 0000 0420     		movs	r0, #4
 2435 0002 7047     		bx	lr
 2436              		.cfi_endproc
 2437              	.LFE49:
 2439              		.section	.text.lv_tlsf_block_size_min,"ax",%progbits
 2440              		.align	1
 2441              		.global	lv_tlsf_block_size_min
 2442              		.syntax unified
 2443              		.thumb
 2444              		.thumb_func
 2445              		.fpu fpv5-d16
 2447              	lv_tlsf_block_size_min:
 2448              	.LFB50:
 942:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 943:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_min(void)
 944:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2449              		.loc 1 944 0
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 0
 2452              		@ frame_needed = 0, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
 945:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_size_min;
 946:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2454              		.loc 1 946 0
 2455 0000 0C20     		movs	r0, #12
 2456 0002 7047     		bx	lr
 2457              		.cfi_endproc
 2458              	.LFE50:
 2460              		.section	.text.lv_tlsf_block_size_max,"ax",%progbits
 2461              		.align	1
 2462              		.global	lv_tlsf_block_size_max
 2463              		.syntax unified
 2464              		.thumb
 2465              		.thumb_func
 2466              		.fpu fpv5-d16
 2468              	lv_tlsf_block_size_max:
 2469              	.LFB51:
 947:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 948:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_block_size_max(void)
 949:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2470              		.loc 1 949 0
ARM GAS  /tmp/cc0wa2R1.s 			page 62


 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 0
 2473              		@ frame_needed = 0, uses_anonymous_args = 0
 2474              		@ link register save eliminated.
 950:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_size_max;
 951:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2475              		.loc 1 951 0
 2476 0000 4FF48030 		mov	r0, #65536
 2477 0004 7047     		bx	lr
 2478              		.cfi_endproc
 2479              	.LFE51:
 2481              		.section	.text.lv_tlsf_pool_overhead,"ax",%progbits
 2482              		.align	1
 2483              		.global	lv_tlsf_pool_overhead
 2484              		.syntax unified
 2485              		.thumb
 2486              		.thumb_func
 2487              		.fpu fpv5-d16
 2489              	lv_tlsf_pool_overhead:
 2490              	.LFB52:
 952:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 953:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
 954:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** Overhead of the TLSF structures in a given memory block passed to
 955:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** lv_tlsf_add_pool, equal to the overhead of a free block and the
 956:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** sentinel block.
 957:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
 958:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_pool_overhead(void)
 959:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2491              		.loc 1 959 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 0
 2494              		@ frame_needed = 0, uses_anonymous_args = 0
 2495              		@ link register save eliminated.
 960:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return 2 * block_header_overhead;
 961:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2496              		.loc 1 961 0
 2497 0000 0820     		movs	r0, #8
 2498 0002 7047     		bx	lr
 2499              		.cfi_endproc
 2500              	.LFE52:
 2502              		.section	.text.lv_tlsf_alloc_overhead,"ax",%progbits
 2503              		.align	1
 2504              		.global	lv_tlsf_alloc_overhead
 2505              		.syntax unified
 2506              		.thumb
 2507              		.thumb_func
 2508              		.fpu fpv5-d16
 2510              	lv_tlsf_alloc_overhead:
 2511              	.LFB53:
 962:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 963:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_alloc_overhead(void)
 964:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2512              		.loc 1 964 0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516              		@ link register save eliminated.
ARM GAS  /tmp/cc0wa2R1.s 			page 63


 965:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_header_overhead;
 966:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2517              		.loc 1 966 0
 2518 0000 0420     		movs	r0, #4
 2519 0002 7047     		bx	lr
 2520              		.cfi_endproc
 2521              	.LFE53:
 2523              		.section	.text.lv_tlsf_add_pool,"ax",%progbits
 2524              		.align	1
 2525              		.global	lv_tlsf_add_pool
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu fpv5-d16
 2531              	lv_tlsf_add_pool:
 2532              	.LFB54:
 967:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 968:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
 969:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2533              		.loc 1 969 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              	.LVL272:
 2538 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2539              	.LCFI45:
 2540              		.cfi_def_cfa_offset 24
 2541              		.cfi_offset 3, -24
 2542              		.cfi_offset 4, -20
 2543              		.cfi_offset 5, -16
 2544              		.cfi_offset 6, -12
 2545              		.cfi_offset 7, -8
 2546              		.cfi_offset 14, -4
 2547 0002 0746     		mov	r7, r0
 2548 0004 0C46     		mov	r4, r1
 2549 0006 1546     		mov	r5, r2
 970:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block;
 971:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * next;
 972:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 973:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t pool_overhead = lv_tlsf_pool_overhead();
 2550              		.loc 1 973 0
 2551 0008 FFF7FEFF 		bl	lv_tlsf_pool_overhead
 2552              	.LVL273:
 974:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 2553              		.loc 1 974 0
 2554 000c 0421     		movs	r1, #4
 2555 000e 281A     		subs	r0, r5, r0
 2556              	.LVL274:
 2557 0010 FFF7FEFF 		bl	align_down
 2558              	.LVL275:
 975:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 976:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 2559              		.loc 1 976 0
 2560 0014 14F0030F 		tst	r4, #3
 2561 0018 28D1     		bne	.L215
 2562 001a 0646     		mov	r6, r0
 977:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
ARM GAS  /tmp/cc0wa2R1.s 			page 64


 978:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
 979:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         return 0;
 980:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 981:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 982:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 2563              		.loc 1 982 0
 2564 001c A0F10C02 		sub	r2, r0, #12
 2565 0020 4FF6F473 		movw	r3, #65524
 2566 0024 9A42     		cmp	r2, r3
 2567 0026 23D8     		bhi	.L216
 983:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
 984:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between 0x%x and 0x%x00 bytes.\n",
 985:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 986:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)((pool_overhead + block_size_max) / 256));
 987:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #else
 988:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
 989:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_min),
 990:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)(pool_overhead + block_size_max));
 991:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
 992:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         return 0;
 993:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 994:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 995:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
 996:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** Create the main free block. Offset the start of the block slightly
 997:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** so that the prev_phys_block field falls outside of the pool -
 998:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** it will never be used.
 999:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
1000:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 2568              		.loc 1 1000 0
 2569 0028 6FF00301 		mvn	r1, #3
 2570 002c 2046     		mov	r0, r4
 2571              	.LVL276:
 2572 002e FFF7FEFF 		bl	offset_to_block
 2573              	.LVL277:
 2574 0032 0546     		mov	r5, r0
 2575              	.LVL278:
1001:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_size(block, pool_bytes);
 2576              		.loc 1 1001 0
 2577 0034 3146     		mov	r1, r6
 2578 0036 FFF7FEFF 		bl	block_set_size
 2579              	.LVL279:
1002:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_free(block);
 2580              		.loc 1 1002 0
 2581 003a 2846     		mov	r0, r5
 2582 003c FFF7FEFF 		bl	block_set_free
 2583              	.LVL280:
1003:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_prev_used(block);
 2584              		.loc 1 1003 0
 2585 0040 2846     		mov	r0, r5
 2586 0042 FFF7FEFF 		bl	block_set_prev_used
 2587              	.LVL281:
1004:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_insert(tlsf_cast(control_t *, tlsf), block);
 2588              		.loc 1 1004 0
 2589 0046 2946     		mov	r1, r5
 2590 0048 3846     		mov	r0, r7
 2591 004a FFF7FEFF 		bl	block_insert
 2592              	.LVL282:
ARM GAS  /tmp/cc0wa2R1.s 			page 65


1005:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1006:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Split the block to create a zero-size sentinel block. */
1007:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     next = block_link_next(block);
 2593              		.loc 1 1007 0
 2594 004e 2846     		mov	r0, r5
 2595 0050 FFF7FEFF 		bl	block_link_next
 2596              	.LVL283:
 2597 0054 0546     		mov	r5, r0
 2598              	.LVL284:
1008:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_size(next, 0);
 2599              		.loc 1 1008 0
 2600 0056 0021     		movs	r1, #0
 2601 0058 FFF7FEFF 		bl	block_set_size
 2602              	.LVL285:
1009:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_used(next);
 2603              		.loc 1 1009 0
 2604 005c 2846     		mov	r0, r5
 2605 005e FFF7FEFF 		bl	block_set_used
 2606              	.LVL286:
1010:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_set_prev_free(next);
 2607              		.loc 1 1010 0
 2608 0062 2846     		mov	r0, r5
 2609 0064 FFF7FEFF 		bl	block_set_prev_free
 2610              	.LVL287:
1011:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1012:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return mem;
 2611              		.loc 1 1012 0
 2612 0068 2046     		mov	r0, r4
 2613              	.LVL288:
 2614              	.L213:
1013:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2615              		.loc 1 1013 0
 2616 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2617              	.LVL289:
 2618              	.L215:
 979:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 2619              		.loc 1 979 0
 2620 006c 0020     		movs	r0, #0
 2621              	.LVL290:
 2622 006e FCE7     		b	.L213
 2623              	.LVL291:
 2624              	.L216:
 992:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 2625              		.loc 1 992 0
 2626 0070 0020     		movs	r0, #0
 2627              	.LVL292:
 2628 0072 FAE7     		b	.L213
 2629              		.cfi_endproc
 2630              	.LFE54:
 2632              		.section	.text.lv_tlsf_remove_pool,"ax",%progbits
 2633              		.align	1
 2634              		.global	lv_tlsf_remove_pool
 2635              		.syntax unified
 2636              		.thumb
 2637              		.thumb_func
 2638              		.fpu fpv5-d16
 2640              	lv_tlsf_remove_pool:
ARM GAS  /tmp/cc0wa2R1.s 			page 66


 2641              	.LFB55:
1014:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1015:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_remove_pool(lv_tlsf_t tlsf, lv_pool_t pool)
1016:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2642              		.loc 1 1016 0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 8
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 2646              	.LVL293:
 2647 0000 70B5     		push	{r4, r5, r6, lr}
 2648              	.LCFI46:
 2649              		.cfi_def_cfa_offset 16
 2650              		.cfi_offset 4, -16
 2651              		.cfi_offset 5, -12
 2652              		.cfi_offset 6, -8
 2653              		.cfi_offset 14, -4
 2654 0002 82B0     		sub	sp, sp, #8
 2655              	.LCFI47:
 2656              		.cfi_def_cfa_offset 24
 2657 0004 0546     		mov	r5, r0
 2658 0006 0846     		mov	r0, r1
 2659              	.LVL294:
1017:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
1018:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = offset_to_block(pool, -(int)block_header_overhead);
 2660              		.loc 1 1018 0
 2661 0008 6FF00301 		mvn	r1, #3
 2662              	.LVL295:
 2663 000c FFF7FEFF 		bl	offset_to_block
 2664              	.LVL296:
 2665 0010 0446     		mov	r4, r0
 2666              	.LVL297:
1019:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1020:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int fl = 0, sl = 0;
 2667              		.loc 1 1020 0
 2668 0012 0023     		movs	r3, #0
 2669 0014 0193     		str	r3, [sp, #4]
 2670 0016 0093     		str	r3, [sp]
1021:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1022:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_is_free(block) && "block should be free");
 2671              		.loc 1 1022 0
 2672 0018 FFF7FEFF 		bl	block_is_free
 2673              	.LVL298:
 2674 001c 00B9     		cbnz	r0, .L219
 2675              	.L220:
 2676 001e FEE7     		b	.L220
 2677              	.L219:
1023:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(!block_is_free(block_next(block)) && "next block should not be free");
 2678              		.loc 1 1023 0
 2679 0020 2046     		mov	r0, r4
 2680 0022 FFF7FEFF 		bl	block_next
 2681              	.LVL299:
 2682 0026 0646     		mov	r6, r0
 2683 0028 FFF7FEFF 		bl	block_is_free
 2684              	.LVL300:
 2685 002c 00B1     		cbz	r0, .L221
 2686              	.L222:
 2687 002e FEE7     		b	.L222
ARM GAS  /tmp/cc0wa2R1.s 			page 67


 2688              	.L221:
1024:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(block_size(block_next(block)) == 0 && "next block size should be zero");
 2689              		.loc 1 1024 0
 2690 0030 3046     		mov	r0, r6
 2691 0032 FFF7FEFF 		bl	block_size
 2692              	.LVL301:
 2693 0036 00B1     		cbz	r0, .L223
 2694              	.L224:
 2695 0038 FEE7     		b	.L224
 2696              	.L223:
1025:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1026:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     mapping_insert(block_size(block), &fl, &sl);
 2697              		.loc 1 1026 0
 2698 003a 2046     		mov	r0, r4
 2699 003c FFF7FEFF 		bl	block_size
 2700              	.LVL302:
 2701 0040 6A46     		mov	r2, sp
 2702 0042 01A9     		add	r1, sp, #4
 2703 0044 FFF7FEFF 		bl	mapping_insert
 2704              	.LVL303:
1027:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     remove_free_block(control, block, fl, sl);
 2705              		.loc 1 1027 0
 2706 0048 009B     		ldr	r3, [sp]
 2707 004a 019A     		ldr	r2, [sp, #4]
 2708 004c 2146     		mov	r1, r4
 2709 004e 2846     		mov	r0, r5
 2710 0050 FFF7FEFF 		bl	remove_free_block
 2711              	.LVL304:
1028:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2712              		.loc 1 1028 0
 2713 0054 02B0     		add	sp, sp, #8
 2714              	.LCFI48:
 2715              		.cfi_def_cfa_offset 16
 2716              		@ sp needed
 2717 0056 70BD     		pop	{r4, r5, r6, pc}
 2718              		.cfi_endproc
 2719              	.LFE55:
 2721              		.section	.text.lv_tlsf_create,"ax",%progbits
 2722              		.align	1
 2723              		.global	lv_tlsf_create
 2724              		.syntax unified
 2725              		.thumb
 2726              		.thumb_func
 2727              		.fpu fpv5-d16
 2729              	lv_tlsf_create:
 2730              	.LFB56:
1029:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1030:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
1031:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** TLSF main interface.
1032:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
1033:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1034:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1035:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** int test_ffs_fls()
1036:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
1037:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Verify ffs/fls work properly. */
1038:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     int rv = 0;
1039:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0) == -1) ? 0 : 0x1;
ARM GAS  /tmp/cc0wa2R1.s 			page 68


1040:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0) == -1) ? 0 : 0x2;
1041:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(1) == 0) ? 0 : 0x4;
1042:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(1) == 0) ? 0 : 0x8;
1043:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80000000) == 31) ? 0 : 0x10;
1044:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_ffs(0x80008000) == 15) ? 0 : 0x20;
1045:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x80000008) == 31) ? 0 : 0x40;
1046:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls(0x7FFFFFFF) == 30) ? 0 : 0x80;
1047:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1048:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if defined (TLSF_64BIT)
1049:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x80000000) == 31) ? 0 : 0x100;
1050:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0x100000000) == 32) ? 0 : 0x200;
1051:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     rv += (tlsf_fls_sizet(0xffffffffffffffff) == 63) ? 0 : 0x400;
1052:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
1053:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1054:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(rv) {
1055:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         printf("test_ffs_fls: %x ffs/fls tests failed.\n", rv);
1056:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1057:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return rv;
1058:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
1059:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
1060:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1061:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create(void * mem)
1062:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2731              		.loc 1 1062 0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 0
 2734              		@ frame_needed = 0, uses_anonymous_args = 0
 2735              	.LVL305:
1063:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
1064:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(test_ffs_fls()) {
1065:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         return 0;
1066:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1067:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #endif
1068:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1069:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 2736              		.loc 1 1069 0
 2737 0000 10F0030F 		tst	r0, #3
 2738 0004 05D1     		bne	.L228
1062:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** #if _DEBUG
 2739              		.loc 1 1062 0
 2740 0006 10B5     		push	{r4, lr}
 2741              	.LCFI49:
 2742              		.cfi_def_cfa_offset 8
 2743              		.cfi_offset 4, -8
 2744              		.cfi_offset 14, -4
 2745 0008 0446     		mov	r4, r0
1070:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
1071:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                (unsigned int)ALIGN_SIZE);
1072:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         return 0;
1073:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1074:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1075:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_constructor(tlsf_cast(control_t *, mem));
 2746              		.loc 1 1075 0
 2747 000a FFF7FEFF 		bl	control_constructor
 2748              	.LVL306:
1076:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1077:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_tlsf_t, mem);
ARM GAS  /tmp/cc0wa2R1.s 			page 69


 2749              		.loc 1 1077 0
 2750 000e 2046     		mov	r0, r4
1078:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2751              		.loc 1 1078 0
 2752 0010 10BD     		pop	{r4, pc}
 2753              	.LVL307:
 2754              	.L228:
 2755              	.LCFI50:
 2756              		.cfi_def_cfa_offset 0
 2757              		.cfi_restore 4
 2758              		.cfi_restore 14
1072:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 2759              		.loc 1 1072 0
 2760 0012 0020     		movs	r0, #0
 2761              	.LVL308:
 2762              		.loc 1 1078 0
 2763 0014 7047     		bx	lr
 2764              		.cfi_endproc
 2765              	.LFE56:
 2767              		.section	.text.lv_tlsf_create_with_pool,"ax",%progbits
 2768              		.align	1
 2769              		.global	lv_tlsf_create_with_pool
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu fpv5-d16
 2775              	lv_tlsf_create_with_pool:
 2776              	.LFB57:
1079:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1080:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
1081:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2777              		.loc 1 1081 0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 0
 2780              		@ frame_needed = 0, uses_anonymous_args = 0
 2781              	.LVL309:
 2782 0000 70B5     		push	{r4, r5, r6, lr}
 2783              	.LCFI51:
 2784              		.cfi_def_cfa_offset 16
 2785              		.cfi_offset 4, -16
 2786              		.cfi_offset 5, -12
 2787              		.cfi_offset 6, -8
 2788              		.cfi_offset 14, -4
 2789 0002 0546     		mov	r5, r0
 2790 0004 0E46     		mov	r6, r1
1082:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_t tlsf = lv_tlsf_create(mem);
 2791              		.loc 1 1082 0
 2792 0006 FFF7FEFF 		bl	lv_tlsf_create
 2793              	.LVL310:
 2794 000a 0446     		mov	r4, r0
 2795              	.LVL311:
1083:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 2796              		.loc 1 1083 0
 2797 000c FFF7FEFF 		bl	lv_tlsf_size
 2798              	.LVL312:
 2799 0010 321A     		subs	r2, r6, r0
 2800 0012 2918     		adds	r1, r5, r0
ARM GAS  /tmp/cc0wa2R1.s 			page 70


 2801 0014 2046     		mov	r0, r4
 2802 0016 FFF7FEFF 		bl	lv_tlsf_add_pool
 2803              	.LVL313:
1084:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf;
1085:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2804              		.loc 1 1085 0
 2805 001a 2046     		mov	r0, r4
 2806 001c 70BD     		pop	{r4, r5, r6, pc}
 2807              		.cfi_endproc
 2808              	.LFE57:
 2810              		.section	.text.lv_tlsf_destroy,"ax",%progbits
 2811              		.align	1
 2812              		.global	lv_tlsf_destroy
 2813              		.syntax unified
 2814              		.thumb
 2815              		.thumb_func
 2816              		.fpu fpv5-d16
 2818              	lv_tlsf_destroy:
 2819              	.LFB58:
1086:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1087:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void lv_tlsf_destroy(lv_tlsf_t tlsf)
1088:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2820              		.loc 1 1088 0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 0
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 2824              		@ link register save eliminated.
 2825              	.LVL314:
1089:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Nothing to do. */
1090:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     LV_UNUSED(tlsf);
1091:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2826              		.loc 1 1091 0
 2827 0000 7047     		bx	lr
 2828              		.cfi_endproc
 2829              	.LFE58:
 2831              		.section	.text.lv_tlsf_get_pool,"ax",%progbits
 2832              		.align	1
 2833              		.global	lv_tlsf_get_pool
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu fpv5-d16
 2839              	lv_tlsf_get_pool:
 2840              	.LFB59:
1092:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1093:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
1094:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2841              		.loc 1 1094 0
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 2845              	.LVL315:
 2846 0000 10B5     		push	{r4, lr}
 2847              	.LCFI52:
 2848              		.cfi_def_cfa_offset 8
 2849              		.cfi_offset 4, -8
 2850              		.cfi_offset 14, -4
ARM GAS  /tmp/cc0wa2R1.s 			page 71


 2851 0002 0446     		mov	r4, r0
1095:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 2852              		.loc 1 1095 0
 2853 0004 FFF7FEFF 		bl	lv_tlsf_size
 2854              	.LVL316:
1096:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2855              		.loc 1 1096 0
 2856 0008 2044     		add	r0, r0, r4
 2857 000a 10BD     		pop	{r4, pc}
 2858              		.cfi_endproc
 2859              	.LFE59:
 2861              		.section	.text.lv_tlsf_malloc,"ax",%progbits
 2862              		.align	1
 2863              		.global	lv_tlsf_malloc
 2864              		.syntax unified
 2865              		.thumb
 2866              		.thumb_func
 2867              		.fpu fpv5-d16
 2869              	lv_tlsf_malloc:
 2870              	.LFB60:
1097:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1098:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
1099:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2871              		.loc 1 1099 0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 0
 2874              		@ frame_needed = 0, uses_anonymous_args = 0
 2875              	.LVL317:
 2876 0000 38B5     		push	{r3, r4, r5, lr}
 2877              	.LCFI53:
 2878              		.cfi_def_cfa_offset 16
 2879              		.cfi_offset 3, -16
 2880              		.cfi_offset 4, -12
 2881              		.cfi_offset 5, -8
 2882              		.cfi_offset 14, -4
 2883 0002 0446     		mov	r4, r0
 2884 0004 0846     		mov	r0, r1
 2885              	.LVL318:
1100:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
1101:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 2886              		.loc 1 1101 0
 2887 0006 0421     		movs	r1, #4
 2888              	.LVL319:
 2889 0008 FFF7FEFF 		bl	adjust_request_size
 2890              	.LVL320:
 2891 000c 0546     		mov	r5, r0
 2892              	.LVL321:
1102:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, adjust);
 2893              		.loc 1 1102 0
 2894 000e 0146     		mov	r1, r0
 2895 0010 2046     		mov	r0, r4
 2896              	.LVL322:
 2897 0012 FFF7FEFF 		bl	block_locate_free
 2898              	.LVL323:
1103:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 2899              		.loc 1 1103 0
 2900 0016 2A46     		mov	r2, r5
ARM GAS  /tmp/cc0wa2R1.s 			page 72


 2901 0018 0146     		mov	r1, r0
 2902 001a 2046     		mov	r0, r4
 2903              	.LVL324:
 2904 001c FFF7FEFF 		bl	block_prepare_used
 2905              	.LVL325:
1104:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 2906              		.loc 1 1104 0
 2907 0020 38BD     		pop	{r3, r4, r5, pc}
 2908              		.cfi_endproc
 2909              	.LFE60:
 2911              		.section	.text.lv_tlsf_memalign,"ax",%progbits
 2912              		.align	1
 2913              		.global	lv_tlsf_memalign
 2914              		.syntax unified
 2915              		.thumb
 2916              		.thumb_func
 2917              		.fpu fpv5-d16
 2919              	lv_tlsf_memalign:
 2920              	.LFB61:
1105:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1106:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_memalign(lv_tlsf_t tlsf, size_t align, size_t size)
1107:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 2921              		.loc 1 1107 0
 2922              		.cfi_startproc
 2923              		@ args = 0, pretend = 0, frame = 0
 2924              		@ frame_needed = 0, uses_anonymous_args = 0
 2925              	.LVL326:
 2926 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2927              	.LCFI54:
 2928              		.cfi_def_cfa_offset 24
 2929              		.cfi_offset 4, -24
 2930              		.cfi_offset 5, -20
 2931              		.cfi_offset 6, -16
 2932              		.cfi_offset 7, -12
 2933              		.cfi_offset 8, -8
 2934              		.cfi_offset 14, -4
 2935 0004 0746     		mov	r7, r0
 2936 0006 0C46     		mov	r4, r1
 2937              	.LVL327:
1108:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
1109:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 2938              		.loc 1 1109 0
 2939 0008 0421     		movs	r1, #4
 2940              	.LVL328:
 2941 000a 1046     		mov	r0, r2
 2942              	.LVL329:
 2943 000c FFF7FEFF 		bl	adjust_request_size
 2944              	.LVL330:
 2945 0010 0646     		mov	r6, r0
 2946              	.LVL331:
1110:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1111:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
1112:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** We must allocate an additional minimum block size bytes so that if
1113:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** our free block will leave an alignment gap which is smaller, we can
1114:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** trim a leading free block and release it back to the pool. We must
1115:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** do this because the previous physical block is in use, therefore
1116:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** the prev_phys_block field is not valid, and we can't simply adjust
ARM GAS  /tmp/cc0wa2R1.s 			page 73


1117:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** the size of that block.
1118:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
1119:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t gap_minimum = sizeof(block_header_t);
1120:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t size_with_gap = adjust_request_size(adjust + align + gap_minimum, align);
 2947              		.loc 1 1120 0
 2948 0012 2044     		add	r0, r0, r4
 2949              	.LVL332:
 2950 0014 2146     		mov	r1, r4
 2951 0016 1030     		adds	r0, r0, #16
 2952 0018 FFF7FEFF 		bl	adjust_request_size
 2953              	.LVL333:
 2954 001c 0146     		mov	r1, r0
 2955              	.LVL334:
1121:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1122:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /*
1123:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** If alignment is less than or equals base alignment, we're done.
1124:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     ** If we requested 0 bytes, return null, as lv_tlsf_malloc(0) does.
1125:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     */
1126:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     const size_t aligned_size = (adjust && align > ALIGN_SIZE) ? size_with_gap : adjust;
 2956              		.loc 1 1126 0
 2957 001e 042C     		cmp	r4, #4
 2958 0020 94BF     		ite	ls
 2959 0022 0023     		movls	r3, #0
 2960 0024 0123     		movhi	r3, #1
 2961 0026 002E     		cmp	r6, #0
 2962 0028 08BF     		it	eq
 2963 002a 0023     		moveq	r3, #0
 2964 002c 03B9     		cbnz	r3, .L241
 2965 002e 3146     		mov	r1, r6
 2966              	.L241:
 2967              	.LVL335:
1127:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1128:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     block_header_t * block = block_locate_free(control, aligned_size);
 2968              		.loc 1 1128 0 discriminator 4
 2969 0030 3846     		mov	r0, r7
 2970              	.LVL336:
 2971 0032 FFF7FEFF 		bl	block_locate_free
 2972              	.LVL337:
1129:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1130:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* This can't be a static assert. */
1131:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     tlsf_assert(sizeof(block_header_t) == block_size_min + block_header_overhead);
1132:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1133:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(block) {
 2973              		.loc 1 1133 0 discriminator 4
 2974 0036 0546     		mov	r5, r0
 2975 0038 F8B1     		cbz	r0, .L242
 2976              	.LBB12:
1134:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         void * ptr = block_to_ptr(block);
 2977              		.loc 1 1134 0
 2978 003a FFF7FEFF 		bl	block_to_ptr
 2979              	.LVL338:
 2980 003e 8046     		mov	r8, r0
 2981              	.LVL339:
1135:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         void * aligned = align_ptr(ptr, align);
 2982              		.loc 1 1135 0
 2983 0040 2146     		mov	r1, r4
 2984 0042 FFF7FEFF 		bl	align_ptr
ARM GAS  /tmp/cc0wa2R1.s 			page 74


 2985              	.LVL340:
1136:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         size_t gap = tlsf_cast(size_t,
 2986              		.loc 1 1136 0
 2987 0046 A0EB0802 		sub	r2, r0, r8
 2988              	.LVL341:
1137:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                                tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1138:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1139:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /* If gap size is too small, offset to next aligned boundary. */
1140:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(gap && gap < gap_minimum) {
 2989              		.loc 1 1140 0
 2990 004a 531E     		subs	r3, r2, #1
 2991 004c 0E2B     		cmp	r3, #14
 2992 004e 03D9     		bls	.L248
 2993              	.L243:
1141:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
1142:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const size_t offset = tlsf_max(gap_remain, align);
1143:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const void * next_aligned = tlsf_cast(void *,
1144:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                                                   tlsf_cast(tlsfptr_t, aligned) + offset);
1145:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1146:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             aligned = align_ptr(next_aligned, align);
1147:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
1148:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
1149:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
1150:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1151:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(gap) {
 2994              		.loc 1 1151 0
 2995 0050 9AB1     		cbz	r2, .L242
1152:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             tlsf_assert(gap >= gap_minimum && "gap size too small");
 2996              		.loc 1 1152 0
 2997 0052 0F2A     		cmp	r2, #15
 2998 0054 0CD8     		bhi	.L244
 2999              	.L245:
 3000 0056 FEE7     		b	.L245
 3001              	.L248:
 3002              	.LBB13:
1141:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             const size_t gap_remain = gap_minimum - gap;
 3003              		.loc 1 1141 0
 3004 0058 C2F11002 		rsb	r2, r2, #16
 3005              	.LVL342:
1146:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             gap = tlsf_cast(size_t,
 3006              		.loc 1 1146 0
 3007 005c 2146     		mov	r1, r4
 3008 005e 9442     		cmp	r4, r2
 3009 0060 2CBF     		ite	cs
 3010 0062 0019     		addcs	r0, r0, r4
 3011 0064 8018     		addcc	r0, r0, r2
 3012              	.LVL343:
 3013 0066 FFF7FEFF 		bl	align_ptr
 3014              	.LVL344:
1147:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                             tlsf_cast(tlsfptr_t, aligned) - tlsf_cast(tlsfptr_t, ptr));
 3015              		.loc 1 1147 0
 3016 006a A0EB0802 		sub	r2, r0, r8
 3017              	.LVL345:
 3018 006e EFE7     		b	.L243
 3019              	.L244:
 3020              	.LBE13:
1153:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block = block_trim_free_leading(control, block, gap);
ARM GAS  /tmp/cc0wa2R1.s 			page 75


 3021              		.loc 1 1153 0
 3022 0070 2946     		mov	r1, r5
 3023 0072 3846     		mov	r0, r7
 3024              	.LVL346:
 3025 0074 FFF7FEFF 		bl	block_trim_free_leading
 3026              	.LVL347:
 3027 0078 0546     		mov	r5, r0
 3028              	.LVL348:
 3029              	.L242:
 3030              	.LBE12:
1154:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
1155:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1156:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1157:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return block_prepare_used(control, block, adjust);
 3031              		.loc 1 1157 0
 3032 007a 3246     		mov	r2, r6
 3033 007c 2946     		mov	r1, r5
 3034 007e 3846     		mov	r0, r7
 3035 0080 FFF7FEFF 		bl	block_prepare_used
 3036              	.LVL349:
1158:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 3037              		.loc 1 1158 0
 3038 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3039              		.cfi_endproc
 3040              	.LFE61:
 3042              		.section	.text.lv_tlsf_free,"ax",%progbits
 3043              		.align	1
 3044              		.global	lv_tlsf_free
 3045              		.syntax unified
 3046              		.thumb
 3047              		.thumb_func
 3048              		.fpu fpv5-d16
 3050              	lv_tlsf_free:
 3051              	.LFB62:
1159:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1160:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
1161:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 3052              		.loc 1 1161 0
 3053              		.cfi_startproc
 3054              		@ args = 0, pretend = 0, frame = 0
 3055              		@ frame_needed = 0, uses_anonymous_args = 0
 3056              	.LVL350:
 3057 0000 70B5     		push	{r4, r5, r6, lr}
 3058              	.LCFI55:
 3059              		.cfi_def_cfa_offset 16
 3060              		.cfi_offset 4, -16
 3061              		.cfi_offset 5, -12
 3062              		.cfi_offset 6, -8
 3063              		.cfi_offset 14, -4
 3064              	.LVL351:
1162:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     size_t size = 0;
1163:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
1164:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(ptr) {
 3065              		.loc 1 1164 0
 3066 0002 C9B1     		cbz	r1, .L253
 3067 0004 0446     		mov	r4, r0
 3068 0006 0846     		mov	r0, r1
ARM GAS  /tmp/cc0wa2R1.s 			page 76


 3069              	.LVL352:
 3070              	.LBB14:
1165:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         control_t * control = tlsf_cast(control_t *, tlsf);
1166:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3071              		.loc 1 1166 0
 3072 0008 FFF7FEFF 		bl	block_from_ptr
 3073              	.LVL353:
 3074 000c 0546     		mov	r5, r0
 3075              	.LVL354:
1167:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3076              		.loc 1 1167 0
 3077 000e FFF7FEFF 		bl	block_is_free
 3078              	.LVL355:
 3079 0012 00B1     		cbz	r0, .L251
 3080              	.L252:
 3081 0014 FEE7     		b	.L252
 3082              	.L251:
1168:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         size = block->size;
 3083              		.loc 1 1168 0
 3084 0016 6E68     		ldr	r6, [r5, #4]
 3085              	.LVL356:
1169:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_mark_as_free(block);
 3086              		.loc 1 1169 0
 3087 0018 2846     		mov	r0, r5
 3088 001a FFF7FEFF 		bl	block_mark_as_free
 3089              	.LVL357:
1170:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_merge_prev(control, block);
 3090              		.loc 1 1170 0
 3091 001e 2946     		mov	r1, r5
 3092 0020 2046     		mov	r0, r4
 3093 0022 FFF7FEFF 		bl	block_merge_prev
 3094              	.LVL358:
1171:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block = block_merge_next(control, block);
 3095              		.loc 1 1171 0
 3096 0026 0146     		mov	r1, r0
 3097 0028 2046     		mov	r0, r4
 3098              	.LVL359:
 3099 002a FFF7FEFF 		bl	block_merge_next
 3100              	.LVL360:
1172:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_insert(control, block);
 3101              		.loc 1 1172 0
 3102 002e 0146     		mov	r1, r0
 3103 0030 2046     		mov	r0, r4
 3104              	.LVL361:
 3105 0032 FFF7FEFF 		bl	block_insert
 3106              	.LVL362:
 3107 0036 00E0     		b	.L249
 3108              	.LVL363:
 3109              	.L253:
 3110              	.LBE14:
1162:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Don't attempt to free a NULL pointer. */
 3111              		.loc 1 1162 0
 3112 0038 0026     		movs	r6, #0
 3113              	.LVL364:
 3114              	.L249:
1173:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1174:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
ARM GAS  /tmp/cc0wa2R1.s 			page 77


1175:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return size;
1176:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 3115              		.loc 1 1176 0
 3116 003a 3046     		mov	r0, r6
 3117 003c 70BD     		pop	{r4, r5, r6, pc}
 3118              		.cfi_endproc
 3119              	.LFE62:
 3121              		.section	.text.lv_tlsf_realloc,"ax",%progbits
 3122              		.align	1
 3123              		.global	lv_tlsf_realloc
 3124              		.syntax unified
 3125              		.thumb
 3126              		.thumb_func
 3127              		.fpu fpv5-d16
 3129              	lv_tlsf_realloc:
 3130              	.LFB63:
1177:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1178:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** /*
1179:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** The TLSF block information provides us with enough information to
1180:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** provide a reasonably intelligent implementation of realloc, growing or
1181:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** shrinking the currently allocated block as required.
1182:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **
1183:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** This routine handles the somewhat esoteric edge cases of realloc:
1184:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - a non-zero size with a null pointer will behave like malloc
1185:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - a zero size with a non-null pointer will behave like free
1186:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - a request that cannot be satisfied will leave the original buffer
1187:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **   untouched
1188:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** ** - an extended buffer size will leave the newly-allocated area with
1189:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** **   contents undefined
1190:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** */
1191:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
1192:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** {
 3131              		.loc 1 1192 0
 3132              		.cfi_startproc
 3133              		@ args = 0, pretend = 0, frame = 0
 3134              		@ frame_needed = 0, uses_anonymous_args = 0
 3135              	.LVL365:
 3136 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3137              	.LCFI56:
 3138              		.cfi_def_cfa_offset 40
 3139              		.cfi_offset 3, -40
 3140              		.cfi_offset 4, -36
 3141              		.cfi_offset 5, -32
 3142              		.cfi_offset 6, -28
 3143              		.cfi_offset 7, -24
 3144              		.cfi_offset 8, -20
 3145              		.cfi_offset 9, -16
 3146              		.cfi_offset 10, -12
 3147              		.cfi_offset 11, -8
 3148              		.cfi_offset 14, -4
 3149 0004 0646     		mov	r6, r0
 3150              	.LVL366:
1193:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     control_t * control = tlsf_cast(control_t *, tlsf);
1194:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     void * p = 0;
1195:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1196:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Zero-size requests are treated as free. */
1197:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     if(ptr && size == 0) {
ARM GAS  /tmp/cc0wa2R1.s 			page 78


 3151              		.loc 1 1197 0
 3152 0006 0D46     		mov	r5, r1
 3153 0008 9046     		mov	r8, r2
 3154 000a B2FA82F2 		clz	r2, r2
 3155              	.LVL367:
 3156 000e 5209     		lsrs	r2, r2, #5
 3157 0010 0029     		cmp	r1, #0
 3158 0012 08BF     		it	eq
 3159 0014 0022     		moveq	r2, #0
 3160 0016 1ABB     		cbnz	r2, .L266
1198:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         lv_tlsf_free(tlsf, ptr);
1199:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1200:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     /* Requests with NULL pointers are treated as malloc. */
1201:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     else if(!ptr) {
 3161              		.loc 1 1201 0
 3162 0018 31B3     		cbz	r1, .L267
 3163              	.LBB15:
1202:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         p = lv_tlsf_malloc(tlsf, size);
1203:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1204:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     else {
1205:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * block = block_from_ptr(ptr);
 3164              		.loc 1 1205 0
 3165 001a 0846     		mov	r0, r1
 3166              	.LVL368:
 3167 001c FFF7FEFF 		bl	block_from_ptr
 3168              	.LVL369:
 3169 0020 0446     		mov	r4, r0
 3170              	.LVL370:
1206:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         block_header_t * next = block_next(block);
 3171              		.loc 1 1206 0
 3172 0022 FFF7FEFF 		bl	block_next
 3173              	.LVL371:
 3174 0026 8346     		mov	fp, r0
 3175              	.LVL372:
1207:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1208:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t cursize = block_size(block);
 3176              		.loc 1 1208 0
 3177 0028 2046     		mov	r0, r4
 3178              	.LVL373:
 3179 002a FFF7FEFF 		bl	block_size
 3180              	.LVL374:
 3181 002e 0746     		mov	r7, r0
 3182              	.LVL375:
1209:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t combined = cursize + block_size(next) + block_header_overhead;
 3183              		.loc 1 1209 0
 3184 0030 5846     		mov	r0, fp
 3185              	.LVL376:
 3186 0032 FFF7FEFF 		bl	block_size
 3187              	.LVL377:
 3188 0036 3844     		add	r0, r0, r7
 3189 0038 00F1040A 		add	r10, r0, #4
 3190              	.LVL378:
1210:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 3191              		.loc 1 1210 0
 3192 003c 0421     		movs	r1, #4
 3193 003e 4046     		mov	r0, r8
 3194 0040 FFF7FEFF 		bl	adjust_request_size
ARM GAS  /tmp/cc0wa2R1.s 			page 79


 3195              	.LVL379:
1211:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(size > cursize && adjust == 0) {
 3196              		.loc 1 1211 0
 3197 0044 8146     		mov	r9, r0
 3198 0046 B845     		cmp	r8, r7
 3199 0048 94BF     		ite	ls
 3200 004a 0023     		movls	r3, #0
 3201 004c 0123     		movhi	r3, #1
 3202 004e 0028     		cmp	r0, #0
 3203 0050 18BF     		it	ne
 3204 0052 0023     		movne	r3, #0
 3205 0054 DBBB     		cbnz	r3, .L264
1212:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* The request is probably too large, fail */
1213:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             return NULL;
1214:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
1215:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1216:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         tlsf_assert(!block_is_free(block) && "block already marked as free");
 3206              		.loc 1 1216 0
 3207 0056 2046     		mov	r0, r4
 3208              	.LVL380:
 3209 0058 FFF7FEFF 		bl	block_is_free
 3210              	.LVL381:
 3211 005c 58B1     		cbz	r0, .L259
 3212              	.L260:
 3213 005e FEE7     		b	.L260
 3214              	.LVL382:
 3215              	.L266:
 3216              	.LBE15:
1198:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 3217              		.loc 1 1198 0
 3218 0060 FFF7FEFF 		bl	lv_tlsf_free
 3219              	.LVL383:
1194:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
 3220              		.loc 1 1194 0
 3221 0064 0024     		movs	r4, #0
 3222 0066 03E0     		b	.L255
 3223              	.LVL384:
 3224              	.L267:
1202:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
 3225              		.loc 1 1202 0
 3226 0068 4146     		mov	r1, r8
 3227              	.LVL385:
 3228 006a FFF7FEFF 		bl	lv_tlsf_malloc
 3229              	.LVL386:
 3230 006e 0446     		mov	r4, r0
 3231              	.LVL387:
 3232              	.L255:
1217:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1218:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         /*
1219:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** If the next block is used, or when combined with the current
1220:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         ** block, does not offer enough space, we must reallocate and copy.
1221:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         */
1222:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
1223:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
1224:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(p) {
1225:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
1226:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 lv_memcpy(p, ptr, minsize);
ARM GAS  /tmp/cc0wa2R1.s 			page 80


1227:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
1228:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
1229:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
1230:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         else {
1231:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* Do we need to expand to the next block? */
1232:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(adjust > cursize) {
1233:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
1234:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
1235:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
1236:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1237:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             /* Trim the resulting block and return the original pointer. */
1238:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             block_trim_used(control, block, adjust);
1239:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = ptr;
1240:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
1241:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     }
1242:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** 
1243:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****     return p;
1244:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c **** }
 3233              		.loc 1 1244 0
 3234 0070 2046     		mov	r0, r4
 3235 0072 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3236              	.LVL388:
 3237              	.L259:
 3238              	.LBB17:
1222:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3239              		.loc 1 1222 0
 3240 0076 4F45     		cmp	r7, r9
 3241 0078 18D2     		bcs	.L261
1222:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3242              		.loc 1 1222 0 is_stmt 0 discriminator 1
 3243 007a 5846     		mov	r0, fp
 3244 007c FFF7FEFF 		bl	block_is_free
 3245              	.LVL389:
 3246 0080 08B1     		cbz	r0, .L262
1222:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = lv_tlsf_malloc(tlsf, size);
 3247              		.loc 1 1222 0 discriminator 2
 3248 0082 CA45     		cmp	r10, r9
 3249 0084 12D2     		bcs	.L261
 3250              	.L262:
1223:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             if(p) {
 3251              		.loc 1 1223 0 is_stmt 1
 3252 0086 4146     		mov	r1, r8
 3253 0088 3046     		mov	r0, r6
 3254 008a FFF7FEFF 		bl	lv_tlsf_malloc
 3255              	.LVL390:
1224:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 const size_t minsize = tlsf_min(cursize, size);
 3256              		.loc 1 1224 0
 3257 008e 0446     		mov	r4, r0
 3258              	.LVL391:
 3259 0090 0028     		cmp	r0, #0
 3260 0092 EDD0     		beq	.L255
 3261              	.LVL392:
 3262              	.LBB16:
1226:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 lv_tlsf_free(tlsf, ptr);
 3263              		.loc 1 1226 0
 3264 0094 4246     		mov	r2, r8
 3265 0096 B845     		cmp	r8, r7
ARM GAS  /tmp/cc0wa2R1.s 			page 81


 3266 0098 28BF     		it	cs
 3267 009a 3A46     		movcs	r2, r7
 3268 009c 2946     		mov	r1, r5
 3269 009e FFF7FEFF 		bl	lv_memcpy
 3270              	.LVL393:
1227:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 3271              		.loc 1 1227 0
 3272 00a2 2946     		mov	r1, r5
 3273 00a4 3046     		mov	r0, r6
 3274 00a6 FFF7FEFF 		bl	lv_tlsf_free
 3275              	.LVL394:
 3276 00aa E1E7     		b	.L255
 3277              	.LVL395:
 3278              	.L261:
 3279              	.LBE16:
1232:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block_merge_next(control, block);
 3280              		.loc 1 1232 0
 3281 00ac 4F45     		cmp	r7, r9
 3282 00ae 06D3     		bcc	.L268
 3283              	.L263:
1238:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             p = ptr;
 3284              		.loc 1 1238 0
 3285 00b0 4A46     		mov	r2, r9
 3286 00b2 2146     		mov	r1, r4
 3287 00b4 3046     		mov	r0, r6
 3288 00b6 FFF7FEFF 		bl	block_trim_used
 3289              	.LVL396:
1239:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 3290              		.loc 1 1239 0
 3291 00ba 2C46     		mov	r4, r5
 3292              	.LVL397:
 3293 00bc D8E7     		b	.L255
 3294              	.LVL398:
 3295              	.L268:
1233:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****                 block_mark_as_used(block);
 3296              		.loc 1 1233 0
 3297 00be 2146     		mov	r1, r4
 3298 00c0 3046     		mov	r0, r6
 3299 00c2 FFF7FEFF 		bl	block_merge_next
 3300              	.LVL399:
1234:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****             }
 3301              		.loc 1 1234 0
 3302 00c6 2046     		mov	r0, r4
 3303 00c8 FFF7FEFF 		bl	block_mark_as_used
 3304              	.LVL400:
 3305 00cc F0E7     		b	.L263
 3306              	.LVL401:
 3307              	.L264:
1213:Drivers/lvgl/lvgl/src/misc/lv_tlsf.c ****         }
 3308              		.loc 1 1213 0
 3309 00ce 0024     		movs	r4, #0
 3310              	.LVL402:
 3311 00d0 CEE7     		b	.L255
 3312              	.LBE17:
 3313              		.cfi_endproc
 3314              	.LFE63:
 3316              		.text
ARM GAS  /tmp/cc0wa2R1.s 			page 82


 3317              	.Letext0:
 3318              		.file 2 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 3319              		.file 3 "Drivers/lvgl/lvgl/src/misc/lv_tlsf.h"
 3320              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 3321              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 3322              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 3323              		.file 7 "Drivers/lvgl/lvgl/src/misc/lv_mem.h"
ARM GAS  /tmp/cc0wa2R1.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lv_tlsf.c
     /tmp/cc0wa2R1.s:17     .text.block_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:23     .text.block_size:0000000000000000 block_size
     /tmp/cc0wa2R1.s:42     .text.block_set_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:48     .text.block_set_size:0000000000000000 block_set_size
     /tmp/cc0wa2R1.s:71     .text.block_is_last:0000000000000000 $t
     /tmp/cc0wa2R1.s:77     .text.block_is_last:0000000000000000 block_is_last
     /tmp/cc0wa2R1.s:100    .text.block_is_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:106    .text.block_is_free:0000000000000000 block_is_free
     /tmp/cc0wa2R1.s:124    .text.block_set_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:130    .text.block_set_free:0000000000000000 block_set_free
     /tmp/cc0wa2R1.s:148    .text.block_set_used:0000000000000000 $t
     /tmp/cc0wa2R1.s:154    .text.block_set_used:0000000000000000 block_set_used
     /tmp/cc0wa2R1.s:172    .text.block_is_prev_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:178    .text.block_is_prev_free:0000000000000000 block_is_prev_free
     /tmp/cc0wa2R1.s:196    .text.block_set_prev_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:202    .text.block_set_prev_free:0000000000000000 block_set_prev_free
     /tmp/cc0wa2R1.s:220    .text.block_set_prev_used:0000000000000000 $t
     /tmp/cc0wa2R1.s:226    .text.block_set_prev_used:0000000000000000 block_set_prev_used
     /tmp/cc0wa2R1.s:244    .text.block_from_ptr:0000000000000000 $t
     /tmp/cc0wa2R1.s:250    .text.block_from_ptr:0000000000000000 block_from_ptr
     /tmp/cc0wa2R1.s:266    .text.block_to_ptr:0000000000000000 $t
     /tmp/cc0wa2R1.s:272    .text.block_to_ptr:0000000000000000 block_to_ptr
     /tmp/cc0wa2R1.s:288    .text.offset_to_block:0000000000000000 $t
     /tmp/cc0wa2R1.s:294    .text.offset_to_block:0000000000000000 offset_to_block
     /tmp/cc0wa2R1.s:310    .text.block_prev:0000000000000000 $t
     /tmp/cc0wa2R1.s:316    .text.block_prev:0000000000000000 block_prev
     /tmp/cc0wa2R1.s:343    .text.block_next:0000000000000000 $t
     /tmp/cc0wa2R1.s:349    .text.block_next:0000000000000000 block_next
     /tmp/cc0wa2R1.s:395    .text.block_link_next:0000000000000000 $t
     /tmp/cc0wa2R1.s:401    .text.block_link_next:0000000000000000 block_link_next
     /tmp/cc0wa2R1.s:425    .text.block_mark_as_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:431    .text.block_mark_as_free:0000000000000000 block_mark_as_free
     /tmp/cc0wa2R1.s:460    .text.block_mark_as_used:0000000000000000 $t
     /tmp/cc0wa2R1.s:466    .text.block_mark_as_used:0000000000000000 block_mark_as_used
     /tmp/cc0wa2R1.s:495    .text.align_up:0000000000000000 $t
     /tmp/cc0wa2R1.s:501    .text.align_up:0000000000000000 align_up
     /tmp/cc0wa2R1.s:529    .text.align_down:0000000000000000 $t
     /tmp/cc0wa2R1.s:535    .text.align_down:0000000000000000 align_down
     /tmp/cc0wa2R1.s:561    .text.align_ptr:0000000000000000 $t
     /tmp/cc0wa2R1.s:567    .text.align_ptr:0000000000000000 align_ptr
     /tmp/cc0wa2R1.s:595    .text.adjust_request_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:601    .text.adjust_request_size:0000000000000000 adjust_request_size
     /tmp/cc0wa2R1.s:647    .text.remove_free_block:0000000000000000 $t
     /tmp/cc0wa2R1.s:653    .text.remove_free_block:0000000000000000 remove_free_block
     /tmp/cc0wa2R1.s:736    .text.insert_free_block:0000000000000000 $t
     /tmp/cc0wa2R1.s:742    .text.insert_free_block:0000000000000000 insert_free_block
     /tmp/cc0wa2R1.s:823    .text.block_can_split:0000000000000000 $t
     /tmp/cc0wa2R1.s:829    .text.block_can_split:0000000000000000 block_can_split
     /tmp/cc0wa2R1.s:857    .text.block_split:0000000000000000 $t
     /tmp/cc0wa2R1.s:863    .text.block_split:0000000000000000 block_split
     /tmp/cc0wa2R1.s:953    .text.block_absorb:0000000000000000 $t
     /tmp/cc0wa2R1.s:959    .text.block_absorb:0000000000000000 block_absorb
     /tmp/cc0wa2R1.s:1001   .text.control_constructor:0000000000000000 $t
     /tmp/cc0wa2R1.s:1007   .text.control_constructor:0000000000000000 control_constructor
     /tmp/cc0wa2R1.s:1071   .text.integrity_walker:0000000000000000 $t
ARM GAS  /tmp/cc0wa2R1.s 			page 84


     /tmp/cc0wa2R1.s:1077   .text.integrity_walker:0000000000000000 integrity_walker
     /tmp/cc0wa2R1.s:1140   .text.default_walker:0000000000000000 $t
     /tmp/cc0wa2R1.s:1146   .text.default_walker:0000000000000000 default_walker
     /tmp/cc0wa2R1.s:1160   .text.tlsf_fls:0000000000000000 $t
     /tmp/cc0wa2R1.s:1166   .text.tlsf_fls:0000000000000000 tlsf_fls
     /tmp/cc0wa2R1.s:1196   .text.mapping_insert:0000000000000000 $t
     /tmp/cc0wa2R1.s:1202   .text.mapping_insert:0000000000000000 mapping_insert
     /tmp/cc0wa2R1.s:1263   .text.block_insert:0000000000000000 $t
     /tmp/cc0wa2R1.s:1269   .text.block_insert:0000000000000000 block_insert
     /tmp/cc0wa2R1.s:1313   .text.block_trim_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:1319   .text.block_trim_free:0000000000000000 block_trim_free
     /tmp/cc0wa2R1.s:1381   .text.block_prepare_used:0000000000000000 $t
     /tmp/cc0wa2R1.s:1387   .text.block_prepare_used:0000000000000000 block_prepare_used
     /tmp/cc0wa2R1.s:1436   .text.block_trim_free_leading:0000000000000000 $t
     /tmp/cc0wa2R1.s:1442   .text.block_trim_free_leading:0000000000000000 block_trim_free_leading
     /tmp/cc0wa2R1.s:1498   .text.block_remove:0000000000000000 $t
     /tmp/cc0wa2R1.s:1504   .text.block_remove:0000000000000000 block_remove
     /tmp/cc0wa2R1.s:1548   .text.block_merge_prev:0000000000000000 $t
     /tmp/cc0wa2R1.s:1554   .text.block_merge_prev:0000000000000000 block_merge_prev
     /tmp/cc0wa2R1.s:1615   .text.block_merge_next:0000000000000000 $t
     /tmp/cc0wa2R1.s:1621   .text.block_merge_next:0000000000000000 block_merge_next
     /tmp/cc0wa2R1.s:1680   .text.block_trim_used:0000000000000000 $t
     /tmp/cc0wa2R1.s:1686   .text.block_trim_used:0000000000000000 block_trim_used
     /tmp/cc0wa2R1.s:1753   .text.mapping_search:0000000000000000 $t
     /tmp/cc0wa2R1.s:1759   .text.mapping_search:0000000000000000 mapping_search
     /tmp/cc0wa2R1.s:1805   .text.tlsf_ffs:0000000000000000 $t
     /tmp/cc0wa2R1.s:1811   .text.tlsf_ffs:0000000000000000 tlsf_ffs
     /tmp/cc0wa2R1.s:1833   .text.search_suitable_block:0000000000000000 $t
     /tmp/cc0wa2R1.s:1839   .text.search_suitable_block:0000000000000000 search_suitable_block
     /tmp/cc0wa2R1.s:1935   .text.block_locate_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:1941   .text.block_locate_free:0000000000000000 block_locate_free
     /tmp/cc0wa2R1.s:2030   .text.lv_tlsf_check:0000000000000000 $t
     /tmp/cc0wa2R1.s:2037   .text.lv_tlsf_check:0000000000000000 lv_tlsf_check
     /tmp/cc0wa2R1.s:2213   .text.lv_tlsf_walk_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2220   .text.lv_tlsf_walk_pool:0000000000000000 lv_tlsf_walk_pool
     /tmp/cc0wa2R1.s:2301   .text.lv_tlsf_walk_pool:0000000000000058 $d
     /tmp/cc0wa2R1.s:2306   .text.lv_tlsf_block_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:2313   .text.lv_tlsf_block_size:0000000000000000 lv_tlsf_block_size
     /tmp/cc0wa2R1.s:2353   .text.lv_tlsf_check_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2360   .text.lv_tlsf_check_pool:0000000000000000 lv_tlsf_check_pool
     /tmp/cc0wa2R1.s:2393   .text.lv_tlsf_check_pool:000000000000001c $d
     /tmp/cc0wa2R1.s:2398   .text.lv_tlsf_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:2405   .text.lv_tlsf_size:0000000000000000 lv_tlsf_size
     /tmp/cc0wa2R1.s:2419   .text.lv_tlsf_align_size:0000000000000000 $t
     /tmp/cc0wa2R1.s:2426   .text.lv_tlsf_align_size:0000000000000000 lv_tlsf_align_size
     /tmp/cc0wa2R1.s:2440   .text.lv_tlsf_block_size_min:0000000000000000 $t
     /tmp/cc0wa2R1.s:2447   .text.lv_tlsf_block_size_min:0000000000000000 lv_tlsf_block_size_min
     /tmp/cc0wa2R1.s:2461   .text.lv_tlsf_block_size_max:0000000000000000 $t
     /tmp/cc0wa2R1.s:2468   .text.lv_tlsf_block_size_max:0000000000000000 lv_tlsf_block_size_max
     /tmp/cc0wa2R1.s:2482   .text.lv_tlsf_pool_overhead:0000000000000000 $t
     /tmp/cc0wa2R1.s:2489   .text.lv_tlsf_pool_overhead:0000000000000000 lv_tlsf_pool_overhead
     /tmp/cc0wa2R1.s:2503   .text.lv_tlsf_alloc_overhead:0000000000000000 $t
     /tmp/cc0wa2R1.s:2510   .text.lv_tlsf_alloc_overhead:0000000000000000 lv_tlsf_alloc_overhead
     /tmp/cc0wa2R1.s:2524   .text.lv_tlsf_add_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2531   .text.lv_tlsf_add_pool:0000000000000000 lv_tlsf_add_pool
     /tmp/cc0wa2R1.s:2633   .text.lv_tlsf_remove_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2640   .text.lv_tlsf_remove_pool:0000000000000000 lv_tlsf_remove_pool
ARM GAS  /tmp/cc0wa2R1.s 			page 85


     /tmp/cc0wa2R1.s:2722   .text.lv_tlsf_create:0000000000000000 $t
     /tmp/cc0wa2R1.s:2729   .text.lv_tlsf_create:0000000000000000 lv_tlsf_create
     /tmp/cc0wa2R1.s:2768   .text.lv_tlsf_create_with_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2775   .text.lv_tlsf_create_with_pool:0000000000000000 lv_tlsf_create_with_pool
     /tmp/cc0wa2R1.s:2811   .text.lv_tlsf_destroy:0000000000000000 $t
     /tmp/cc0wa2R1.s:2818   .text.lv_tlsf_destroy:0000000000000000 lv_tlsf_destroy
     /tmp/cc0wa2R1.s:2832   .text.lv_tlsf_get_pool:0000000000000000 $t
     /tmp/cc0wa2R1.s:2839   .text.lv_tlsf_get_pool:0000000000000000 lv_tlsf_get_pool
     /tmp/cc0wa2R1.s:2862   .text.lv_tlsf_malloc:0000000000000000 $t
     /tmp/cc0wa2R1.s:2869   .text.lv_tlsf_malloc:0000000000000000 lv_tlsf_malloc
     /tmp/cc0wa2R1.s:2912   .text.lv_tlsf_memalign:0000000000000000 $t
     /tmp/cc0wa2R1.s:2919   .text.lv_tlsf_memalign:0000000000000000 lv_tlsf_memalign
     /tmp/cc0wa2R1.s:3043   .text.lv_tlsf_free:0000000000000000 $t
     /tmp/cc0wa2R1.s:3050   .text.lv_tlsf_free:0000000000000000 lv_tlsf_free
     /tmp/cc0wa2R1.s:3122   .text.lv_tlsf_realloc:0000000000000000 $t
     /tmp/cc0wa2R1.s:3129   .text.lv_tlsf_realloc:0000000000000000 lv_tlsf_realloc

UNDEFINED SYMBOLS
lv_memcpy
