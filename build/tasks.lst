ARM GAS  /tmp/ccu8P93f.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	prvTaskIsTaskSuspended:
  24              	.LFB16:
  25              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccu8P93f.s 			page 2


  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccu8P93f.s 			page 3


  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
ARM GAS  /tmp/ccu8P93f.s 			page 4


 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /tmp/ccu8P93f.s 			page 5


 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
ARM GAS  /tmp/ccu8P93f.s 			page 6


 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
ARM GAS  /tmp/ccu8P93f.s 			page 7


 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
ARM GAS  /tmp/ccu8P93f.s 			page 8


 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccu8P93f.s 			page 9


 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/ccu8P93f.s 			page 10


 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 11


 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu8P93f.s 			page 12


 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  /tmp/ccu8P93f.s 			page 13


 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
ARM GAS  /tmp/ccu8P93f.s 			page 14


 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 15


 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
ARM GAS  /tmp/ccu8P93f.s 			page 16


 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccu8P93f.s 			page 17


 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
ARM GAS  /tmp/ccu8P93f.s 			page 18


 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
ARM GAS  /tmp/ccu8P93f.s 			page 19


1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu8P93f.s 			page 20


1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccu8P93f.s 			page 21


1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccu8P93f.s 			page 22


1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
ARM GAS  /tmp/ccu8P93f.s 			page 23


1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu8P93f.s 			page 24


1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 25


1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccu8P93f.s 			page 26


1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
ARM GAS  /tmp/ccu8P93f.s 			page 27


1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /tmp/ccu8P93f.s 			page 28


1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
ARM GAS  /tmp/ccu8P93f.s 			page 29


1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccu8P93f.s 			page 30


1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccu8P93f.s 			page 31


1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
ARM GAS  /tmp/ccu8P93f.s 			page 32


1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccu8P93f.s 			page 33


1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  26              		.loc 1 1806 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  32              		.loc 1 1814 0
  33 0000 50B1     		cbz	r0, .L8
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1817 0
  35 0002 4169     		ldr	r1, [r0, #20]
  36 0004 0C4A     		ldr	r2, .L9
  37 0006 9142     		cmp	r1, r2
  38 0008 0FD1     		bne	.L5
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  39              		.loc 1 1820 0
  40 000a 836A     		ldr	r3, [r0, #40]
  41 000c 0B4A     		ldr	r2, .L9+4
  42 000e 9342     		cmp	r3, r2
  43 0010 0DD0     		beq	.L6
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  44              		.loc 1 1824 0
  45 0012 73B1     		cbz	r3, .L7
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1807 0
  47 0014 0020     		movs	r0, #0
  48              	.LVL1:
  49 0016 7047     		bx	lr
  50              	.LVL2:
  51              	.L8:
  52              	.LBB119:
  53              	.LBB120:
  54              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
ARM GAS  /tmp/ccu8P93f.s 			page 34


   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
ARM GAS  /tmp/ccu8P93f.s 			page 35


  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
ARM GAS  /tmp/ccu8P93f.s 			page 36


 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
ARM GAS  /tmp/ccu8P93f.s 			page 37


 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  55              		.loc 2 195 0
  56              		.syntax unified
  57              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  58 0018 4FF05003 			mov r3, #80												
  59 001c 83F31188 		msr basepri, r3											
  60 0020 BFF36F8F 		isb														
  61 0024 BFF34F8F 		dsb														
  62              	
  63              	@ 0 "" 2
  64              	.LVL3:
  65              		.thumb
  66              		.syntax unified
  67              	.L3:
  68 0028 FEE7     		b	.L3
  69              	.L5:
  70              	.LBE120:
  71              	.LBE119:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  72              		.loc 1 1807 0
  73 002a 0020     		movs	r0, #0
  74              	.LVL4:
  75 002c 7047     		bx	lr
  76              	.LVL5:
  77              	.L6:
  78 002e 0020     		movs	r0, #0
  79              	.LVL6:
  80 0030 7047     		bx	lr
  81              	.LVL7:
  82              	.L7:
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  83              		.loc 1 1826 0
  84 0032 0120     		movs	r0, #1
  85              	.LVL8:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccu8P93f.s 			page 38


1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  86              		.loc 1 1844 0
  87 0034 7047     		bx	lr
  88              	.L10:
  89 0036 00BF     		.align	2
  90              	.L9:
  91 0038 00000000 		.word	.LANCHOR0
  92 003c 00000000 		.word	.LANCHOR1
  93              		.cfi_endproc
  94              	.LFE16:
  96              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv5-d16
 103              	prvTaskCheckFreeStackSpace:
 104              	.LFB47:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
ARM GAS  /tmp/ccu8P93f.s 			page 39


1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  /tmp/ccu8P93f.s 			page 40


1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
ARM GAS  /tmp/ccu8P93f.s 			page 41


1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu8P93f.s 			page 42


2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccu8P93f.s 			page 43


2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
ARM GAS  /tmp/ccu8P93f.s 			page 44


2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
ARM GAS  /tmp/ccu8P93f.s 			page 45


2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
ARM GAS  /tmp/ccu8P93f.s 			page 46


2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  /tmp/ccu8P93f.s 			page 47


2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccu8P93f.s 			page 48


2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
ARM GAS  /tmp/ccu8P93f.s 			page 49


2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /tmp/ccu8P93f.s 			page 50


2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  /tmp/ccu8P93f.s 			page 51


2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
ARM GAS  /tmp/ccu8P93f.s 			page 52


2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccu8P93f.s 			page 53


2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
ARM GAS  /tmp/ccu8P93f.s 			page 54


2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 55


2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
ARM GAS  /tmp/ccu8P93f.s 			page 56


2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu8P93f.s 			page 57


2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccu8P93f.s 			page 58


2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  /tmp/ccu8P93f.s 			page 59


3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccu8P93f.s 			page 60


3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 61


3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/ccu8P93f.s 			page 62


3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 63


3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  /tmp/ccu8P93f.s 			page 64


3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
ARM GAS  /tmp/ccu8P93f.s 			page 65


3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
ARM GAS  /tmp/ccu8P93f.s 			page 66


3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
ARM GAS  /tmp/ccu8P93f.s 			page 67


3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
ARM GAS  /tmp/ccu8P93f.s 			page 68


3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
ARM GAS  /tmp/ccu8P93f.s 			page 69


3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
ARM GAS  /tmp/ccu8P93f.s 			page 70


3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 71


3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
ARM GAS  /tmp/ccu8P93f.s 			page 72


3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 105              		.loc 1 3800 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL9:
ARM GAS  /tmp/ccu8P93f.s 			page 73


3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 111              		.loc 1 3801 0
 112 0000 0023     		movs	r3, #0
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 113              		.loc 1 3803 0
 114 0002 01E0     		b	.L12
 115              	.LVL10:
 116              	.L13:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 117              		.loc 1 3805 0
 118 0004 0130     		adds	r0, r0, #1
 119              	.LVL11:
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 120              		.loc 1 3806 0
 121 0006 0133     		adds	r3, r3, #1
 122              	.LVL12:
 123              	.L12:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 124              		.loc 1 3803 0
 125 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 126 000a A52A     		cmp	r2, #165
 127 000c FAD0     		beq	.L13
 128              	.LVL13:
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 129              		.loc 1 3812 0
 130 000e C3F38F00 		ubfx	r0, r3, #2, #16
 131              	.LVL14:
 132 0012 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE47:
 136              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 137              		.align	1
 138              		.syntax unified
 139              		.thumb
 140              		.thumb_func
 141              		.fpu fpv5-d16
 143              	prvResetNextTaskUnblockTime:
 144              	.LFB50:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
ARM GAS  /tmp/ccu8P93f.s 			page 74


3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 75


3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccu8P93f.s 			page 76


3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 145              		.loc 1 3944 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 150              		.loc 1 3947 0
 151 0000 084B     		ldr	r3, .L18
 152 0002 1B68     		ldr	r3, [r3]
 153 0004 1B68     		ldr	r3, [r3]
 154 0006 3BB1     		cbz	r3, .L17
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 155              		.loc 1 3961 0
 156 0008 064B     		ldr	r3, .L18
 157 000a 1B68     		ldr	r3, [r3]
 158 000c DB68     		ldr	r3, [r3, #12]
 159 000e DB68     		ldr	r3, [r3, #12]
 160              	.LVL15:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 161              		.loc 1 3962 0
 162 0010 5A68     		ldr	r2, [r3, #4]
 163 0012 054B     		ldr	r3, .L18+4
 164              	.LVL16:
 165 0014 1A60     		str	r2, [r3]
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 166              		.loc 1 3964 0
 167 0016 7047     		bx	lr
 168              	.L17:
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 169              		.loc 1 3953 0
 170 0018 034B     		ldr	r3, .L18+4
 171 001a 4FF0FF32 		mov	r2, #-1
 172 001e 1A60     		str	r2, [r3]
 173 0020 7047     		bx	lr
 174              	.L19:
ARM GAS  /tmp/ccu8P93f.s 			page 77


 175 0022 00BF     		.align	2
 176              	.L18:
 177 0024 00000000 		.word	.LANCHOR2
 178 0028 00000000 		.word	.LANCHOR3
 179              		.cfi_endproc
 180              	.LFE50:
 182              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 183              		.align	1
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv5-d16
 189              	prvInitialiseNewTask:
 190              	.LFB6:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 191              		.loc 1 832 0
 192              		.cfi_startproc
 193              		@ args = 16, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL17:
 196 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 197              	.LCFI0:
 198              		.cfi_def_cfa_offset 40
 199              		.cfi_offset 3, -40
 200              		.cfi_offset 4, -36
 201              		.cfi_offset 5, -32
 202              		.cfi_offset 6, -28
 203              		.cfi_offset 7, -24
 204              		.cfi_offset 8, -20
 205              		.cfi_offset 9, -16
 206              		.cfi_offset 10, -12
 207              		.cfi_offset 11, -8
 208              		.cfi_offset 14, -4
 209 0004 8146     		mov	r9, r0
 210 0006 0D46     		mov	r5, r1
 211 0008 9346     		mov	fp, r2
 212 000a 9A46     		mov	r10, r3
 213 000c 0A9E     		ldr	r6, [sp, #40]
 214 000e DDF82C80 		ldr	r8, [sp, #44]
 215 0012 0C9C     		ldr	r4, [sp, #48]
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 216              		.loc 1 854 0
 217 0014 9200     		lsls	r2, r2, #2
 218              	.LVL18:
 219 0016 A521     		movs	r1, #165
 220              	.LVL19:
 221 0018 206B     		ldr	r0, [r4, #48]
 222              	.LVL20:
 223 001a FFF7FEFF 		bl	memset
 224              	.LVL21:
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 225              		.loc 1 864 0
 226 001e 276B     		ldr	r7, [r4, #48]
 227 0020 6FF04043 		mvn	r3, #-1073741824
 228 0024 5B44     		add	r3, r3, fp
 229 0026 07EB8307 		add	r7, r7, r3, lsl #2
 230              	.LVL22:
ARM GAS  /tmp/ccu8P93f.s 			page 78


 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231              		.loc 1 865 0
 232 002a 27F00707 		bic	r7, r7, #7
 233              	.LVL23:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 234              		.loc 1 892 0
 235 002e 85B3     		cbz	r5, .L32
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 236              		.loc 1 894 0
 237 0030 0023     		movs	r3, #0
 238              	.L21:
 239              	.LVL24:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 240              		.loc 1 894 0 is_stmt 0 discriminator 1
 241 0032 0F2B     		cmp	r3, #15
 242 0034 07D8     		bhi	.L23
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 243              		.loc 1 896 0 is_stmt 1
 244 0036 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 245 0038 E218     		adds	r2, r4, r3
 246 003a 82F83410 		strb	r1, [r2, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 247              		.loc 1 901 0
 248 003e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 249 0040 0AB1     		cbz	r2, .L23
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 250              		.loc 1 894 0 discriminator 2
 251 0042 0133     		adds	r3, r3, #1
 252              	.LVL25:
 253 0044 F5E7     		b	.L21
 254              	.L23:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 255              		.loc 1 913 0
 256 0046 0023     		movs	r3, #0
 257              	.LVL26:
 258 0048 84F84330 		strb	r3, [r4, #67]
 259              	.L25:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 260              		.loc 1 924 0
 261 004c 372E     		cmp	r6, #55
 262 004e 00D9     		bls	.L26
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 263              		.loc 1 926 0
 264 0050 3726     		movs	r6, #55
 265              	.L26:
 266              	.LVL27:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 267              		.loc 1 933 0
 268 0052 E662     		str	r6, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 269              		.loc 1 936 0
 270 0054 E664     		str	r6, [r4, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 271              		.loc 1 937 0
 272 0056 0025     		movs	r5, #0
 273              	.LVL28:
 274 0058 2565     		str	r5, [r4, #80]
ARM GAS  /tmp/ccu8P93f.s 			page 79


 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 275              		.loc 1 941 0
 276 005a 201D     		adds	r0, r4, #4
 277 005c FFF7FEFF 		bl	vListInitialiseItem
 278              	.LVL29:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279              		.loc 1 942 0
 280 0060 04F11800 		add	r0, r4, #24
 281 0064 FFF7FEFF 		bl	vListInitialiseItem
 282              	.LVL30:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283              		.loc 1 946 0
 284 0068 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 285              		.loc 1 949 0
 286 006a C6F13806 		rsb	r6, r6, #56
 287              	.LVL31:
 288 006e A661     		str	r6, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 289              		.loc 1 950 0
 290 0070 6462     		str	r4, [r4, #36]
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 291              		.loc 1 992 0
 292 0072 6565     		str	r5, [r4, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 293              		.loc 1 993 0
 294 0074 84F85850 		strb	r5, [r4, #88]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 295              		.loc 1 1058 0
 296 0078 5246     		mov	r2, r10
 297 007a 4946     		mov	r1, r9
 298 007c 3846     		mov	r0, r7
 299 007e FFF7FEFF 		bl	pxPortInitialiseStack
 300              	.LVL32:
 301 0082 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 302              		.loc 1 1064 0
 303 0084 B8F1000F 		cmp	r8, #0
 304 0088 01D0     		beq	.L20
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 1068 0
 306 008a C8F80040 		str	r4, [r8]
 307              	.L20:
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 308              		.loc 1 1074 0
 309 008e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 310              	.LVL33:
 311              	.L32:
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 312              		.loc 1 919 0
 313 0092 0023     		movs	r3, #0
 314 0094 84F83430 		strb	r3, [r4, #52]
 315 0098 D8E7     		b	.L25
 316              		.cfi_endproc
 317              	.LFE6:
 319              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 320              		.align	1
ARM GAS  /tmp/ccu8P93f.s 			page 80


 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu fpv5-d16
 326              	prvInitialiseTaskLists:
 327              	.LFB43:
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 328              		.loc 1 3608 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332 0000 38B5     		push	{r3, r4, r5, lr}
 333              	.LCFI1:
 334              		.cfi_def_cfa_offset 16
 335              		.cfi_offset 3, -16
 336              		.cfi_offset 4, -12
 337              		.cfi_offset 5, -8
 338              		.cfi_offset 14, -4
 339              	.LVL34:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 340              		.loc 1 3611 0
 341 0002 0024     		movs	r4, #0
 342 0004 07E0     		b	.L34
 343              	.LVL35:
 344              	.L35:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 345              		.loc 1 3613 0 discriminator 3
 346 0006 04EB8402 		add	r2, r4, r4, lsl #2
 347 000a 9300     		lsls	r3, r2, #2
 348 000c 0E48     		ldr	r0, .L37
 349 000e 1844     		add	r0, r0, r3
 350 0010 FFF7FEFF 		bl	vListInitialise
 351              	.LVL36:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 352              		.loc 1 3611 0 discriminator 3
 353 0014 0134     		adds	r4, r4, #1
 354              	.LVL37:
 355              	.L34:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 356              		.loc 1 3611 0 is_stmt 0 discriminator 1
 357 0016 372C     		cmp	r4, #55
 358 0018 F5D9     		bls	.L35
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 359              		.loc 1 3616 0 is_stmt 1
 360 001a 0C4D     		ldr	r5, .L37+4
 361 001c 2846     		mov	r0, r5
 362 001e FFF7FEFF 		bl	vListInitialise
 363              	.LVL38:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 364              		.loc 1 3617 0
 365 0022 0B4C     		ldr	r4, .L37+8
 366              	.LVL39:
 367 0024 2046     		mov	r0, r4
 368 0026 FFF7FEFF 		bl	vListInitialise
 369              	.LVL40:
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 370              		.loc 1 3618 0
ARM GAS  /tmp/ccu8P93f.s 			page 81


 371 002a 0A48     		ldr	r0, .L37+12
 372 002c FFF7FEFF 		bl	vListInitialise
 373              	.LVL41:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 374              		.loc 1 3622 0
 375 0030 0948     		ldr	r0, .L37+16
 376 0032 FFF7FEFF 		bl	vListInitialise
 377              	.LVL42:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 378              		.loc 1 3628 0
 379 0036 0948     		ldr	r0, .L37+20
 380 0038 FFF7FEFF 		bl	vListInitialise
 381              	.LVL43:
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 382              		.loc 1 3634 0
 383 003c 084B     		ldr	r3, .L37+24
 384 003e 1D60     		str	r5, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 385              		.loc 1 3635 0
 386 0040 084B     		ldr	r3, .L37+28
 387 0042 1C60     		str	r4, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 388              		.loc 1 3636 0
 389 0044 38BD     		pop	{r3, r4, r5, pc}
 390              	.L38:
 391 0046 00BF     		.align	2
 392              	.L37:
 393 0048 00000000 		.word	.LANCHOR4
 394 004c 00000000 		.word	.LANCHOR5
 395 0050 00000000 		.word	.LANCHOR6
 396 0054 00000000 		.word	.LANCHOR1
 397 0058 00000000 		.word	.LANCHOR7
 398 005c 00000000 		.word	.LANCHOR0
 399 0060 00000000 		.word	.LANCHOR2
 400 0064 00000000 		.word	.LANCHOR8
 401              		.cfi_endproc
 402              	.LFE43:
 404              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 405              		.align	1
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu fpv5-d16
 411              	prvAddNewTaskToReadyList:
 412              	.LFB7:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 413              		.loc 1 1078 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              	.LVL44:
 418 0000 10B5     		push	{r4, lr}
 419              	.LCFI2:
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 4, -8
 422              		.cfi_offset 14, -4
 423 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccu8P93f.s 			page 82


1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 424              		.loc 1 1081 0
 425 0004 FFF7FEFF 		bl	vPortEnterCritical
 426              	.LVL45:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 427              		.loc 1 1083 0
 428 0008 214A     		ldr	r2, .L47
 429 000a 1368     		ldr	r3, [r2]
 430 000c 0133     		adds	r3, r3, #1
 431 000e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 432              		.loc 1 1084 0
 433 0010 204B     		ldr	r3, .L47+4
 434 0012 1B68     		ldr	r3, [r3]
 435 0014 5BB1     		cbz	r3, .L45
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 436              		.loc 1 1107 0
 437 0016 204B     		ldr	r3, .L47+8
 438 0018 1B68     		ldr	r3, [r3]
 439 001a 6BB9     		cbnz	r3, .L41
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 440              		.loc 1 1109 0
 441 001c 1D4B     		ldr	r3, .L47+4
 442 001e 1B68     		ldr	r3, [r3]
 443 0020 DA6A     		ldr	r2, [r3, #44]
 444 0022 E36A     		ldr	r3, [r4, #44]
 445 0024 9A42     		cmp	r2, r3
 446 0026 07D8     		bhi	.L41
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 447              		.loc 1 1111 0
 448 0028 1A4B     		ldr	r3, .L47+4
 449 002a 1C60     		str	r4, [r3]
 450 002c 04E0     		b	.L41
 451              	.L45:
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452              		.loc 1 1088 0
 453 002e 194B     		ldr	r3, .L47+4
 454 0030 1C60     		str	r4, [r3]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 455              		.loc 1 1090 0
 456 0032 1368     		ldr	r3, [r2]
 457 0034 012B     		cmp	r3, #1
 458 0036 27D0     		beq	.L46
 459              	.L41:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460              		.loc 1 1124 0
 461 0038 184A     		ldr	r2, .L47+12
 462 003a 1368     		ldr	r3, [r2]
 463 003c 0133     		adds	r3, r3, #1
 464 003e 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 465              		.loc 1 1129 0
 466 0040 6364     		str	r3, [r4, #68]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 467              		.loc 1 1134 0
 468 0042 E36A     		ldr	r3, [r4, #44]
 469 0044 164A     		ldr	r2, .L47+16
ARM GAS  /tmp/ccu8P93f.s 			page 83


 470 0046 1268     		ldr	r2, [r2]
 471 0048 9342     		cmp	r3, r2
 472 004a 01D9     		bls	.L42
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 473              		.loc 1 1134 0 is_stmt 0 discriminator 1
 474 004c 144A     		ldr	r2, .L47+16
 475 004e 1360     		str	r3, [r2]
 476              	.L42:
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 477              		.loc 1 1134 0 discriminator 3
 478 0050 03EB8303 		add	r3, r3, r3, lsl #2
 479 0054 9A00     		lsls	r2, r3, #2
 480 0056 211D     		adds	r1, r4, #4
 481 0058 1248     		ldr	r0, .L47+20
 482 005a 1044     		add	r0, r0, r2
 483 005c FFF7FEFF 		bl	vListInsertEnd
 484              	.LVL46:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485              		.loc 1 1138 0 is_stmt 1 discriminator 3
 486 0060 FFF7FEFF 		bl	vPortExitCritical
 487              	.LVL47:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 488              		.loc 1 1140 0 discriminator 3
 489 0064 0C4B     		ldr	r3, .L47+8
 490 0066 1B68     		ldr	r3, [r3]
 491 0068 6BB1     		cbz	r3, .L39
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 492              		.loc 1 1144 0
 493 006a 0A4B     		ldr	r3, .L47+4
 494 006c 1B68     		ldr	r3, [r3]
 495 006e DA6A     		ldr	r2, [r3, #44]
 496 0070 E36A     		ldr	r3, [r4, #44]
 497 0072 9A42     		cmp	r2, r3
 498 0074 07D2     		bcs	.L39
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 499              		.loc 1 1146 0
 500 0076 0C4B     		ldr	r3, .L47+24
 501 0078 4FF08052 		mov	r2, #268435456
 502 007c 1A60     		str	r2, [r3]
 503              		.syntax unified
 504              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 505 007e BFF34F8F 		dsb
 506              	@ 0 "" 2
 507              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 508 0082 BFF36F8F 		isb
 509              	@ 0 "" 2
 510              		.thumb
 511              		.syntax unified
 512              	.L39:
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 513              		.loc 1 1157 0
 514 0086 10BD     		pop	{r4, pc}
 515              	.LVL48:
 516              	.L46:
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 517              		.loc 1 1095 0
 518 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
ARM GAS  /tmp/ccu8P93f.s 			page 84


 519              	.LVL49:
 520 008c D4E7     		b	.L41
 521              	.L48:
 522 008e 00BF     		.align	2
 523              	.L47:
 524 0090 00000000 		.word	.LANCHOR9
 525 0094 00000000 		.word	.LANCHOR10
 526 0098 00000000 		.word	.LANCHOR11
 527 009c 00000000 		.word	.LANCHOR12
 528 00a0 00000000 		.word	.LANCHOR13
 529 00a4 00000000 		.word	.LANCHOR4
 530 00a8 04ED00E0 		.word	-536810236
 531              		.cfi_endproc
 532              	.LFE7:
 534              		.section	.text.prvDeleteTCB,"ax",%progbits
 535              		.align	1
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu fpv5-d16
 541              	prvDeleteTCB:
 542              	.LFB49:
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 543              		.loc 1 3888 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL50:
 548 0000 10B5     		push	{r4, lr}
 549              	.LCFI3:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 4, -8
 552              		.cfi_offset 14, -4
 553 0002 0446     		mov	r4, r0
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 554              		.loc 1 3916 0
 555 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 556 0008 33B9     		cbnz	r3, .L50
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 557              		.loc 1 3920 0
 558 000a 006B     		ldr	r0, [r0, #48]
 559              	.LVL51:
 560 000c FFF7FEFF 		bl	vPortFree
 561              	.LVL52:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 562              		.loc 1 3921 0
 563 0010 2046     		mov	r0, r4
 564 0012 FFF7FEFF 		bl	vPortFree
 565              	.LVL53:
 566              	.L49:
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567              		.loc 1 3938 0
 568 0016 10BD     		pop	{r4, pc}
 569              	.LVL54:
 570              	.L50:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 571              		.loc 1 3923 0
ARM GAS  /tmp/ccu8P93f.s 			page 85


 572 0018 012B     		cmp	r3, #1
 573 001a 0AD0     		beq	.L55
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 574              		.loc 1 3933 0
 575 001c 022B     		cmp	r3, #2
 576 001e FAD0     		beq	.L49
 577              	.LBB121:
 578              	.LBB122:
 579              		.loc 2 195 0
 580              		.syntax unified
 581              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 582 0020 4FF05003 			mov r3, #80												
 583 0024 83F31188 		msr basepri, r3											
 584 0028 BFF36F8F 		isb														
 585 002c BFF34F8F 		dsb														
 586              	
 587              	@ 0 "" 2
 588              	.LVL55:
 589              		.thumb
 590              		.syntax unified
 591              	.L53:
 592 0030 FEE7     		b	.L53
 593              	.L55:
 594              	.LBE122:
 595              	.LBE121:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 596              		.loc 1 3927 0
 597 0032 FFF7FEFF 		bl	vPortFree
 598              	.LVL56:
 599 0036 EEE7     		b	.L49
 600              		.cfi_endproc
 601              	.LFE49:
 603              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 604              		.align	1
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu fpv5-d16
 610              	prvCheckTasksWaitingTermination:
 611              	.LFB44:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 3640 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LBB123:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 617              		.loc 1 3650 0
 618 0000 0F4B     		ldr	r3, .L63
 619 0002 1B68     		ldr	r3, [r3]
 620 0004 D3B1     		cbz	r3, .L62
 621              	.LBE123:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622              		.loc 1 3640 0
 623 0006 10B5     		push	{r4, lr}
 624              	.LCFI4:
 625              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccu8P93f.s 			page 86


 626              		.cfi_offset 4, -8
 627              		.cfi_offset 14, -4
 628              	.L58:
 629              	.LBB124:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 630              		.loc 1 3652 0
 631 0008 FFF7FEFF 		bl	vPortEnterCritical
 632              	.LVL57:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 633              		.loc 1 3654 0
 634 000c 0D4B     		ldr	r3, .L63+4
 635 000e DB68     		ldr	r3, [r3, #12]
 636 0010 DC68     		ldr	r4, [r3, #12]
 637              	.LVL58:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 638              		.loc 1 3655 0
 639 0012 201D     		adds	r0, r4, #4
 640 0014 FFF7FEFF 		bl	uxListRemove
 641              	.LVL59:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 642              		.loc 1 3656 0
 643 0018 0B4A     		ldr	r2, .L63+8
 644 001a 1368     		ldr	r3, [r2]
 645 001c 013B     		subs	r3, r3, #1
 646 001e 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 647              		.loc 1 3657 0
 648 0020 074A     		ldr	r2, .L63
 649 0022 1368     		ldr	r3, [r2]
 650 0024 013B     		subs	r3, r3, #1
 651 0026 1360     		str	r3, [r2]
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 652              		.loc 1 3659 0
 653 0028 FFF7FEFF 		bl	vPortExitCritical
 654              	.LVL60:
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 655              		.loc 1 3661 0
 656 002c 2046     		mov	r0, r4
 657 002e FFF7FEFF 		bl	prvDeleteTCB
 658              	.LVL61:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 659              		.loc 1 3650 0
 660 0032 034B     		ldr	r3, .L63
 661 0034 1B68     		ldr	r3, [r3]
 662 0036 002B     		cmp	r3, #0
 663 0038 E6D1     		bne	.L58
 664              	.LBE124:
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 665              		.loc 1 3665 0
 666 003a 10BD     		pop	{r4, pc}
 667              	.LVL62:
 668              	.L62:
 669              	.LCFI5:
 670              		.cfi_def_cfa_offset 0
 671              		.cfi_restore 4
 672              		.cfi_restore 14
 673 003c 7047     		bx	lr
ARM GAS  /tmp/ccu8P93f.s 			page 87


 674              	.L64:
 675 003e 00BF     		.align	2
 676              	.L63:
 677 0040 00000000 		.word	.LANCHOR14
 678 0044 00000000 		.word	.LANCHOR7
 679 0048 00000000 		.word	.LANCHOR9
 680              		.cfi_endproc
 681              	.LFE44:
 683              		.section	.text.prvIdleTask,"ax",%progbits
 684              		.align	1
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu fpv5-d16
 690              	prvIdleTask:
 691              	.LFB42:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 692              		.loc 1 3393 0
 693              		.cfi_startproc
 694              		@ Volatile: function does not return.
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              	.LVL63:
 698 0000 08B5     		push	{r3, lr}
 699              	.LCFI6:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 3, -8
 702              		.cfi_offset 14, -4
 703              	.LVL64:
 704              	.L66:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705              		.loc 1 3409 0
 706 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 707              	.LVL65:
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 708              		.loc 1 3432 0
 709 0006 064B     		ldr	r3, .L69
 710 0008 1B68     		ldr	r3, [r3]
 711 000a 012B     		cmp	r3, #1
 712 000c F9D9     		bls	.L66
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 713              		.loc 1 3434 0
 714 000e 054B     		ldr	r3, .L69+4
 715 0010 4FF08052 		mov	r2, #268435456
 716 0014 1A60     		str	r2, [r3]
 717              		.syntax unified
 718              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 719 0016 BFF34F8F 		dsb
 720              	@ 0 "" 2
 721              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 722 001a BFF36F8F 		isb
 723              	@ 0 "" 2
 724              		.thumb
 725              		.syntax unified
 726 001e F0E7     		b	.L66
 727              	.L70:
 728              		.align	2
ARM GAS  /tmp/ccu8P93f.s 			page 88


 729              	.L69:
 730 0020 00000000 		.word	.LANCHOR4
 731 0024 04ED00E0 		.word	-536810236
 732              		.cfi_endproc
 733              	.LFE42:
 735              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 736              		.align	1
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu fpv5-d16
 742              	prvAddCurrentTaskToDelayedList:
 743              	.LFB65:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 89


4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccu8P93f.s 			page 90


4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccu8P93f.s 			page 91


4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccu8P93f.s 			page 92


4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccu8P93f.s 			page 93


4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/ccu8P93f.s 			page 94


4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
ARM GAS  /tmp/ccu8P93f.s 			page 95


4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 96


4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
ARM GAS  /tmp/ccu8P93f.s 			page 97


4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
ARM GAS  /tmp/ccu8P93f.s 			page 98


4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  /tmp/ccu8P93f.s 			page 99


4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
ARM GAS  /tmp/ccu8P93f.s 			page 100


4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu8P93f.s 			page 101


4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
ARM GAS  /tmp/ccu8P93f.s 			page 102


4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
ARM GAS  /tmp/ccu8P93f.s 			page 103


4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
ARM GAS  /tmp/ccu8P93f.s 			page 104


4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
ARM GAS  /tmp/ccu8P93f.s 			page 105


4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  /tmp/ccu8P93f.s 			page 106


4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  /tmp/ccu8P93f.s 			page 107


5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccu8P93f.s 			page 108


5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
ARM GAS  /tmp/ccu8P93f.s 			page 109


5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 744              		.loc 1 5178 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL66:
 749 0000 70B5     		push	{r4, r5, r6, lr}
 750              	.LCFI7:
 751              		.cfi_def_cfa_offset 16
 752              		.cfi_offset 4, -16
 753              		.cfi_offset 5, -12
 754              		.cfi_offset 6, -8
 755              		.cfi_offset 14, -4
 756 0002 0446     		mov	r4, r0
 757 0004 0E46     		mov	r6, r1
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 758              		.loc 1 5180 0
 759 0006 194B     		ldr	r3, .L78
 760 0008 1D68     		ldr	r5, [r3]
 761              	.LVL67:
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
ARM GAS  /tmp/ccu8P93f.s 			page 110


5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 762              		.loc 1 5193 0
 763 000a 194B     		ldr	r3, .L78+4
 764 000c 1868     		ldr	r0, [r3]
 765              	.LVL68:
 766 000e 0430     		adds	r0, r0, #4
 767 0010 FFF7FEFF 		bl	uxListRemove
 768              	.LVL69:
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 769              		.loc 1 5206 0
 770 0014 B4F1FF3F 		cmp	r4, #-1
 771 0018 14BF     		ite	ne
 772 001a 0023     		movne	r3, #0
 773 001c 0123     		moveq	r3, #1
 774 001e 002E     		cmp	r6, #0
 775 0020 08BF     		it	eq
 776 0022 0023     		moveq	r3, #0
 777 0024 9BB9     		cbnz	r3, .L76
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 778              		.loc 1 5218 0
 779 0026 2C44     		add	r4, r4, r5
 780              	.LVL70:
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 781              		.loc 1 5221 0
 782 0028 114B     		ldr	r3, .L78+4
 783 002a 1B68     		ldr	r3, [r3]
 784 002c 5C60     		str	r4, [r3, #4]
ARM GAS  /tmp/ccu8P93f.s 			page 111


5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 785              		.loc 1 5223 0
 786 002e A542     		cmp	r5, r4
 787 0030 14D8     		bhi	.L77
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 788              		.loc 1 5233 0
 789 0032 104B     		ldr	r3, .L78+8
 790 0034 1868     		ldr	r0, [r3]
 791 0036 0E4B     		ldr	r3, .L78+4
 792 0038 1968     		ldr	r1, [r3]
 793 003a 0431     		adds	r1, r1, #4
 794 003c FFF7FEFF 		bl	vListInsert
 795              	.LVL71:
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 796              		.loc 1 5238 0
 797 0040 0D4B     		ldr	r3, .L78+12
 798 0042 1B68     		ldr	r3, [r3]
 799 0044 A342     		cmp	r3, r4
 800 0046 10D9     		bls	.L71
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 801              		.loc 1 5240 0
 802 0048 0B4B     		ldr	r3, .L78+12
 803 004a 1C60     		str	r4, [r3]
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
ARM GAS  /tmp/ccu8P93f.s 			page 112


5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 804              		.loc 1 5286 0
 805 004c 0DE0     		b	.L71
 806              	.LVL72:
 807              	.L76:
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 808              		.loc 1 5211 0
 809 004e 084B     		ldr	r3, .L78+4
 810 0050 1968     		ldr	r1, [r3]
 811 0052 0431     		adds	r1, r1, #4
 812 0054 0948     		ldr	r0, .L78+16
 813 0056 FFF7FEFF 		bl	vListInsertEnd
 814              	.LVL73:
 815 005a 06E0     		b	.L71
 816              	.LVL74:
 817              	.L77:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 818              		.loc 1 5227 0
 819 005c 084B     		ldr	r3, .L78+20
 820 005e 1868     		ldr	r0, [r3]
 821 0060 034B     		ldr	r3, .L78+4
 822 0062 1968     		ldr	r1, [r3]
 823 0064 0431     		adds	r1, r1, #4
 824 0066 FFF7FEFF 		bl	vListInsert
 825              	.LVL75:
 826              	.L71:
 827              		.loc 1 5286 0
 828 006a 70BD     		pop	{r4, r5, r6, pc}
 829              	.LVL76:
 830              	.L79:
 831              		.align	2
ARM GAS  /tmp/ccu8P93f.s 			page 113


 832              	.L78:
 833 006c 00000000 		.word	.LANCHOR15
 834 0070 00000000 		.word	.LANCHOR10
 835 0074 00000000 		.word	.LANCHOR2
 836 0078 00000000 		.word	.LANCHOR3
 837 007c 00000000 		.word	.LANCHOR0
 838 0080 00000000 		.word	.LANCHOR8
 839              		.cfi_endproc
 840              	.LFE65:
 842              		.section	.text.xTaskCreateStatic,"ax",%progbits
 843              		.align	1
 844              		.global	xTaskCreateStatic
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu fpv5-d16
 850              	xTaskCreateStatic:
 851              	.LFB4:
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 852              		.loc 1 588 0
 853              		.cfi_startproc
 854              		@ args = 12, pretend = 0, frame = 8
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              	.LVL77:
 857 0000 70B5     		push	{r4, r5, r6, lr}
 858              	.LCFI8:
 859              		.cfi_def_cfa_offset 16
 860              		.cfi_offset 4, -16
 861              		.cfi_offset 5, -12
 862              		.cfi_offset 6, -8
 863              		.cfi_offset 14, -4
 864 0002 86B0     		sub	sp, sp, #24
 865              	.LCFI9:
 866              		.cfi_def_cfa_offset 40
 867 0004 0B9D     		ldr	r5, [sp, #44]
 868 0006 0C9C     		ldr	r4, [sp, #48]
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 869              		.loc 1 592 0
 870 0008 45B9     		cbnz	r5, .L81
 871              	.LBB125:
 872              	.LBB126:
 873              		.loc 2 195 0
 874              		.syntax unified
 875              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 876 000a 4FF05003 			mov r3, #80												
 877 000e 83F31188 		msr basepri, r3											
 878 0012 BFF36F8F 		isb														
 879 0016 BFF34F8F 		dsb														
 880              	
 881              	@ 0 "" 2
 882              	.LVL78:
 883              		.thumb
 884              		.syntax unified
 885              	.L82:
 886 001a FEE7     		b	.L82
 887              	.LVL79:
 888              	.L81:
ARM GAS  /tmp/ccu8P93f.s 			page 114


 889              	.LBE126:
 890              	.LBE125:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891              		.loc 1 593 0
 892 001c 44B9     		cbnz	r4, .L83
 893              	.LBB127:
 894              	.LBB128:
 895              		.loc 2 195 0
 896              		.syntax unified
 897              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 898 001e 4FF05003 			mov r3, #80												
 899 0022 83F31188 		msr basepri, r3											
 900 0026 BFF36F8F 		isb														
 901 002a BFF34F8F 		dsb														
 902              	
 903              	@ 0 "" 2
 904              	.LVL80:
 905              		.thumb
 906              		.syntax unified
 907              	.L84:
 908 002e FEE7     		b	.L84
 909              	.LVL81:
 910              	.L83:
 911              	.LBE128:
 912              	.LBE127:
 913              	.LBB129:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 914              		.loc 1 600 0
 915 0030 5C26     		movs	r6, #92
 916 0032 0496     		str	r6, [sp, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 917              		.loc 1 601 0
 918 0034 049E     		ldr	r6, [sp, #16]
 919 0036 5C2E     		cmp	r6, #92
 920 0038 08D0     		beq	.L85
 921              	.LBB130:
 922              	.LBB131:
 923              		.loc 2 195 0
 924              		.syntax unified
 925              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 926 003a 4FF05003 			mov r3, #80												
 927 003e 83F31188 		msr basepri, r3											
 928 0042 BFF36F8F 		isb														
 929 0046 BFF34F8F 		dsb														
 930              	
 931              	@ 0 "" 2
 932              	.LVL82:
 933              		.thumb
 934              		.syntax unified
 935              	.L86:
 936 004a FEE7     		b	.L86
 937              	.LVL83:
 938              	.L85:
 939              	.LBE131:
 940              	.LBE130:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 941              		.loc 1 602 0
ARM GAS  /tmp/ccu8P93f.s 			page 115


 942 004c 049E     		ldr	r6, [sp, #16]
 943              	.LVL84:
 944              	.LBE129:
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945              		.loc 1 612 0
 946 004e 2563     		str	r5, [r4, #48]
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 947              		.loc 1 618 0
 948 0050 0225     		movs	r5, #2
 949 0052 84F85950 		strb	r5, [r4, #89]
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 950              		.loc 1 622 0
 951 0056 0025     		movs	r5, #0
 952 0058 0395     		str	r5, [sp, #12]
 953 005a 0294     		str	r4, [sp, #8]
 954 005c 05AD     		add	r5, sp, #20
 955 005e 0195     		str	r5, [sp, #4]
 956 0060 0A9D     		ldr	r5, [sp, #40]
 957 0062 0095     		str	r5, [sp]
 958 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 959              	.LVL85:
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 960              		.loc 1 623 0
 961 0068 2046     		mov	r0, r4
 962 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 963              	.LVL86:
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964              		.loc 1 631 0
 965 006e 0598     		ldr	r0, [sp, #20]
 966 0070 06B0     		add	sp, sp, #24
 967              	.LCFI10:
 968              		.cfi_def_cfa_offset 16
 969              		@ sp needed
 970 0072 70BD     		pop	{r4, r5, r6, pc}
 971              		.cfi_endproc
 972              	.LFE4:
 974              		.section	.text.xTaskCreate,"ax",%progbits
 975              		.align	1
 976              		.global	xTaskCreate
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu fpv5-d16
 982              	xTaskCreate:
 983              	.LFB5:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 984              		.loc 1 739 0
 985              		.cfi_startproc
 986              		@ args = 8, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              	.LVL87:
 989 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 990              	.LCFI11:
 991              		.cfi_def_cfa_offset 28
 992              		.cfi_offset 4, -28
 993              		.cfi_offset 5, -24
 994              		.cfi_offset 6, -20
ARM GAS  /tmp/ccu8P93f.s 			page 116


 995              		.cfi_offset 7, -16
 996              		.cfi_offset 8, -12
 997              		.cfi_offset 9, -8
 998              		.cfi_offset 14, -4
 999 0004 85B0     		sub	sp, sp, #20
 1000              	.LCFI12:
 1001              		.cfi_def_cfa_offset 48
 1002 0006 0746     		mov	r7, r0
 1003 0008 8846     		mov	r8, r1
 1004 000a 1546     		mov	r5, r2
 1005 000c 9946     		mov	r9, r3
 1006              	.LBB132:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1007              		.loc 1 773 0
 1008 000e 9000     		lsls	r0, r2, #2
 1009              	.LVL88:
 1010 0010 FFF7FEFF 		bl	pvPortMalloc
 1011              	.LVL89:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1012              		.loc 1 775 0
 1013 0014 08B3     		cbz	r0, .L92
 1014 0016 0646     		mov	r6, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1015              		.loc 1 778 0
 1016 0018 5C20     		movs	r0, #92
 1017              	.LVL90:
 1018 001a FFF7FEFF 		bl	pvPortMalloc
 1019              	.LVL91:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1020              		.loc 1 780 0
 1021 001e 0446     		mov	r4, r0
 1022 0020 B8B1     		cbz	r0, .L90
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1023              		.loc 1 783 0
 1024 0022 0663     		str	r6, [r0, #48]
 1025              	.LVL92:
 1026              	.L91:
 1027              	.LBE132:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1028              		.loc 1 799 0
 1029 0024 E4B1     		cbz	r4, .L93
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1030              		.loc 1 805 0
 1031 0026 0023     		movs	r3, #0
 1032 0028 84F85930 		strb	r3, [r4, #89]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1033              		.loc 1 809 0
 1034 002c 0393     		str	r3, [sp, #12]
 1035 002e 0294     		str	r4, [sp, #8]
 1036 0030 0D9B     		ldr	r3, [sp, #52]
 1037 0032 0193     		str	r3, [sp, #4]
 1038 0034 0C9B     		ldr	r3, [sp, #48]
 1039 0036 0093     		str	r3, [sp]
 1040 0038 4B46     		mov	r3, r9
 1041 003a 2A46     		mov	r2, r5
 1042 003c 4146     		mov	r1, r8
 1043 003e 3846     		mov	r0, r7
ARM GAS  /tmp/ccu8P93f.s 			page 117


 1044 0040 FFF7FEFF 		bl	prvInitialiseNewTask
 1045              	.LVL93:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1046              		.loc 1 810 0
 1047 0044 2046     		mov	r0, r4
 1048 0046 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1049              	.LVL94:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1050              		.loc 1 811 0
 1051 004a 0120     		movs	r0, #1
 1052              	.LVL95:
 1053              	.L88:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1054              		.loc 1 819 0
 1055 004c 05B0     		add	sp, sp, #20
 1056              	.LCFI13:
 1057              		.cfi_remember_state
 1058              		.cfi_def_cfa_offset 28
 1059              		@ sp needed
 1060 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1061              	.LVL96:
 1062              	.L90:
 1063              	.LCFI14:
 1064              		.cfi_restore_state
 1065              	.LBB133:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1066              		.loc 1 789 0
 1067 0052 3046     		mov	r0, r6
 1068              	.LVL97:
 1069 0054 FFF7FEFF 		bl	vPortFree
 1070              	.LVL98:
 1071 0058 E4E7     		b	.L91
 1072              	.LVL99:
 1073              	.L92:
 1074              	.LBE133:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1075              		.loc 1 815 0
 1076 005a 4FF0FF30 		mov	r0, #-1
 1077              	.LVL100:
 1078 005e F5E7     		b	.L88
 1079              	.LVL101:
 1080              	.L93:
 1081 0060 4FF0FF30 		mov	r0, #-1
 1082              	.LVL102:
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1083              		.loc 1 818 0
 1084 0064 F2E7     		b	.L88
 1085              		.cfi_endproc
 1086              	.LFE5:
 1088              		.section	.text.vTaskDelete,"ax",%progbits
 1089              		.align	1
 1090              		.global	vTaskDelete
 1091              		.syntax unified
 1092              		.thumb
 1093              		.thumb_func
 1094              		.fpu fpv5-d16
 1096              	vTaskDelete:
ARM GAS  /tmp/ccu8P93f.s 			page 118


 1097              	.LFB8:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1098              		.loc 1 1163 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL103:
 1103 0000 38B5     		push	{r3, r4, r5, lr}
 1104              	.LCFI15:
 1105              		.cfi_def_cfa_offset 16
 1106              		.cfi_offset 3, -16
 1107              		.cfi_offset 4, -12
 1108              		.cfi_offset 5, -8
 1109              		.cfi_offset 14, -4
 1110 0002 0446     		mov	r4, r0
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1111              		.loc 1 1166 0
 1112 0004 FFF7FEFF 		bl	vPortEnterCritical
 1113              	.LVL104:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1114              		.loc 1 1170 0
 1115 0008 24B3     		cbz	r4, .L104
 1116              	.LVL105:
 1117              	.L96:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1118              		.loc 1 1173 0 discriminator 4
 1119 000a 251D     		adds	r5, r4, #4
 1120 000c 2846     		mov	r0, r5
 1121 000e FFF7FEFF 		bl	uxListRemove
 1122              	.LVL106:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1123              		.loc 1 1183 0 discriminator 4
 1124 0012 A36A     		ldr	r3, [r4, #40]
 1125 0014 1BB1     		cbz	r3, .L97
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1126              		.loc 1 1185 0
 1127 0016 04F11800 		add	r0, r4, #24
 1128 001a FFF7FEFF 		bl	uxListRemove
 1129              	.LVL107:
 1130              	.L97:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1131              		.loc 1 1196 0
 1132 001e 1E4A     		ldr	r2, .L107
 1133 0020 1368     		ldr	r3, [r2]
 1134 0022 0133     		adds	r3, r3, #1
 1135 0024 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1136              		.loc 1 1198 0
 1137 0026 1D4B     		ldr	r3, .L107+4
 1138 0028 1B68     		ldr	r3, [r3]
 1139 002a A342     		cmp	r3, r4
 1140 002c 15D0     		beq	.L105
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1141              		.loc 1 1225 0
 1142 002e 1C4A     		ldr	r2, .L107+8
 1143 0030 1368     		ldr	r3, [r2]
 1144 0032 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccu8P93f.s 			page 119


 1145 0034 1360     		str	r3, [r2]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1146              		.loc 1 1227 0
 1147 0036 2046     		mov	r0, r4
 1148 0038 FFF7FEFF 		bl	prvDeleteTCB
 1149              	.LVL108:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1150              		.loc 1 1231 0
 1151 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1152              	.LVL109:
 1153              	.L99:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1154              		.loc 1 1234 0
 1155 0040 FFF7FEFF 		bl	vPortExitCritical
 1156              	.LVL110:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1157              		.loc 1 1238 0
 1158 0044 174B     		ldr	r3, .L107+12
 1159 0046 1B68     		ldr	r3, [r3]
 1160 0048 1BB1     		cbz	r3, .L95
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1161              		.loc 1 1240 0
 1162 004a 144B     		ldr	r3, .L107+4
 1163 004c 1B68     		ldr	r3, [r3]
 1164 004e A342     		cmp	r3, r4
 1165 0050 0CD0     		beq	.L106
 1166              	.L95:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1250 0
 1168 0052 38BD     		pop	{r3, r4, r5, pc}
 1169              	.LVL111:
 1170              	.L104:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1171              		.loc 1 1170 0 discriminator 1
 1172 0054 114B     		ldr	r3, .L107+4
 1173 0056 1C68     		ldr	r4, [r3]
 1174              	.LVL112:
 1175 0058 D7E7     		b	.L96
 1176              	.LVL113:
 1177              	.L105:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1178              		.loc 1 1205 0
 1179 005a 2946     		mov	r1, r5
 1180 005c 1248     		ldr	r0, .L107+16
 1181 005e FFF7FEFF 		bl	vListInsertEnd
 1182              	.LVL114:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1183              		.loc 1 1210 0
 1184 0062 124A     		ldr	r2, .L107+20
 1185 0064 1368     		ldr	r3, [r2]
 1186 0066 0133     		adds	r3, r3, #1
 1187 0068 1360     		str	r3, [r2]
 1188 006a E9E7     		b	.L99
 1189              	.L106:
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1190              		.loc 1 1242 0
 1191 006c 104B     		ldr	r3, .L107+24
ARM GAS  /tmp/ccu8P93f.s 			page 120


 1192 006e 1B68     		ldr	r3, [r3]
 1193 0070 43B1     		cbz	r3, .L101
 1194              	.LBB134:
 1195              	.LBB135:
 1196              		.loc 2 195 0
 1197              		.syntax unified
 1198              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1199 0072 4FF05003 			mov r3, #80												
 1200 0076 83F31188 		msr basepri, r3											
 1201 007a BFF36F8F 		isb														
 1202 007e BFF34F8F 		dsb														
 1203              	
 1204              	@ 0 "" 2
 1205              	.LVL115:
 1206              		.thumb
 1207              		.syntax unified
 1208              	.L102:
 1209 0082 FEE7     		b	.L102
 1210              	.L101:
 1211              	.LBE135:
 1212              	.LBE134:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1213              		.loc 1 1243 0
 1214 0084 0B4B     		ldr	r3, .L107+28
 1215 0086 4FF08052 		mov	r2, #268435456
 1216 008a 1A60     		str	r2, [r3]
 1217              		.syntax unified
 1218              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1219 008c BFF34F8F 		dsb
 1220              	@ 0 "" 2
 1221              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1222 0090 BFF36F8F 		isb
 1223              	@ 0 "" 2
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1224              		.loc 1 1250 0
 1225              		.thumb
 1226              		.syntax unified
 1227 0094 DDE7     		b	.L95
 1228              	.L108:
 1229 0096 00BF     		.align	2
 1230              	.L107:
 1231 0098 00000000 		.word	.LANCHOR12
 1232 009c 00000000 		.word	.LANCHOR10
 1233 00a0 00000000 		.word	.LANCHOR9
 1234 00a4 00000000 		.word	.LANCHOR11
 1235 00a8 00000000 		.word	.LANCHOR7
 1236 00ac 00000000 		.word	.LANCHOR14
 1237 00b0 00000000 		.word	.LANCHOR16
 1238 00b4 04ED00E0 		.word	-536810236
 1239              		.cfi_endproc
 1240              	.LFE8:
 1242              		.section	.text.eTaskGetState,"ax",%progbits
 1243              		.align	1
 1244              		.global	eTaskGetState
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
ARM GAS  /tmp/ccu8P93f.s 			page 121


 1248              		.fpu fpv5-d16
 1250              	eTaskGetState:
 1251              	.LFB11:
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1252              		.loc 1 1387 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              	.LVL116:
 1257 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1258              	.LCFI16:
 1259              		.cfi_def_cfa_offset 24
 1260              		.cfi_offset 3, -24
 1261              		.cfi_offset 4, -20
 1262              		.cfi_offset 5, -16
 1263              		.cfi_offset 6, -12
 1264              		.cfi_offset 7, -8
 1265              		.cfi_offset 14, -4
 1266              	.LVL117:
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1267              		.loc 1 1392 0
 1268 0002 D0B1     		cbz	r0, .L121
 1269 0004 0446     		mov	r4, r0
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1270              		.loc 1 1394 0
 1271 0006 1C4B     		ldr	r3, .L124
 1272 0008 1B68     		ldr	r3, [r3]
 1273 000a 8342     		cmp	r3, r0
 1274 000c 29D0     		beq	.L114
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1275              		.loc 1 1401 0
 1276 000e FFF7FEFF 		bl	vPortEnterCritical
 1277              	.LVL118:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1278              		.loc 1 1403 0
 1279 0012 6569     		ldr	r5, [r4, #20]
 1280              	.LVL119:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1281              		.loc 1 1404 0
 1282 0014 194B     		ldr	r3, .L124+4
 1283 0016 1F68     		ldr	r7, [r3]
 1284              	.LVL120:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1285              		.loc 1 1405 0
 1286 0018 194B     		ldr	r3, .L124+8
 1287 001a 1E68     		ldr	r6, [r3]
 1288              	.LVL121:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1289              		.loc 1 1407 0
 1290 001c FFF7FEFF 		bl	vPortExitCritical
 1291              	.LVL122:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1292              		.loc 1 1409 0
 1293 0020 B542     		cmp	r5, r6
 1294 0022 18BF     		it	ne
 1295 0024 BD42     		cmpne	r5, r7
 1296 0026 1ED0     		beq	.L115
ARM GAS  /tmp/ccu8P93f.s 			page 122


1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1297              		.loc 1 1417 0
 1298 0028 164B     		ldr	r3, .L124+12
 1299 002a 9D42     		cmp	r5, r3
 1300 002c 0ED0     		beq	.L122
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1301              		.loc 1 1453 0
 1302 002e 164B     		ldr	r3, .L124+16
 1303 0030 9D42     		cmp	r5, r3
 1304 0032 1ED0     		beq	.L118
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1305              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1306 0034 9DB1     		cbz	r5, .L123
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1307              		.loc 1 1466 0 is_stmt 1
 1308 0036 0120     		movs	r0, #1
 1309 0038 14E0     		b	.L112
 1310              	.LVL123:
 1311              	.L121:
 1312              	.LBB136:
 1313              	.LBB137:
 1314              		.loc 2 195 0
 1315              		.syntax unified
 1316              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1317 003a 4FF05003 			mov r3, #80												
 1318 003e 83F31188 		msr basepri, r3											
 1319 0042 BFF36F8F 		isb														
 1320 0046 BFF34F8F 		dsb														
 1321              	
 1322              	@ 0 "" 2
 1323              	.LVL124:
 1324              		.thumb
 1325              		.syntax unified
 1326              	.L111:
 1327 004a FEE7     		b	.L111
 1328              	.LVL125:
 1329              	.L122:
 1330              	.LBE137:
 1331              	.LBE136:
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1332              		.loc 1 1422 0
 1333 004c A36A     		ldr	r3, [r4, #40]
 1334 004e 63B9     		cbnz	r3, .L116
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1335              		.loc 1 1430 0
 1336 0050 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1337 0054 DBB2     		uxtb	r3, r3
 1338 0056 012B     		cmp	r3, #1
 1339 0058 09D1     		bne	.L117
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1340              		.loc 1 1432 0
 1341 005a 0220     		movs	r0, #2
 1342 005c 02E0     		b	.L112
 1343              	.L123:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1344              		.loc 1 1458 0
 1345 005e 0420     		movs	r0, #4
ARM GAS  /tmp/ccu8P93f.s 			page 123


 1346 0060 00E0     		b	.L112
 1347              	.LVL126:
 1348              	.L114:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1349              		.loc 1 1397 0
 1350 0062 0020     		movs	r0, #0
 1351              	.LVL127:
 1352              	.L112:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1353              		.loc 1 1471 0
 1354 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1355              	.LVL128:
 1356              	.L115:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1357              		.loc 1 1413 0
 1358 0066 0220     		movs	r0, #2
 1359 0068 FCE7     		b	.L112
 1360              	.L116:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1361              		.loc 1 1447 0
 1362 006a 0220     		movs	r0, #2
 1363 006c FAE7     		b	.L112
 1364              	.L117:
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1365              		.loc 1 1436 0
 1366 006e 0320     		movs	r0, #3
 1367 0070 F8E7     		b	.L112
 1368              	.L118:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1369              		.loc 1 1458 0
 1370 0072 0420     		movs	r0, #4
 1371 0074 F6E7     		b	.L112
 1372              	.L125:
 1373 0076 00BF     		.align	2
 1374              	.L124:
 1375 0078 00000000 		.word	.LANCHOR10
 1376 007c 00000000 		.word	.LANCHOR2
 1377 0080 00000000 		.word	.LANCHOR8
 1378 0084 00000000 		.word	.LANCHOR0
 1379 0088 00000000 		.word	.LANCHOR7
 1380              		.cfi_endproc
 1381              	.LFE11:
 1383              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1384              		.align	1
 1385              		.global	uxTaskPriorityGet
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv5-d16
 1391              	uxTaskPriorityGet:
 1392              	.LFB12:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1393              		.loc 1 1479 0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              	.LVL129:
ARM GAS  /tmp/ccu8P93f.s 			page 124


 1398 0000 10B5     		push	{r4, lr}
 1399              	.LCFI17:
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 4, -8
 1402              		.cfi_offset 14, -4
 1403 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1404              		.loc 1 1483 0
 1405 0004 FFF7FEFF 		bl	vPortEnterCritical
 1406              	.LVL130:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1407              		.loc 1 1487 0
 1408 0008 24B1     		cbz	r4, .L129
 1409              	.LVL131:
 1410              	.L127:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1411              		.loc 1 1488 0 discriminator 4
 1412 000a E46A     		ldr	r4, [r4, #44]
 1413              	.LVL132:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1414              		.loc 1 1490 0 discriminator 4
 1415 000c FFF7FEFF 		bl	vPortExitCritical
 1416              	.LVL133:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1417              		.loc 1 1493 0 discriminator 4
 1418 0010 2046     		mov	r0, r4
 1419 0012 10BD     		pop	{r4, pc}
 1420              	.LVL134:
 1421              	.L129:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1422              		.loc 1 1487 0 discriminator 1
 1423 0014 014B     		ldr	r3, .L130
 1424 0016 1C68     		ldr	r4, [r3]
 1425              	.LVL135:
 1426 0018 F7E7     		b	.L127
 1427              	.L131:
 1428 001a 00BF     		.align	2
 1429              	.L130:
 1430 001c 00000000 		.word	.LANCHOR10
 1431              		.cfi_endproc
 1432              	.LFE12:
 1434              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1435              		.align	1
 1436              		.global	uxTaskPriorityGetFromISR
 1437              		.syntax unified
 1438              		.thumb
 1439              		.thumb_func
 1440              		.fpu fpv5-d16
 1442              	uxTaskPriorityGetFromISR:
 1443              	.LFB13:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1444              		.loc 1 1501 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              	.LVL136:
 1449 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccu8P93f.s 			page 125


 1450              	.LCFI18:
 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 4, -8
 1453              		.cfi_offset 14, -4
 1454 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1455              		.loc 1 1521 0
 1456 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1457              	.LVL137:
 1458              	.LBB138:
 1459              	.LBB139:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1460              		.loc 2 211 0
 1461              		.syntax unified
 1462              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1463 0008 EFF31183 			mrs r3, basepri											
 1464 000c 4FF05002 		mov r2, #80												
 1465 0010 82F31188 		msr basepri, r2											
 1466 0014 BFF36F8F 		isb														
 1467 0018 BFF34F8F 		dsb														
 1468              	
 1469              	@ 0 "" 2
 1470              		.thumb
 1471              		.syntax unified
 1472              	.LBE139:
 1473              	.LBE138:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1474              		.loc 1 1527 0
 1475 001c 1CB1     		cbz	r4, .L135
 1476              	.LVL138:
 1477              	.L133:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1478              		.loc 1 1528 0 discriminator 4
 1479 001e E06A     		ldr	r0, [r4, #44]
 1480              	.LVL139:
 1481              	.LBB140:
 1482              	.LBB141:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
ARM GAS  /tmp/ccu8P93f.s 			page 126


 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1483              		.loc 2 229 0 discriminator 4
 1484              		.syntax unified
 1485              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1486 0020 83F31188 			msr basepri, r3	
 1487              	@ 0 "" 2
 1488              	.LVL140:
 1489              		.thumb
 1490              		.syntax unified
 1491              	.LBE141:
 1492              	.LBE140:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1493              		.loc 1 1533 0 discriminator 4
 1494 0024 10BD     		pop	{r4, pc}
 1495              	.LVL141:
 1496              	.L135:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1497              		.loc 1 1527 0 discriminator 1
 1498 0026 014A     		ldr	r2, .L136
 1499 0028 1468     		ldr	r4, [r2]
 1500              	.LVL142:
 1501 002a F8E7     		b	.L133
 1502              	.L137:
 1503              		.align	2
 1504              	.L136:
 1505 002c 00000000 		.word	.LANCHOR10
 1506              		.cfi_endproc
 1507              	.LFE13:
 1509              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1510              		.align	1
 1511              		.global	vTaskPrioritySet
 1512              		.syntax unified
 1513              		.thumb
 1514              		.thumb_func
 1515              		.fpu fpv5-d16
 1517              	vTaskPrioritySet:
 1518              	.LFB14:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1519              		.loc 1 1541 0
 1520              		.cfi_startproc
 1521              		@ args = 0, pretend = 0, frame = 0
 1522              		@ frame_needed = 0, uses_anonymous_args = 0
 1523              	.LVL143:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1524              		.loc 1 1546 0
ARM GAS  /tmp/ccu8P93f.s 			page 127


 1525 0000 3729     		cmp	r1, #55
 1526 0002 08D9     		bls	.L139
 1527              	.LBB142:
 1528              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1529              		.loc 2 195 0
 1530              		.syntax unified
 1531              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1532 0004 4FF05003 			mov r3, #80												
 1533 0008 83F31188 		msr basepri, r3											
 1534 000c BFF36F8F 		isb														
 1535 0010 BFF34F8F 		dsb														
 1536              	
 1537              	@ 0 "" 2
 1538              	.LVL144:
 1539              		.thumb
 1540              		.syntax unified
 1541              	.L140:
 1542 0014 FEE7     		b	.L140
 1543              	.L139:
 1544              	.LBE143:
 1545              	.LBE142:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1546              		.loc 1 1541 0
 1547 0016 70B5     		push	{r4, r5, r6, lr}
 1548              	.LCFI19:
 1549              		.cfi_def_cfa_offset 16
 1550              		.cfi_offset 4, -16
 1551              		.cfi_offset 5, -12
 1552              		.cfi_offset 6, -8
 1553              		.cfi_offset 14, -4
 1554 0018 0446     		mov	r4, r0
 1555 001a 0D46     		mov	r5, r1
 1556              	.LVL145:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1557              		.loc 1 1558 0
 1558 001c FFF7FEFF 		bl	vPortEnterCritical
 1559              	.LVL146:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1560              		.loc 1 1562 0
 1561 0020 0CB9     		cbnz	r4, .L141
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1562              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1563 0022 264B     		ldr	r3, .L154
 1564 0024 1C68     		ldr	r4, [r3]
 1565              	.LVL147:
 1566              	.L141:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1567              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1568 0026 E26C     		ldr	r2, [r4, #76]
 1569              	.LVL148:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1570              		.loc 1 1576 0 discriminator 4
 1571 0028 9542     		cmp	r5, r2
 1572 002a 37D0     		beq	.L142
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1573              		.loc 1 1580 0
ARM GAS  /tmp/ccu8P93f.s 			page 128


 1574 002c 39D9     		bls	.L143
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1575              		.loc 1 1582 0
 1576 002e 234B     		ldr	r3, .L154
 1577 0030 1B68     		ldr	r3, [r3]
 1578 0032 A342     		cmp	r3, r4
 1579 0034 3BD0     		beq	.L149
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1580              		.loc 1 1587 0
 1581 0036 214B     		ldr	r3, .L154
 1582 0038 1B68     		ldr	r3, [r3]
 1583 003a DB6A     		ldr	r3, [r3, #44]
 1584 003c AB42     		cmp	r3, r5
 1585 003e 38D9     		bls	.L150
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1586              		.loc 1 1544 0
 1587 0040 0026     		movs	r6, #0
 1588              	.L144:
 1589              	.LVL149:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1590              		.loc 1 1620 0
 1591 0042 E36A     		ldr	r3, [r4, #44]
 1592              	.LVL150:
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1593              		.loc 1 1626 0
 1594 0044 9A42     		cmp	r2, r3
 1595 0046 00D1     		bne	.L145
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1596              		.loc 1 1628 0
 1597 0048 E562     		str	r5, [r4, #44]
 1598              	.L145:
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1599              		.loc 1 1636 0
 1600 004a E564     		str	r5, [r4, #76]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1601              		.loc 1 1646 0
 1602 004c A269     		ldr	r2, [r4, #24]
 1603              	.LVL151:
 1604 004e 002A     		cmp	r2, #0
 1605 0050 02DB     		blt	.L146
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1606              		.loc 1 1648 0
 1607 0052 C5F13805 		rsb	r5, r5, #56
 1608              	.LVL152:
 1609 0056 A561     		str	r5, [r4, #24]
 1610              	.L146:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1611              		.loc 1 1659 0
 1612 0058 6269     		ldr	r2, [r4, #20]
 1613 005a 1949     		ldr	r1, .L154+4
 1614 005c 1420     		movs	r0, #20
 1615 005e 00FB0313 		mla	r3, r0, r3, r1
 1616              	.LVL153:
 1617 0062 9A42     		cmp	r2, r3
 1618 0064 11D1     		bne	.L147
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1619              		.loc 1 1664 0
ARM GAS  /tmp/ccu8P93f.s 			page 129


 1620 0066 251D     		adds	r5, r4, #4
 1621 0068 2846     		mov	r0, r5
 1622 006a FFF7FEFF 		bl	uxListRemove
 1623              	.LVL154:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1624              		.loc 1 1675 0
 1625 006e E36A     		ldr	r3, [r4, #44]
 1626 0070 144A     		ldr	r2, .L154+8
 1627 0072 1268     		ldr	r2, [r2]
 1628 0074 9342     		cmp	r3, r2
 1629 0076 01D9     		bls	.L148
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1630              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1631 0078 124A     		ldr	r2, .L154+8
 1632 007a 1360     		str	r3, [r2]
 1633              	.L148:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1634              		.loc 1 1675 0 discriminator 3
 1635 007c 2946     		mov	r1, r5
 1636 007e 104A     		ldr	r2, .L154+4
 1637 0080 1420     		movs	r0, #20
 1638 0082 00FB0320 		mla	r0, r0, r3, r2
 1639 0086 FFF7FEFF 		bl	vListInsertEnd
 1640              	.LVL155:
 1641              	.L147:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1642              		.loc 1 1682 0 is_stmt 1
 1643 008a 3EB1     		cbz	r6, .L142
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1644              		.loc 1 1684 0
 1645 008c 0E4B     		ldr	r3, .L154+12
 1646 008e 4FF08052 		mov	r2, #268435456
 1647 0092 1A60     		str	r2, [r3]
 1648              		.syntax unified
 1649              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1650 0094 BFF34F8F 		dsb
 1651              	@ 0 "" 2
 1652              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1653 0098 BFF36F8F 		isb
 1654              	@ 0 "" 2
 1655              	.LVL156:
 1656              		.thumb
 1657              		.syntax unified
 1658              	.L142:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1659              		.loc 1 1696 0
 1660 009c FFF7FEFF 		bl	vPortExitCritical
 1661              	.LVL157:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1662              		.loc 1 1697 0
 1663 00a0 70BD     		pop	{r4, r5, r6, pc}
 1664              	.LVL158:
 1665              	.L143:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1666              		.loc 1 1603 0
 1667 00a2 064B     		ldr	r3, .L154
 1668 00a4 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccu8P93f.s 			page 130


 1669 00a6 A342     		cmp	r3, r4
 1670 00a8 05D0     		beq	.L151
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1671              		.loc 1 1544 0
 1672 00aa 0026     		movs	r6, #0
 1673 00ac C9E7     		b	.L144
 1674              	.L149:
 1675 00ae 0026     		movs	r6, #0
 1676 00b0 C7E7     		b	.L144
 1677              	.L150:
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1678              		.loc 1 1589 0
 1679 00b2 0126     		movs	r6, #1
 1680 00b4 C5E7     		b	.L144
 1681              	.L151:
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1682              		.loc 1 1608 0
 1683 00b6 0126     		movs	r6, #1
 1684 00b8 C3E7     		b	.L144
 1685              	.L155:
 1686 00ba 00BF     		.align	2
 1687              	.L154:
 1688 00bc 00000000 		.word	.LANCHOR10
 1689 00c0 00000000 		.word	.LANCHOR4
 1690 00c4 00000000 		.word	.LANCHOR13
 1691 00c8 04ED00E0 		.word	-536810236
 1692              		.cfi_endproc
 1693              	.LFE14:
 1695              		.section	.text.vTaskResume,"ax",%progbits
 1696              		.align	1
 1697              		.global	vTaskResume
 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv5-d16
 1703              	vTaskResume:
 1704              	.LFB17:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1705              		.loc 1 1852 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              	.LVL159:
 1710 0000 38B5     		push	{r3, r4, r5, lr}
 1711              	.LCFI20:
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 3, -16
 1714              		.cfi_offset 4, -12
 1715              		.cfi_offset 5, -8
 1716              		.cfi_offset 14, -4
 1717              	.LVL160:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1718              		.loc 1 1856 0
 1719 0002 68B1     		cbz	r0, .L163
 1720 0004 0446     		mov	r4, r0
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1721              		.loc 1 1860 0
ARM GAS  /tmp/ccu8P93f.s 			page 131


 1722 0006 1B4B     		ldr	r3, .L165
 1723 0008 1B68     		ldr	r3, [r3]
 1724 000a 8342     		cmp	r3, r0
 1725 000c 07D0     		beq	.L156
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1726              		.loc 1 1862 0
 1727 000e FFF7FEFF 		bl	vPortEnterCritical
 1728              	.LVL161:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1729              		.loc 1 1864 0
 1730 0012 2046     		mov	r0, r4
 1731 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1732              	.LVL162:
 1733 0018 58B9     		cbnz	r0, .L164
 1734              	.L160:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1735              		.loc 1 1891 0
 1736 001a FFF7FEFF 		bl	vPortExitCritical
 1737              	.LVL163:
 1738              	.L156:
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1739              		.loc 1 1897 0
 1740 001e 38BD     		pop	{r3, r4, r5, pc}
 1741              	.LVL164:
 1742              	.L163:
 1743              	.LBB144:
 1744              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1745              		.loc 2 195 0
 1746              		.syntax unified
 1747              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1748 0020 4FF05003 			mov r3, #80												
 1749 0024 83F31188 		msr basepri, r3											
 1750 0028 BFF36F8F 		isb														
 1751 002c BFF34F8F 		dsb														
 1752              	
 1753              	@ 0 "" 2
 1754              	.LVL165:
 1755              		.thumb
 1756              		.syntax unified
 1757              	.L158:
 1758 0030 FEE7     		b	.L158
 1759              	.LVL166:
 1760              	.L164:
 1761              	.LBE145:
 1762              	.LBE144:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1763              		.loc 1 1870 0
 1764 0032 251D     		adds	r5, r4, #4
 1765 0034 2846     		mov	r0, r5
 1766 0036 FFF7FEFF 		bl	uxListRemove
 1767              	.LVL167:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1768              		.loc 1 1871 0
 1769 003a E36A     		ldr	r3, [r4, #44]
 1770 003c 0E4A     		ldr	r2, .L165+4
 1771 003e 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccu8P93f.s 			page 132


 1772 0040 9342     		cmp	r3, r2
 1773 0042 01D9     		bls	.L161
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1774              		.loc 1 1871 0 is_stmt 0 discriminator 1
 1775 0044 0C4A     		ldr	r2, .L165+4
 1776 0046 1360     		str	r3, [r2]
 1777              	.L161:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1778              		.loc 1 1871 0 discriminator 3
 1779 0048 2946     		mov	r1, r5
 1780 004a 0C4A     		ldr	r2, .L165+8
 1781 004c 1420     		movs	r0, #20
 1782 004e 00FB0320 		mla	r0, r0, r3, r2
 1783 0052 FFF7FEFF 		bl	vListInsertEnd
 1784              	.LVL168:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1785              		.loc 1 1874 0 is_stmt 1 discriminator 3
 1786 0056 E26A     		ldr	r2, [r4, #44]
 1787 0058 064B     		ldr	r3, .L165
 1788 005a 1B68     		ldr	r3, [r3]
 1789 005c DB6A     		ldr	r3, [r3, #44]
 1790 005e 9A42     		cmp	r2, r3
 1791 0060 DBD3     		bcc	.L160
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1792              		.loc 1 1879 0
 1793 0062 074B     		ldr	r3, .L165+12
 1794 0064 4FF08052 		mov	r2, #268435456
 1795 0068 1A60     		str	r2, [r3]
 1796              		.syntax unified
 1797              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1798 006a BFF34F8F 		dsb
 1799              	@ 0 "" 2
 1800              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1801 006e BFF36F8F 		isb
 1802              	@ 0 "" 2
 1803              		.thumb
 1804              		.syntax unified
 1805 0072 D2E7     		b	.L160
 1806              	.L166:
 1807              		.align	2
 1808              	.L165:
 1809 0074 00000000 		.word	.LANCHOR10
 1810 0078 00000000 		.word	.LANCHOR13
 1811 007c 00000000 		.word	.LANCHOR4
 1812 0080 04ED00E0 		.word	-536810236
 1813              		.cfi_endproc
 1814              	.LFE17:
 1816              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1817              		.align	1
 1818              		.global	xTaskResumeFromISR
 1819              		.syntax unified
 1820              		.thumb
 1821              		.thumb_func
 1822              		.fpu fpv5-d16
 1824              	xTaskResumeFromISR:
 1825              	.LFB18:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
ARM GAS  /tmp/ccu8P93f.s 			page 133


 1826              		.loc 1 1906 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830              	.LVL169:
 1831 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1832              	.LCFI21:
 1833              		.cfi_def_cfa_offset 24
 1834              		.cfi_offset 3, -24
 1835              		.cfi_offset 4, -20
 1836              		.cfi_offset 5, -16
 1837              		.cfi_offset 6, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840              	.LVL170:
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1841              		.loc 1 1911 0
 1842 0002 40B9     		cbnz	r0, .L168
 1843              	.LBB146:
 1844              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1845              		.loc 2 195 0
 1846              		.syntax unified
 1847              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1848 0004 4FF05003 			mov r3, #80												
 1849 0008 83F31188 		msr basepri, r3											
 1850 000c BFF36F8F 		isb														
 1851 0010 BFF34F8F 		dsb														
 1852              	
 1853              	@ 0 "" 2
 1854              	.LVL171:
 1855              		.thumb
 1856              		.syntax unified
 1857              	.L169:
 1858 0014 FEE7     		b	.L169
 1859              	.L168:
 1860 0016 0446     		mov	r4, r0
 1861              	.LBE147:
 1862              	.LBE146:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1863              		.loc 1 1929 0
 1864 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1865              	.LVL172:
 1866              	.LBB148:
 1867              	.LBB149:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1868              		.loc 2 211 0
 1869              		.syntax unified
 1870              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1871 001c EFF31187 			mrs r7, basepri											
 1872 0020 4FF05003 		mov r3, #80												
 1873 0024 83F31188 		msr basepri, r3											
 1874 0028 BFF36F8F 		isb														
 1875 002c BFF34F8F 		dsb														
 1876              	
 1877              	@ 0 "" 2
 1878              		.thumb
ARM GAS  /tmp/ccu8P93f.s 			page 134


 1879              		.syntax unified
 1880              	.LBE149:
 1881              	.LBE148:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1882              		.loc 1 1933 0
 1883 0030 2046     		mov	r0, r4
 1884 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1885              	.LVL173:
 1886 0036 40B3     		cbz	r0, .L174
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1887              		.loc 1 1938 0
 1888 0038 154B     		ldr	r3, .L177
 1889 003a 1B68     		ldr	r3, [r3]
 1890 003c F3B9     		cbnz	r3, .L171
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1891              		.loc 1 1942 0
 1892 003e E26A     		ldr	r2, [r4, #44]
 1893 0040 144B     		ldr	r3, .L177+4
 1894 0042 1B68     		ldr	r3, [r3]
 1895 0044 DB6A     		ldr	r3, [r3, #44]
 1896 0046 9A42     		cmp	r2, r3
 1897 0048 16D2     		bcs	.L175
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1898              		.loc 1 1907 0
 1899 004a 0025     		movs	r5, #0
 1900              	.L172:
 1901              	.LVL174:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1902              		.loc 1 1951 0
 1903 004c 261D     		adds	r6, r4, #4
 1904 004e 3046     		mov	r0, r6
 1905 0050 FFF7FEFF 		bl	uxListRemove
 1906              	.LVL175:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1907              		.loc 1 1952 0
 1908 0054 E36A     		ldr	r3, [r4, #44]
 1909 0056 104A     		ldr	r2, .L177+8
 1910 0058 1268     		ldr	r2, [r2]
 1911 005a 9342     		cmp	r3, r2
 1912 005c 01D9     		bls	.L173
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1913              		.loc 1 1952 0 is_stmt 0 discriminator 1
 1914 005e 0E4A     		ldr	r2, .L177+8
 1915 0060 1360     		str	r3, [r2]
 1916              	.L173:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1917              		.loc 1 1952 0 discriminator 3
 1918 0062 3146     		mov	r1, r6
 1919 0064 0D4A     		ldr	r2, .L177+12
 1920 0066 1420     		movs	r0, #20
 1921 0068 00FB0320 		mla	r0, r0, r3, r2
 1922 006c FFF7FEFF 		bl	vListInsertEnd
 1923              	.LVL176:
 1924              	.L170:
 1925              	.LBB150:
 1926              	.LBB151:
 1927              		.loc 2 229 0 is_stmt 1
ARM GAS  /tmp/ccu8P93f.s 			page 135


 1928              		.syntax unified
 1929              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1930 0070 87F31188 			msr basepri, r7	
 1931              	@ 0 "" 2
 1932              	.LVL177:
 1933              		.thumb
 1934              		.syntax unified
 1935              	.LBE151:
 1936              	.LBE150:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1937              		.loc 1 1970 0
 1938 0074 2846     		mov	r0, r5
 1939 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1940              	.LVL178:
 1941              	.L175:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1942              		.loc 1 1944 0
 1943 0078 0125     		movs	r5, #1
 1944 007a E7E7     		b	.L172
 1945              	.L171:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1946              		.loc 1 1959 0
 1947 007c 04F11801 		add	r1, r4, #24
 1948 0080 0748     		ldr	r0, .L177+16
 1949 0082 FFF7FEFF 		bl	vListInsertEnd
 1950              	.LVL179:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1951              		.loc 1 1907 0
 1952 0086 0025     		movs	r5, #0
 1953 0088 F2E7     		b	.L170
 1954              	.L174:
 1955 008a 0025     		movs	r5, #0
 1956 008c F0E7     		b	.L170
 1957              	.L178:
 1958 008e 00BF     		.align	2
 1959              	.L177:
 1960 0090 00000000 		.word	.LANCHOR16
 1961 0094 00000000 		.word	.LANCHOR10
 1962 0098 00000000 		.word	.LANCHOR13
 1963 009c 00000000 		.word	.LANCHOR4
 1964 00a0 00000000 		.word	.LANCHOR1
 1965              		.cfi_endproc
 1966              	.LFE18:
 1968              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1969              		.align	1
 1970              		.global	vTaskStartScheduler
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu fpv5-d16
 1976              	vTaskStartScheduler:
 1977              	.LFB19:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1978              		.loc 1 1976 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 16
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccu8P93f.s 			page 136


 1982 0000 10B5     		push	{r4, lr}
 1983              	.LCFI22:
 1984              		.cfi_def_cfa_offset 8
 1985              		.cfi_offset 4, -8
 1986              		.cfi_offset 14, -4
 1987 0002 88B0     		sub	sp, sp, #32
 1988              	.LCFI23:
 1989              		.cfi_def_cfa_offset 40
 1990              	.LBB152:
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1991              		.loc 1 1982 0
 1992 0004 0024     		movs	r4, #0
 1993 0006 0594     		str	r4, [sp, #20]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1994              		.loc 1 1983 0
 1995 0008 0694     		str	r4, [sp, #24]
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1996              		.loc 1 1988 0
 1997 000a 07AA     		add	r2, sp, #28
 1998 000c 06A9     		add	r1, sp, #24
 1999 000e 05A8     		add	r0, sp, #20
 2000 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2001              	.LVL180:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2002              		.loc 1 1989 0
 2003 0014 059B     		ldr	r3, [sp, #20]
 2004 0016 0293     		str	r3, [sp, #8]
 2005 0018 069B     		ldr	r3, [sp, #24]
 2006 001a 0193     		str	r3, [sp, #4]
 2007 001c 0094     		str	r4, [sp]
 2008 001e 2346     		mov	r3, r4
 2009 0020 079A     		ldr	r2, [sp, #28]
 2010 0022 1749     		ldr	r1, .L188
 2011 0024 1748     		ldr	r0, .L188+4
 2012 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2013              	.LVL181:
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2014              		.loc 1 1997 0
 2015 002a 40B1     		cbz	r0, .L180
 2016              	.LVL182:
 2017              	.LBE152:
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2018              		.loc 1 2022 0
 2019 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 2020              	.LVL183:
 2021              	.L181:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2022              		.loc 1 2031 0
 2023 0030 0128     		cmp	r0, #1
 2024 0032 06D0     		beq	.L186
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2025              		.loc 1 2090 0
 2026 0034 B0F1FF3F 		cmp	r0, #-1
 2027 0038 18D0     		beq	.L187
 2028              	.LVL184:
 2029              	.L179:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccu8P93f.s 			page 137


 2030              		.loc 1 2096 0
 2031 003a 08B0     		add	sp, sp, #32
 2032              	.LCFI24:
 2033              		.cfi_remember_state
 2034              		.cfi_def_cfa_offset 8
 2035              		@ sp needed
 2036 003c 10BD     		pop	{r4, pc}
 2037              	.L180:
 2038              	.LCFI25:
 2039              		.cfi_restore_state
 2040              	.LVL185:
 2041              	.LBB153:
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2042              		.loc 1 2003 0
 2043 003e 0020     		movs	r0, #0
 2044 0040 F6E7     		b	.L181
 2045              	.LVL186:
 2046              	.L186:
 2047              	.LBE153:
 2048              	.LBB154:
 2049              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2050              		.loc 2 195 0
 2051              		.syntax unified
 2052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2053 0042 4FF05003 			mov r3, #80												
 2054 0046 83F31188 		msr basepri, r3											
 2055 004a BFF36F8F 		isb														
 2056 004e BFF34F8F 		dsb														
 2057              	
 2058              	@ 0 "" 2
 2059              		.thumb
 2060              		.syntax unified
 2061              	.LBE155:
 2062              	.LBE154:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2063              		.loc 1 2059 0
 2064 0052 0D4B     		ldr	r3, .L188+8
 2065 0054 4FF0FF32 		mov	r2, #-1
 2066 0058 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2067              		.loc 1 2060 0
 2068 005a 0C4B     		ldr	r3, .L188+12
 2069 005c 0122     		movs	r2, #1
 2070 005e 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2071              		.loc 1 2061 0
 2072 0060 0B4B     		ldr	r3, .L188+16
 2073 0062 0022     		movs	r2, #0
 2074 0064 1A60     		str	r2, [r3]
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2075              		.loc 1 2075 0
 2076 0066 FFF7FEFF 		bl	xPortStartScheduler
 2077              	.LVL187:
 2078 006a E6E7     		b	.L179
 2079              	.LVL188:
 2080              	.L187:
ARM GAS  /tmp/ccu8P93f.s 			page 138


 2081              	.LBB156:
 2082              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2083              		.loc 2 195 0
 2084              		.syntax unified
 2085              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2086 006c 4FF05003 			mov r3, #80												
 2087 0070 83F31188 		msr basepri, r3											
 2088 0074 BFF36F8F 		isb														
 2089 0078 BFF34F8F 		dsb														
 2090              	
 2091              	@ 0 "" 2
 2092              	.LVL189:
 2093              		.thumb
 2094              		.syntax unified
 2095              	.L184:
 2096 007c FEE7     		b	.L184
 2097              	.L189:
 2098 007e 00BF     		.align	2
 2099              	.L188:
 2100 0080 00000000 		.word	.LC0
 2101 0084 00000000 		.word	prvIdleTask
 2102 0088 00000000 		.word	.LANCHOR3
 2103 008c 00000000 		.word	.LANCHOR11
 2104 0090 00000000 		.word	.LANCHOR15
 2105              	.LBE157:
 2106              	.LBE156:
 2107              		.cfi_endproc
 2108              	.LFE19:
 2110              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2111              		.align	1
 2112              		.global	vTaskEndScheduler
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2116              		.fpu fpv5-d16
 2118              	vTaskEndScheduler:
 2119              	.LFB20:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2120              		.loc 1 2100 0
 2121              		.cfi_startproc
 2122              		@ args = 0, pretend = 0, frame = 0
 2123              		@ frame_needed = 0, uses_anonymous_args = 0
 2124 0000 08B5     		push	{r3, lr}
 2125              	.LCFI26:
 2126              		.cfi_def_cfa_offset 8
 2127              		.cfi_offset 3, -8
 2128              		.cfi_offset 14, -4
 2129              	.LBB158:
 2130              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2131              		.loc 2 195 0
 2132              		.syntax unified
 2133              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2134 0002 4FF05003 			mov r3, #80												
 2135 0006 83F31188 		msr basepri, r3											
 2136 000a BFF36F8F 		isb														
ARM GAS  /tmp/ccu8P93f.s 			page 139


 2137 000e BFF34F8F 		dsb														
 2138              	
 2139              	@ 0 "" 2
 2140              		.thumb
 2141              		.syntax unified
 2142              	.LBE159:
 2143              	.LBE158:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2144              		.loc 1 2105 0
 2145 0012 034B     		ldr	r3, .L192
 2146 0014 0022     		movs	r2, #0
 2147 0016 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2148              		.loc 1 2106 0
 2149 0018 FFF7FEFF 		bl	vPortEndScheduler
 2150              	.LVL190:
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2151              		.loc 1 2107 0
 2152 001c 08BD     		pop	{r3, pc}
 2153              	.L193:
 2154 001e 00BF     		.align	2
 2155              	.L192:
 2156 0020 00000000 		.word	.LANCHOR11
 2157              		.cfi_endproc
 2158              	.LFE20:
 2160              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2161              		.align	1
 2162              		.global	vTaskSuspendAll
 2163              		.syntax unified
 2164              		.thumb
 2165              		.thumb_func
 2166              		.fpu fpv5-d16
 2168              	vTaskSuspendAll:
 2169              	.LFB21:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2170              		.loc 1 2111 0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2175              		.loc 1 2123 0
 2176 0000 024A     		ldr	r2, .L195
 2177 0002 1368     		ldr	r3, [r2]
 2178 0004 0133     		adds	r3, r3, #1
 2179 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2180              		.loc 1 2127 0
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2181              		.loc 1 2128 0
 2182 0008 7047     		bx	lr
 2183              	.L196:
 2184 000a 00BF     		.align	2
 2185              	.L195:
 2186 000c 00000000 		.word	.LANCHOR16
 2187              		.cfi_endproc
 2188              	.LFE21:
ARM GAS  /tmp/ccu8P93f.s 			page 140


 2190              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2191              		.align	1
 2192              		.global	xTaskGetTickCount
 2193              		.syntax unified
 2194              		.thumb
 2195              		.thumb_func
 2196              		.fpu fpv5-d16
 2198              	xTaskGetTickCount:
 2199              	.LFB23:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2200              		.loc 1 2305 0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 0
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 2204              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2205              		.loc 1 2311 0
 2206 0000 014B     		ldr	r3, .L198
 2207 0002 1868     		ldr	r0, [r3]
 2208              	.LVL191:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2209              		.loc 1 2316 0
 2210 0004 7047     		bx	lr
 2211              	.L199:
 2212 0006 00BF     		.align	2
 2213              	.L198:
 2214 0008 00000000 		.word	.LANCHOR15
 2215              		.cfi_endproc
 2216              	.LFE23:
 2218              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2219              		.align	1
 2220              		.global	xTaskGetTickCountFromISR
 2221              		.syntax unified
 2222              		.thumb
 2223              		.thumb_func
 2224              		.fpu fpv5-d16
 2226              	xTaskGetTickCountFromISR:
 2227              	.LFB24:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2228              		.loc 1 2320 0
 2229              		.cfi_startproc
 2230              		@ args = 0, pretend = 0, frame = 0
 2231              		@ frame_needed = 0, uses_anonymous_args = 0
 2232 0000 08B5     		push	{r3, lr}
 2233              	.LCFI27:
 2234              		.cfi_def_cfa_offset 8
 2235              		.cfi_offset 3, -8
 2236              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2237              		.loc 1 2338 0
 2238 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2239              	.LVL192:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2240              		.loc 1 2342 0
 2241 0006 014B     		ldr	r3, .L202
 2242 0008 1868     		ldr	r0, [r3]
 2243              	.LVL193:
ARM GAS  /tmp/ccu8P93f.s 			page 141


2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2244              		.loc 1 2347 0
 2245 000a 08BD     		pop	{r3, pc}
 2246              	.L203:
 2247              		.align	2
 2248              	.L202:
 2249 000c 00000000 		.word	.LANCHOR15
 2250              		.cfi_endproc
 2251              	.LFE24:
 2253              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2254              		.align	1
 2255              		.global	uxTaskGetNumberOfTasks
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu fpv5-d16
 2261              	uxTaskGetNumberOfTasks:
 2262              	.LFB25:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2263              		.loc 1 2351 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2268              		.loc 1 2354 0
 2269 0000 014B     		ldr	r3, .L205
 2270 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2271              		.loc 1 2355 0
 2272 0004 7047     		bx	lr
 2273              	.L206:
 2274 0006 00BF     		.align	2
 2275              	.L205:
 2276 0008 00000000 		.word	.LANCHOR9
 2277              		.cfi_endproc
 2278              	.LFE25:
 2280              		.section	.text.pcTaskGetName,"ax",%progbits
 2281              		.align	1
 2282              		.global	pcTaskGetName
 2283              		.syntax unified
 2284              		.thumb
 2285              		.thumb_func
 2286              		.fpu fpv5-d16
 2288              	pcTaskGetName:
 2289              	.LFB26:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2290              		.loc 1 2359 0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 0
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
 2294              		@ link register save eliminated.
 2295              	.LVL194:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2296              		.loc 1 2364 0
 2297 0000 0346     		mov	r3, r0
 2298 0002 18B1     		cbz	r0, .L211
ARM GAS  /tmp/ccu8P93f.s 			page 142


 2299              	.LVL195:
 2300              	.L208:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2301              		.loc 1 2365 0 discriminator 4
 2302 0004 2BB1     		cbz	r3, .L212
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2303              		.loc 1 2367 0
 2304 0006 03F13400 		add	r0, r3, #52
 2305 000a 7047     		bx	lr
 2306              	.LVL196:
 2307              	.L211:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2308              		.loc 1 2364 0 discriminator 1
 2309 000c 054B     		ldr	r3, .L213
 2310 000e 1B68     		ldr	r3, [r3]
 2311              	.LVL197:
 2312 0010 F8E7     		b	.L208
 2313              	.LVL198:
 2314              	.L212:
 2315              	.LBB160:
 2316              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2317              		.loc 2 195 0
 2318              		.syntax unified
 2319              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2320 0012 4FF05003 			mov r3, #80												
 2321 0016 83F31188 		msr basepri, r3											
 2322 001a BFF36F8F 		isb														
 2323 001e BFF34F8F 		dsb														
 2324              	
 2325              	@ 0 "" 2
 2326              	.LVL199:
 2327              		.thumb
 2328              		.syntax unified
 2329              	.L210:
 2330 0022 FEE7     		b	.L210
 2331              	.L214:
 2332              		.align	2
 2333              	.L213:
 2334 0024 00000000 		.word	.LANCHOR10
 2335              	.LBE161:
 2336              	.LBE160:
 2337              		.cfi_endproc
 2338              	.LFE26:
 2340              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2341              		.align	1
 2342              		.global	xTaskIncrementTick
 2343              		.syntax unified
 2344              		.thumb
 2345              		.thumb_func
 2346              		.fpu fpv5-d16
 2348              	xTaskIncrementTick:
 2349              	.LFB29:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2350              		.loc 1 2708 0
 2351              		.cfi_startproc
 2352              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccu8P93f.s 			page 143


 2353              		@ frame_needed = 0, uses_anonymous_args = 0
 2354 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2355              	.LCFI28:
 2356              		.cfi_def_cfa_offset 24
 2357              		.cfi_offset 3, -24
 2358              		.cfi_offset 4, -20
 2359              		.cfi_offset 5, -16
 2360              		.cfi_offset 6, -12
 2361              		.cfi_offset 7, -8
 2362              		.cfi_offset 14, -4
 2363              	.LVL200:
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2364              		.loc 1 2717 0
 2365 0002 3A4B     		ldr	r3, .L237
 2366 0004 1B68     		ldr	r3, [r3]
 2367 0006 002B     		cmp	r3, #0
 2368 0008 69D1     		bne	.L216
 2369              	.LBB162:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2370              		.loc 1 2721 0
 2371 000a 394B     		ldr	r3, .L237+4
 2372 000c 1D68     		ldr	r5, [r3]
 2373 000e 0135     		adds	r5, r5, #1
 2374              	.LVL201:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2375              		.loc 1 2725 0
 2376 0010 1D60     		str	r5, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2377              		.loc 1 2727 0
 2378 0012 C5B9     		cbnz	r5, .L217
 2379              	.LBB163:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2380              		.loc 1 2729 0
 2381 0014 374B     		ldr	r3, .L237+8
 2382 0016 1B68     		ldr	r3, [r3]
 2383 0018 1B68     		ldr	r3, [r3]
 2384 001a 43B1     		cbz	r3, .L218
 2385              	.LBB164:
 2386              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2387              		.loc 2 195 0
 2388              		.syntax unified
 2389              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2390 001c 4FF05003 			mov r3, #80												
 2391 0020 83F31188 		msr basepri, r3											
 2392 0024 BFF36F8F 		isb														
 2393 0028 BFF34F8F 		dsb														
 2394              	
 2395              	@ 0 "" 2
 2396              	.LVL202:
 2397              		.thumb
 2398              		.syntax unified
 2399              	.L219:
 2400 002c FEE7     		b	.L219
 2401              	.L218:
 2402              	.LBE165:
 2403              	.LBE164:
ARM GAS  /tmp/ccu8P93f.s 			page 144


2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2404              		.loc 1 2729 0 discriminator 2
 2405 002e 314A     		ldr	r2, .L237+8
 2406 0030 1168     		ldr	r1, [r2]
 2407              	.LVL203:
 2408 0032 314B     		ldr	r3, .L237+12
 2409 0034 1868     		ldr	r0, [r3]
 2410 0036 1060     		str	r0, [r2]
 2411 0038 1960     		str	r1, [r3]
 2412 003a 304A     		ldr	r2, .L237+16
 2413 003c 1368     		ldr	r3, [r2]
 2414 003e 0133     		adds	r3, r3, #1
 2415 0040 1360     		str	r3, [r2]
 2416 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2417              	.LVL204:
 2418              	.L217:
 2419              	.LBE163:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2420              		.loc 1 2740 0
 2421 0046 2E4B     		ldr	r3, .L237+20
 2422 0048 1B68     		ldr	r3, [r3]
 2423 004a AB42     		cmp	r3, r5
 2424 004c 3DD9     		bls	.L230
 2425              	.LBE162:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2426              		.loc 1 2711 0
 2427 004e 0024     		movs	r4, #0
 2428              	.LVL205:
 2429              	.L221:
 2430              	.LBB166:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2431              		.loc 1 2823 0
 2432 0050 2C4B     		ldr	r3, .L237+24
 2433 0052 1B68     		ldr	r3, [r3]
 2434 0054 DB6A     		ldr	r3, [r3, #44]
 2435 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2436 005a 9A00     		lsls	r2, r3, #2
 2437 005c 2A4B     		ldr	r3, .L237+28
 2438 005e 9B58     		ldr	r3, [r3, r2]
 2439 0060 012B     		cmp	r3, #1
 2440 0062 00D9     		bls	.L228
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2441              		.loc 1 2825 0
 2442 0064 0124     		movs	r4, #1
 2443              	.LVL206:
 2444              	.L228:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2445              		.loc 1 2851 0
 2446 0066 294B     		ldr	r3, .L237+32
 2447 0068 1B68     		ldr	r3, [r3]
 2448 006a 002B     		cmp	r3, #0
 2449 006c 3CD0     		beq	.L215
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2450              		.loc 1 2853 0
 2451 006e 0124     		movs	r4, #1
 2452              	.LVL207:
 2453              	.LBE166:
ARM GAS  /tmp/ccu8P93f.s 			page 145


2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2454              		.loc 1 2875 0
 2455 0070 3AE0     		b	.L215
 2456              	.LVL208:
 2457              	.L231:
 2458              	.LBB167:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2459              		.loc 1 2806 0
 2460 0072 0124     		movs	r4, #1
 2461              	.LVL209:
 2462              	.L220:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2463              		.loc 1 2744 0
 2464 0074 1F4B     		ldr	r3, .L237+8
 2465 0076 1B68     		ldr	r3, [r3]
 2466 0078 1B68     		ldr	r3, [r3]
 2467 007a 43B3     		cbz	r3, .L235
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2468              		.loc 1 2760 0
 2469 007c 1D4B     		ldr	r3, .L237+8
 2470 007e 1B68     		ldr	r3, [r3]
 2471 0080 DB68     		ldr	r3, [r3, #12]
 2472 0082 DE68     		ldr	r6, [r3, #12]
 2473              	.LVL210:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2474              		.loc 1 2761 0
 2475 0084 7368     		ldr	r3, [r6, #4]
 2476              	.LVL211:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2477              		.loc 1 2763 0
 2478 0086 9D42     		cmp	r5, r3
 2479 0088 26D3     		bcc	.L236
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 2779 0
 2481 008a 371D     		adds	r7, r6, #4
 2482 008c 3846     		mov	r0, r7
 2483 008e FFF7FEFF 		bl	uxListRemove
 2484              	.LVL212:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2485              		.loc 1 2783 0
 2486 0092 B36A     		ldr	r3, [r6, #40]
 2487 0094 1BB1     		cbz	r3, .L224
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2488              		.loc 1 2785 0
 2489 0096 06F11800 		add	r0, r6, #24
 2490 009a FFF7FEFF 		bl	uxListRemove
 2491              	.LVL213:
 2492              	.L224:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2493              		.loc 1 2794 0
 2494 009e F36A     		ldr	r3, [r6, #44]
 2495 00a0 1B4A     		ldr	r2, .L237+36
 2496 00a2 1268     		ldr	r2, [r2]
 2497 00a4 9342     		cmp	r3, r2
 2498 00a6 01D9     		bls	.L225
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2499              		.loc 1 2794 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccu8P93f.s 			page 146


 2500 00a8 194A     		ldr	r2, .L237+36
 2501 00aa 1360     		str	r3, [r2]
 2502              	.L225:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2503              		.loc 1 2794 0 discriminator 3
 2504 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 2505 00b0 9A00     		lsls	r2, r3, #2
 2506 00b2 3946     		mov	r1, r7
 2507 00b4 1448     		ldr	r0, .L237+28
 2508 00b6 1044     		add	r0, r0, r2
 2509 00b8 FFF7FEFF 		bl	vListInsertEnd
 2510              	.LVL214:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2511              		.loc 1 2804 0 is_stmt 1 discriminator 3
 2512 00bc F26A     		ldr	r2, [r6, #44]
 2513 00be 114B     		ldr	r3, .L237+24
 2514 00c0 1B68     		ldr	r3, [r3]
 2515 00c2 DB6A     		ldr	r3, [r3, #44]
 2516 00c4 9A42     		cmp	r2, r3
 2517 00c6 D4D2     		bcs	.L231
 2518 00c8 D4E7     		b	.L220
 2519              	.LVL215:
 2520              	.L230:
 2521              	.LBE167:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2522              		.loc 1 2711 0
 2523 00ca 0024     		movs	r4, #0
 2524 00cc D2E7     		b	.L220
 2525              	.LVL216:
 2526              	.L235:
 2527              	.LBB168:
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2528              		.loc 1 2751 0
 2529 00ce 0C4B     		ldr	r3, .L237+20
 2530 00d0 4FF0FF32 		mov	r2, #-1
 2531 00d4 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2532              		.loc 1 2752 0
 2533 00d6 BBE7     		b	.L221
 2534              	.LVL217:
 2535              	.L236:
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2536              		.loc 1 2770 0
 2537 00d8 094A     		ldr	r2, .L237+20
 2538 00da 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2539              		.loc 1 2771 0
 2540 00dc B8E7     		b	.L221
 2541              	.LVL218:
 2542              	.L216:
 2543              	.LBE168:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2544              		.loc 1 2864 0
 2545 00de 0D4A     		ldr	r2, .L237+40
 2546 00e0 1368     		ldr	r3, [r2]
 2547 00e2 0133     		adds	r3, r3, #1
 2548 00e4 1360     		str	r3, [r2]
ARM GAS  /tmp/ccu8P93f.s 			page 147


2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2549              		.loc 1 2711 0
 2550 00e6 0024     		movs	r4, #0
 2551              	.LVL219:
 2552              	.L215:
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2553              		.loc 1 2876 0
 2554 00e8 2046     		mov	r0, r4
 2555 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2556              	.L238:
 2557              		.align	2
 2558              	.L237:
 2559 00ec 00000000 		.word	.LANCHOR16
 2560 00f0 00000000 		.word	.LANCHOR15
 2561 00f4 00000000 		.word	.LANCHOR2
 2562 00f8 00000000 		.word	.LANCHOR8
 2563 00fc 00000000 		.word	.LANCHOR17
 2564 0100 00000000 		.word	.LANCHOR3
 2565 0104 00000000 		.word	.LANCHOR10
 2566 0108 00000000 		.word	.LANCHOR4
 2567 010c 00000000 		.word	.LANCHOR18
 2568 0110 00000000 		.word	.LANCHOR13
 2569 0114 00000000 		.word	.LANCHOR19
 2570              		.cfi_endproc
 2571              	.LFE29:
 2573              		.section	.text.xTaskResumeAll,"ax",%progbits
 2574              		.align	1
 2575              		.global	xTaskResumeAll
 2576              		.syntax unified
 2577              		.thumb
 2578              		.thumb_func
 2579              		.fpu fpv5-d16
 2581              	xTaskResumeAll:
 2582              	.LFB22:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2583              		.loc 1 2195 0
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 0
 2586              		@ frame_needed = 0, uses_anonymous_args = 0
 2587 0000 38B5     		push	{r3, r4, r5, lr}
 2588              	.LCFI29:
 2589              		.cfi_def_cfa_offset 16
 2590              		.cfi_offset 3, -16
 2591              		.cfi_offset 4, -12
 2592              		.cfi_offset 5, -8
 2593              		.cfi_offset 14, -4
 2594              	.LVL220:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2595              		.loc 1 2201 0
 2596 0002 334B     		ldr	r3, .L256
 2597 0004 1B68     		ldr	r3, [r3]
 2598 0006 43B9     		cbnz	r3, .L240
 2599              	.LBB169:
 2600              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2601              		.loc 2 195 0
 2602              		.syntax unified
ARM GAS  /tmp/ccu8P93f.s 			page 148


 2603              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2604 0008 4FF05003 			mov r3, #80												
 2605 000c 83F31188 		msr basepri, r3											
 2606 0010 BFF36F8F 		isb														
 2607 0014 BFF34F8F 		dsb														
 2608              	
 2609              	@ 0 "" 2
 2610              	.LVL221:
 2611              		.thumb
 2612              		.syntax unified
 2613              	.L241:
 2614 0018 FEE7     		b	.L241
 2615              	.L240:
 2616              	.LBE170:
 2617              	.LBE169:
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2618              		.loc 1 2208 0
 2619 001a FFF7FEFF 		bl	vPortEnterCritical
 2620              	.LVL222:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2621              		.loc 1 2210 0
 2622 001e 2C4B     		ldr	r3, .L256
 2623 0020 1A68     		ldr	r2, [r3]
 2624 0022 013A     		subs	r2, r2, #1
 2625 0024 1A60     		str	r2, [r3]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2626              		.loc 1 2212 0
 2627 0026 1B68     		ldr	r3, [r3]
 2628 0028 002B     		cmp	r3, #0
 2629 002a 4DD1     		bne	.L251
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2630              		.loc 1 2214 0
 2631 002c 294B     		ldr	r3, .L256+4
 2632 002e 1B68     		ldr	r3, [r3]
 2633 0030 23B9     		cbnz	r3, .L252
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2634              		.loc 1 2197 0
 2635 0032 0024     		movs	r4, #0
 2636              	.LVL223:
 2637              	.L242:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2638              		.loc 1 2298 0
 2639 0034 FFF7FEFF 		bl	vPortExitCritical
 2640              	.LVL224:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2641              		.loc 1 2301 0
 2642 0038 2046     		mov	r0, r4
 2643 003a 38BD     		pop	{r3, r4, r5, pc}
 2644              	.LVL225:
 2645              	.L252:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2646              		.loc 1 2196 0
 2647 003c 0024     		movs	r4, #0
 2648              	.LVL226:
 2649              	.L243:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2650              		.loc 1 2218 0
ARM GAS  /tmp/ccu8P93f.s 			page 149


 2651 003e 264B     		ldr	r3, .L256+8
 2652 0040 1B68     		ldr	r3, [r3]
 2653 0042 1BB3     		cbz	r3, .L255
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2654              		.loc 1 2220 0
 2655 0044 244B     		ldr	r3, .L256+8
 2656 0046 DB68     		ldr	r3, [r3, #12]
 2657 0048 DC68     		ldr	r4, [r3, #12]
 2658              	.LVL227:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2659              		.loc 1 2221 0
 2660 004a 04F11800 		add	r0, r4, #24
 2661 004e FFF7FEFF 		bl	uxListRemove
 2662              	.LVL228:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2663              		.loc 1 2222 0
 2664 0052 251D     		adds	r5, r4, #4
 2665 0054 2846     		mov	r0, r5
 2666 0056 FFF7FEFF 		bl	uxListRemove
 2667              	.LVL229:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2668              		.loc 1 2223 0
 2669 005a E36A     		ldr	r3, [r4, #44]
 2670 005c 1F4A     		ldr	r2, .L256+12
 2671 005e 1268     		ldr	r2, [r2]
 2672 0060 9342     		cmp	r3, r2
 2673 0062 01D9     		bls	.L244
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2674              		.loc 1 2223 0 is_stmt 0 discriminator 1
 2675 0064 1D4A     		ldr	r2, .L256+12
 2676 0066 1360     		str	r3, [r2]
 2677              	.L244:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2678              		.loc 1 2223 0 discriminator 3
 2679 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2680 006c 9A00     		lsls	r2, r3, #2
 2681 006e 2946     		mov	r1, r5
 2682 0070 1B48     		ldr	r0, .L256+16
 2683 0072 1044     		add	r0, r0, r2
 2684 0074 FFF7FEFF 		bl	vListInsertEnd
 2685              	.LVL230:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2686              		.loc 1 2227 0 is_stmt 1 discriminator 3
 2687 0078 E26A     		ldr	r2, [r4, #44]
 2688 007a 1A4B     		ldr	r3, .L256+20
 2689 007c 1B68     		ldr	r3, [r3]
 2690 007e DB6A     		ldr	r3, [r3, #44]
 2691 0080 9A42     		cmp	r2, r3
 2692 0082 DCD3     		bcc	.L243
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2693              		.loc 1 2229 0
 2694 0084 184B     		ldr	r3, .L256+24
 2695 0086 0122     		movs	r2, #1
 2696 0088 1A60     		str	r2, [r3]
 2697 008a D8E7     		b	.L243
 2698              	.L255:
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu8P93f.s 			page 150


 2699              		.loc 1 2237 0
 2700 008c 0CB1     		cbz	r4, .L247
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2701              		.loc 1 2245 0
 2702 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2703              	.LVL231:
 2704              	.L247:
 2705              	.LBB171:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2706              		.loc 1 2253 0
 2707 0092 164B     		ldr	r3, .L256+28
 2708 0094 1C68     		ldr	r4, [r3]
 2709              	.LVL232:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2710              		.loc 1 2255 0
 2711 0096 54B1     		cbz	r4, .L248
 2712              	.L250:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2713              		.loc 1 2259 0
 2714 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2715              	.LVL233:
 2716 009c 10B1     		cbz	r0, .L249
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2717              		.loc 1 2261 0
 2718 009e 124B     		ldr	r3, .L256+24
 2719 00a0 0122     		movs	r2, #1
 2720 00a2 1A60     		str	r2, [r3]
 2721              	.L249:
 2722              	.LVL234:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2723              		.loc 1 2268 0
 2724 00a4 013C     		subs	r4, r4, #1
 2725              	.LVL235:
 2726 00a6 F7D1     		bne	.L250
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2727              		.loc 1 2270 0
 2728 00a8 104B     		ldr	r3, .L256+28
 2729 00aa 0022     		movs	r2, #0
 2730 00ac 1A60     		str	r2, [r3]
 2731              	.L248:
 2732              	.LBE171:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2733              		.loc 1 2278 0
 2734 00ae 0E4B     		ldr	r3, .L256+24
 2735 00b0 1B68     		ldr	r3, [r3]
 2736 00b2 5BB1     		cbz	r3, .L253
 2737              	.LVL236:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2738              		.loc 1 2285 0
 2739 00b4 0E4B     		ldr	r3, .L256+32
 2740 00b6 4FF08052 		mov	r2, #268435456
 2741 00ba 1A60     		str	r2, [r3]
 2742              		.syntax unified
 2743              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2744 00bc BFF34F8F 		dsb
 2745              	@ 0 "" 2
 2746              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccu8P93f.s 			page 151


 2747 00c0 BFF36F8F 		isb
 2748              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2749              		.loc 1 2282 0
 2750              		.thumb
 2751              		.syntax unified
 2752 00c4 0124     		movs	r4, #1
 2753              	.LVL237:
 2754 00c6 B5E7     		b	.L242
 2755              	.LVL238:
 2756              	.L251:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2757              		.loc 1 2197 0
 2758 00c8 0024     		movs	r4, #0
 2759 00ca B3E7     		b	.L242
 2760              	.LVL239:
 2761              	.L253:
 2762 00cc 0024     		movs	r4, #0
 2763              	.LVL240:
 2764 00ce B1E7     		b	.L242
 2765              	.L257:
 2766              		.align	2
 2767              	.L256:
 2768 00d0 00000000 		.word	.LANCHOR16
 2769 00d4 00000000 		.word	.LANCHOR9
 2770 00d8 00000000 		.word	.LANCHOR1
 2771 00dc 00000000 		.word	.LANCHOR13
 2772 00e0 00000000 		.word	.LANCHOR4
 2773 00e4 00000000 		.word	.LANCHOR10
 2774 00e8 00000000 		.word	.LANCHOR18
 2775 00ec 00000000 		.word	.LANCHOR19
 2776 00f0 04ED00E0 		.word	-536810236
 2777              		.cfi_endproc
 2778              	.LFE22:
 2780              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2781              		.align	1
 2782              		.global	vTaskDelayUntil
 2783              		.syntax unified
 2784              		.thumb
 2785              		.thumb_func
 2786              		.fpu fpv5-d16
 2788              	vTaskDelayUntil:
 2789              	.LFB9:
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2790              		.loc 1 1258 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 0
 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 2794              	.LVL241:
 2795 0000 38B5     		push	{r3, r4, r5, lr}
 2796              	.LCFI30:
 2797              		.cfi_def_cfa_offset 16
 2798              		.cfi_offset 3, -16
 2799              		.cfi_offset 4, -12
 2800              		.cfi_offset 5, -8
 2801              		.cfi_offset 14, -4
 2802              	.LVL242:
ARM GAS  /tmp/ccu8P93f.s 			page 152


1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2803              		.loc 1 1262 0
 2804 0002 50B1     		cbz	r0, .L274
 2805 0004 0546     		mov	r5, r0
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2806              		.loc 1 1263 0
 2807 0006 89B9     		cbnz	r1, .L261
 2808              	.LBB172:
 2809              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2810              		.loc 2 195 0
 2811              		.syntax unified
 2812              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2813 0008 4FF05003 			mov r3, #80												
 2814 000c 83F31188 		msr basepri, r3											
 2815 0010 BFF36F8F 		isb														
 2816 0014 BFF34F8F 		dsb														
 2817              	
 2818              	@ 0 "" 2
 2819              	.LVL243:
 2820              		.thumb
 2821              		.syntax unified
 2822              	.L262:
 2823 0018 FEE7     		b	.L262
 2824              	.L274:
 2825              	.LBE173:
 2826              	.LBE172:
 2827              	.LBB174:
 2828              	.LBB175:
 2829              		.syntax unified
 2830              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2831 001a 4FF05003 			mov r3, #80												
 2832 001e 83F31188 		msr basepri, r3											
 2833 0022 BFF36F8F 		isb														
 2834 0026 BFF34F8F 		dsb														
 2835              	
 2836              	@ 0 "" 2
 2837              	.LVL244:
 2838              		.thumb
 2839              		.syntax unified
 2840              	.L260:
 2841 002a FEE7     		b	.L260
 2842              	.L261:
 2843              	.LBE175:
 2844              	.LBE174:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2845              		.loc 1 1264 0
 2846 002c 1A4B     		ldr	r3, .L275
 2847 002e 1B68     		ldr	r3, [r3]
 2848 0030 43B1     		cbz	r3, .L263
 2849              	.LBB176:
 2850              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2851              		.loc 2 195 0
 2852              		.syntax unified
 2853              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2854 0032 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccu8P93f.s 			page 153


 2855 0036 83F31188 		msr basepri, r3											
 2856 003a BFF36F8F 		isb														
 2857 003e BFF34F8F 		dsb														
 2858              	
 2859              	@ 0 "" 2
 2860              	.LVL245:
 2861              		.thumb
 2862              		.syntax unified
 2863              	.L264:
 2864 0042 FEE7     		b	.L264
 2865              	.L263:
 2866 0044 0C46     		mov	r4, r1
 2867              	.LBE177:
 2868              	.LBE176:
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2869              		.loc 1 1266 0
 2870 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2871              	.LVL246:
 2872              	.LBB178:
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2873              		.loc 1 1270 0
 2874 004a 144B     		ldr	r3, .L275+4
 2875 004c 1868     		ldr	r0, [r3]
 2876              	.LVL247:
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2877              		.loc 1 1273 0
 2878 004e 2A68     		ldr	r2, [r5]
 2879 0050 1444     		add	r4, r4, r2
 2880              	.LVL248:
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2881              		.loc 1 1275 0
 2882 0052 8242     		cmp	r2, r0
 2883 0054 18D9     		bls	.L265
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2884              		.loc 1 1282 0
 2885 0056 A242     		cmp	r2, r4
 2886 0058 0CD8     		bhi	.L266
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2887              		.loc 1 1307 0
 2888 005a 2C60     		str	r4, [r5]
 2889              	.LVL249:
 2890              	.L267:
 2891              	.LBE178:
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2892              		.loc 1 1322 0
 2893 005c FFF7FEFF 		bl	xTaskResumeAll
 2894              	.LVL250:
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2895              		.loc 1 1326 0
 2896 0060 38B9     		cbnz	r0, .L258
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2897              		.loc 1 1328 0
 2898 0062 0F4B     		ldr	r3, .L275+8
 2899 0064 4FF08052 		mov	r2, #268435456
 2900 0068 1A60     		str	r2, [r3]
 2901              		.syntax unified
 2902              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccu8P93f.s 			page 154


 2903 006a BFF34F8F 		dsb
 2904              	@ 0 "" 2
 2905              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2906 006e BFF36F8F 		isb
 2907              	@ 0 "" 2
 2908              		.thumb
 2909              		.syntax unified
 2910              	.L258:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2911              		.loc 1 1334 0
 2912 0072 38BD     		pop	{r3, r4, r5, pc}
 2913              	.LVL251:
 2914              	.L266:
 2915              	.LBB179:
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2916              		.loc 1 1282 0 discriminator 1
 2917 0074 A042     		cmp	r0, r4
 2918 0076 01D3     		bcc	.L268
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2919              		.loc 1 1307 0
 2920 0078 2C60     		str	r4, [r5]
 2921 007a EFE7     		b	.L267
 2922              	.L268:
 2923              	.LVL252:
 2924 007c 2C60     		str	r4, [r5]
 2925              	.L269:
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2926              		.loc 1 1315 0
 2927 007e 0021     		movs	r1, #0
 2928 0080 201A     		subs	r0, r4, r0
 2929              	.LVL253:
 2930 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2931              	.LVL254:
 2932 0086 E9E7     		b	.L267
 2933              	.LVL255:
 2934              	.L265:
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2935              		.loc 1 1296 0
 2936 0088 A242     		cmp	r2, r4
 2937 008a 01D8     		bhi	.L270
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2938              		.loc 1 1296 0 is_stmt 0 discriminator 1
 2939 008c A042     		cmp	r0, r4
 2940 008e 01D2     		bcs	.L271
 2941              	.L270:
 2942              	.LVL256:
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2943              		.loc 1 1307 0 is_stmt 1
 2944 0090 2C60     		str	r4, [r5]
 2945 0092 F4E7     		b	.L269
 2946              	.LVL257:
 2947              	.L271:
 2948 0094 2C60     		str	r4, [r5]
 2949 0096 E1E7     		b	.L267
 2950              	.L276:
 2951              		.align	2
 2952              	.L275:
ARM GAS  /tmp/ccu8P93f.s 			page 155


 2953 0098 00000000 		.word	.LANCHOR16
 2954 009c 00000000 		.word	.LANCHOR15
 2955 00a0 04ED00E0 		.word	-536810236
 2956              	.LBE179:
 2957              		.cfi_endproc
 2958              	.LFE9:
 2960              		.section	.text.vTaskDelay,"ax",%progbits
 2961              		.align	1
 2962              		.global	vTaskDelay
 2963              		.syntax unified
 2964              		.thumb
 2965              		.thumb_func
 2966              		.fpu fpv5-d16
 2968              	vTaskDelay:
 2969              	.LFB10:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2970              		.loc 1 1342 0
 2971              		.cfi_startproc
 2972              		@ args = 0, pretend = 0, frame = 0
 2973              		@ frame_needed = 0, uses_anonymous_args = 0
 2974              	.LVL258:
 2975 0000 10B5     		push	{r4, lr}
 2976              	.LCFI31:
 2977              		.cfi_def_cfa_offset 8
 2978              		.cfi_offset 4, -8
 2979              		.cfi_offset 14, -4
 2980              	.LVL259:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2981              		.loc 1 1346 0
 2982 0002 A8B1     		cbz	r0, .L278
 2983 0004 0446     		mov	r4, r0
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2984              		.loc 1 1348 0
 2985 0006 0F4B     		ldr	r3, .L283
 2986 0008 1B68     		ldr	r3, [r3]
 2987 000a 43B1     		cbz	r3, .L279
 2988              	.LBB180:
 2989              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2990              		.loc 2 195 0
 2991              		.syntax unified
 2992              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2993 000c 4FF05003 			mov r3, #80												
 2994 0010 83F31188 		msr basepri, r3											
 2995 0014 BFF36F8F 		isb														
 2996 0018 BFF34F8F 		dsb														
 2997              	
 2998              	@ 0 "" 2
 2999              	.LVL260:
 3000              		.thumb
 3001              		.syntax unified
 3002              	.L280:
 3003 001c FEE7     		b	.L280
 3004              	.L279:
 3005              	.LBE181:
 3006              	.LBE180:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccu8P93f.s 			page 156


 3007              		.loc 1 1349 0
 3008 001e FFF7FEFF 		bl	vTaskSuspendAll
 3009              	.LVL261:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3010              		.loc 1 1360 0
 3011 0022 0021     		movs	r1, #0
 3012 0024 2046     		mov	r0, r4
 3013 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3014              	.LVL262:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3015              		.loc 1 1362 0
 3016 002a FFF7FEFF 		bl	xTaskResumeAll
 3017              	.LVL263:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3018              		.loc 1 1371 0
 3019 002e 38B9     		cbnz	r0, .L277
 3020              	.LVL264:
 3021              	.L278:
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3022              		.loc 1 1373 0
 3023 0030 054B     		ldr	r3, .L283+4
 3024 0032 4FF08052 		mov	r2, #268435456
 3025 0036 1A60     		str	r2, [r3]
 3026              		.syntax unified
 3027              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3028 0038 BFF34F8F 		dsb
 3029              	@ 0 "" 2
 3030              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3031 003c BFF36F8F 		isb
 3032              	@ 0 "" 2
 3033              		.thumb
 3034              		.syntax unified
 3035              	.L277:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3036              		.loc 1 1379 0
 3037 0040 10BD     		pop	{r4, pc}
 3038              	.L284:
 3039 0042 00BF     		.align	2
 3040              	.L283:
 3041 0044 00000000 		.word	.LANCHOR16
 3042 0048 04ED00E0 		.word	-536810236
 3043              		.cfi_endproc
 3044              	.LFE10:
 3046              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3047              		.align	1
 3048              		.global	xTaskCatchUpTicks
 3049              		.syntax unified
 3050              		.thumb
 3051              		.thumb_func
 3052              		.fpu fpv5-d16
 3054              	xTaskCatchUpTicks:
 3055              	.LFB28:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3056              		.loc 1 2610 0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 0
 3059              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccu8P93f.s 			page 157


 3060              	.LVL265:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3061              		.loc 1 2615 0
 3062 0000 0B4B     		ldr	r3, .L290
 3063 0002 1B68     		ldr	r3, [r3]
 3064 0004 43B1     		cbz	r3, .L286
 3065              	.LBB182:
 3066              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3067              		.loc 2 195 0
 3068              		.syntax unified
 3069              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3070 0006 4FF05003 			mov r3, #80												
 3071 000a 83F31188 		msr basepri, r3											
 3072 000e BFF36F8F 		isb														
 3073 0012 BFF34F8F 		dsb														
 3074              	
 3075              	@ 0 "" 2
 3076              	.LVL266:
 3077              		.thumb
 3078              		.syntax unified
 3079              	.L287:
 3080 0016 FEE7     		b	.L287
 3081              	.L286:
 3082              	.LBE183:
 3083              	.LBE182:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3084              		.loc 1 2610 0
 3085 0018 10B5     		push	{r4, lr}
 3086              	.LCFI32:
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 4, -8
 3089              		.cfi_offset 14, -4
 3090 001a 0446     		mov	r4, r0
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3091              		.loc 1 2619 0
 3092 001c FFF7FEFF 		bl	vTaskSuspendAll
 3093              	.LVL267:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3094              		.loc 1 2620 0
 3095 0020 044A     		ldr	r2, .L290+4
 3096 0022 1368     		ldr	r3, [r2]
 3097 0024 2344     		add	r3, r3, r4
 3098 0026 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3099              		.loc 1 2621 0
 3100 0028 FFF7FEFF 		bl	xTaskResumeAll
 3101              	.LVL268:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3102              		.loc 1 2624 0
 3103 002c 10BD     		pop	{r4, pc}
 3104              	.LVL269:
 3105              	.L291:
 3106 002e 00BF     		.align	2
 3107              	.L290:
 3108 0030 00000000 		.word	.LANCHOR16
 3109 0034 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/ccu8P93f.s 			page 158


 3110              		.cfi_endproc
 3111              	.LFE28:
 3113              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3114              		.align	1
 3115              		.global	vTaskSwitchContext
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3119              		.fpu fpv5-d16
 3121              	vTaskSwitchContext:
 3122              	.LFB30:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3123              		.loc 1 2990 0
 3124              		.cfi_startproc
 3125              		@ args = 0, pretend = 0, frame = 0
 3126              		@ frame_needed = 0, uses_anonymous_args = 0
 3127              		@ link register save eliminated.
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3128              		.loc 1 2991 0
 3129 0000 204B     		ldr	r3, .L307
 3130 0002 1B68     		ldr	r3, [r3]
 3131 0004 1BB1     		cbz	r3, .L293
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3132              		.loc 1 2995 0
 3133 0006 204B     		ldr	r3, .L307+4
 3134 0008 0122     		movs	r2, #1
 3135 000a 1A60     		str	r2, [r3]
 3136 000c 7047     		bx	lr
 3137              	.L293:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3138              		.loc 1 2999 0
 3139 000e 1E4B     		ldr	r3, .L307+4
 3140 0010 0022     		movs	r2, #0
 3141 0012 1A60     		str	r2, [r3]
 3142              	.LBB184:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3143              		.loc 1 3041 0
 3144 0014 1D4B     		ldr	r3, .L307+8
 3145 0016 1B68     		ldr	r3, [r3]
 3146              	.LVL270:
 3147              	.L295:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3148              		.loc 1 3041 0 is_stmt 0 discriminator 4
 3149 0018 03EB8301 		add	r1, r3, r3, lsl #2
 3150 001c 8A00     		lsls	r2, r1, #2
 3151 001e 1C49     		ldr	r1, .L307+12
 3152 0020 8A58     		ldr	r2, [r1, r2]
 3153 0022 5AB9     		cbnz	r2, .L304
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3154              		.loc 1 3041 0 discriminator 5
 3155 0024 0BB1     		cbz	r3, .L305
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3156              		.loc 1 3041 0 discriminator 3
 3157 0026 013B     		subs	r3, r3, #1
 3158              	.LVL271:
 3159 0028 F6E7     		b	.L295
 3160              	.L305:
ARM GAS  /tmp/ccu8P93f.s 			page 159


 3161              	.LBB185:
 3162              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3163              		.loc 2 195 0 is_stmt 1
 3164              		.syntax unified
 3165              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3166 002a 4FF05003 			mov r3, #80												
 3167 002e 83F31188 		msr basepri, r3											
 3168 0032 BFF36F8F 		isb														
 3169 0036 BFF34F8F 		dsb														
 3170              	
 3171              	@ 0 "" 2
 3172              	.LVL272:
 3173              		.thumb
 3174              		.syntax unified
 3175              	.L297:
 3176 003a FEE7     		b	.L297
 3177              	.LVL273:
 3178              	.L304:
 3179              	.LBE186:
 3180              	.LBE185:
 3181              	.LBE184:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3182              		.loc 1 2990 0 discriminator 6
 3183 003c 10B4     		push	{r4}
 3184              	.LCFI33:
 3185              		.cfi_def_cfa_offset 4
 3186              		.cfi_offset 4, -4
 3187              	.LVL274:
 3188              	.LBB189:
 3189              	.LBB187:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3190              		.loc 1 3041 0 discriminator 6
 3191 003e 0846     		mov	r0, r1
 3192 0040 9A00     		lsls	r2, r3, #2
 3193 0042 D418     		adds	r4, r2, r3
 3194 0044 A100     		lsls	r1, r4, #2
 3195 0046 0144     		add	r1, r1, r0
 3196 0048 4C68     		ldr	r4, [r1, #4]
 3197 004a 6468     		ldr	r4, [r4, #4]
 3198 004c 4C60     		str	r4, [r1, #4]
 3199 004e 1A44     		add	r2, r2, r3
 3200 0050 9100     		lsls	r1, r2, #2
 3201 0052 0831     		adds	r1, r1, #8
 3202 0054 0844     		add	r0, r0, r1
 3203 0056 8442     		cmp	r4, r0
 3204 0058 0DD0     		beq	.L306
 3205              	.L299:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3206              		.loc 1 3041 0 is_stmt 0 discriminator 9
 3207 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3208 005e 9100     		lsls	r1, r2, #2
 3209 0060 0B4A     		ldr	r2, .L307+12
 3210 0062 0A44     		add	r2, r2, r1
 3211 0064 5268     		ldr	r2, [r2, #4]
 3212 0066 D168     		ldr	r1, [r2, #12]
 3213 0068 0A4A     		ldr	r2, .L307+16
ARM GAS  /tmp/ccu8P93f.s 			page 160


 3214 006a 1160     		str	r1, [r2]
 3215              	.LBE187:
 3216 006c 074A     		ldr	r2, .L307+8
 3217 006e 1360     		str	r3, [r2]
 3218              	.LBE189:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3219              		.loc 1 3061 0 is_stmt 1 discriminator 9
 3220 0070 5DF8044B 		ldr	r4, [sp], #4
 3221              	.LCFI34:
 3222              		.cfi_remember_state
 3223              		.cfi_restore 4
 3224              		.cfi_def_cfa_offset 0
 3225 0074 7047     		bx	lr
 3226              	.L306:
 3227              	.LCFI35:
 3228              		.cfi_restore_state
 3229              	.LBB190:
 3230              	.LBB188:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3231              		.loc 1 3041 0 discriminator 7
 3232 0076 6168     		ldr	r1, [r4, #4]
 3233 0078 0548     		ldr	r0, .L307+12
 3234 007a 1422     		movs	r2, #20
 3235 007c 02FB0302 		mla	r2, r2, r3, r0
 3236 0080 5160     		str	r1, [r2, #4]
 3237 0082 EAE7     		b	.L299
 3238              	.L308:
 3239              		.align	2
 3240              	.L307:
 3241 0084 00000000 		.word	.LANCHOR16
 3242 0088 00000000 		.word	.LANCHOR18
 3243 008c 00000000 		.word	.LANCHOR13
 3244 0090 00000000 		.word	.LANCHOR4
 3245 0094 00000000 		.word	.LANCHOR10
 3246              	.LBE188:
 3247              	.LBE190:
 3248              		.cfi_endproc
 3249              	.LFE30:
 3251              		.section	.text.vTaskSuspend,"ax",%progbits
 3252              		.align	1
 3253              		.global	vTaskSuspend
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu fpv5-d16
 3259              	vTaskSuspend:
 3260              	.LFB15:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3261              		.loc 1 1705 0
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 0
 3264              		@ frame_needed = 0, uses_anonymous_args = 0
 3265              	.LVL275:
 3266 0000 38B5     		push	{r3, r4, r5, lr}
 3267              	.LCFI36:
 3268              		.cfi_def_cfa_offset 16
 3269              		.cfi_offset 3, -16
ARM GAS  /tmp/ccu8P93f.s 			page 161


 3270              		.cfi_offset 4, -12
 3271              		.cfi_offset 5, -8
 3272              		.cfi_offset 14, -4
 3273 0002 0446     		mov	r4, r0
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3274              		.loc 1 1708 0
 3275 0004 FFF7FEFF 		bl	vPortEnterCritical
 3276              	.LVL276:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3277              		.loc 1 1712 0
 3278 0008 E4B1     		cbz	r4, .L320
 3279              	.LVL277:
 3280              	.L310:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3281              		.loc 1 1718 0 discriminator 4
 3282 000a 251D     		adds	r5, r4, #4
 3283 000c 2846     		mov	r0, r5
 3284 000e FFF7FEFF 		bl	uxListRemove
 3285              	.LVL278:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3286              		.loc 1 1728 0 discriminator 4
 3287 0012 A36A     		ldr	r3, [r4, #40]
 3288 0014 1BB1     		cbz	r3, .L311
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3289              		.loc 1 1730 0
 3290 0016 04F11800 		add	r0, r4, #24
 3291 001a FFF7FEFF 		bl	uxListRemove
 3292              	.LVL279:
 3293              	.L311:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3294              		.loc 1 1737 0
 3295 001e 2946     		mov	r1, r5
 3296 0020 2248     		ldr	r0, .L324
 3297 0022 FFF7FEFF 		bl	vListInsertEnd
 3298              	.LVL280:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3299              		.loc 1 1741 0
 3300 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3301 002a DBB2     		uxtb	r3, r3
 3302 002c 012B     		cmp	r3, #1
 3303 002e 0CD0     		beq	.L321
 3304              	.L312:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3305              		.loc 1 1750 0
 3306 0030 FFF7FEFF 		bl	vPortExitCritical
 3307              	.LVL281:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3308              		.loc 1 1752 0
 3309 0034 1E4B     		ldr	r3, .L324+4
 3310 0036 1B68     		ldr	r3, [r3]
 3311 0038 5BB9     		cbnz	r3, .L322
 3312              	.L313:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3313              		.loc 1 1767 0
 3314 003a 1E4B     		ldr	r3, .L324+8
 3315 003c 1B68     		ldr	r3, [r3]
 3316 003e A342     		cmp	r3, r4
ARM GAS  /tmp/ccu8P93f.s 			page 162


 3317 0040 0ED0     		beq	.L323
 3318              	.L309:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3319              		.loc 1 1798 0
 3320 0042 38BD     		pop	{r3, r4, r5, pc}
 3321              	.LVL282:
 3322              	.L320:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3323              		.loc 1 1712 0 discriminator 1
 3324 0044 1B4B     		ldr	r3, .L324+8
 3325 0046 1C68     		ldr	r4, [r3]
 3326              	.LVL283:
 3327 0048 DFE7     		b	.L310
 3328              	.LVL284:
 3329              	.L321:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3330              		.loc 1 1745 0
 3331 004a 0023     		movs	r3, #0
 3332 004c 84F85830 		strb	r3, [r4, #88]
 3333 0050 EEE7     		b	.L312
 3334              	.L322:
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3335              		.loc 1 1756 0
 3336 0052 FFF7FEFF 		bl	vPortEnterCritical
 3337              	.LVL285:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3338              		.loc 1 1758 0
 3339 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3340              	.LVL286:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3341              		.loc 1 1760 0
 3342 005a FFF7FEFF 		bl	vPortExitCritical
 3343              	.LVL287:
 3344 005e ECE7     		b	.L313
 3345              	.L323:
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3346              		.loc 1 1769 0
 3347 0060 134B     		ldr	r3, .L324+4
 3348 0062 1B68     		ldr	r3, [r3]
 3349 0064 A3B1     		cbz	r3, .L315
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3350              		.loc 1 1772 0
 3351 0066 144B     		ldr	r3, .L324+12
 3352 0068 1B68     		ldr	r3, [r3]
 3353 006a 43B1     		cbz	r3, .L316
 3354              	.LBB191:
 3355              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3356              		.loc 2 195 0
 3357              		.syntax unified
 3358              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3359 006c 4FF05003 			mov r3, #80												
 3360 0070 83F31188 		msr basepri, r3											
 3361 0074 BFF36F8F 		isb														
 3362 0078 BFF34F8F 		dsb														
 3363              	
 3364              	@ 0 "" 2
ARM GAS  /tmp/ccu8P93f.s 			page 163


 3365              	.LVL288:
 3366              		.thumb
 3367              		.syntax unified
 3368              	.L317:
 3369 007c FEE7     		b	.L317
 3370              	.L316:
 3371              	.LBE192:
 3372              	.LBE191:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3373              		.loc 1 1773 0
 3374 007e 0F4B     		ldr	r3, .L324+16
 3375 0080 4FF08052 		mov	r2, #268435456
 3376 0084 1A60     		str	r2, [r3]
 3377              		.syntax unified
 3378              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3379 0086 BFF34F8F 		dsb
 3380              	@ 0 "" 2
 3381              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3382 008a BFF36F8F 		isb
 3383              	@ 0 "" 2
 3384              		.thumb
 3385              		.syntax unified
 3386 008e D8E7     		b	.L309
 3387              	.L315:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3388              		.loc 1 1780 0
 3389 0090 064B     		ldr	r3, .L324
 3390 0092 1A68     		ldr	r2, [r3]
 3391 0094 0A4B     		ldr	r3, .L324+20
 3392 0096 1B68     		ldr	r3, [r3]
 3393 0098 9A42     		cmp	r2, r3
 3394 009a 03D1     		bne	.L318
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3395              		.loc 1 1786 0
 3396 009c 054B     		ldr	r3, .L324+8
 3397 009e 0022     		movs	r2, #0
 3398 00a0 1A60     		str	r2, [r3]
 3399 00a2 CEE7     		b	.L309
 3400              	.L318:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3401              		.loc 1 1790 0
 3402 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3403              	.LVL289:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3404              		.loc 1 1798 0
 3405 00a8 CBE7     		b	.L309
 3406              	.L325:
 3407 00aa 00BF     		.align	2
 3408              	.L324:
 3409 00ac 00000000 		.word	.LANCHOR0
 3410 00b0 00000000 		.word	.LANCHOR11
 3411 00b4 00000000 		.word	.LANCHOR10
 3412 00b8 00000000 		.word	.LANCHOR16
 3413 00bc 04ED00E0 		.word	-536810236
 3414 00c0 00000000 		.word	.LANCHOR9
 3415              		.cfi_endproc
 3416              	.LFE15:
ARM GAS  /tmp/ccu8P93f.s 			page 164


 3418              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3419              		.align	1
 3420              		.global	vTaskPlaceOnEventList
 3421              		.syntax unified
 3422              		.thumb
 3423              		.thumb_func
 3424              		.fpu fpv5-d16
 3426              	vTaskPlaceOnEventList:
 3427              	.LFB31:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3428              		.loc 1 3065 0
 3429              		.cfi_startproc
 3430              		@ args = 0, pretend = 0, frame = 0
 3431              		@ frame_needed = 0, uses_anonymous_args = 0
 3432              	.LVL290:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3433              		.loc 1 3066 0
 3434 0000 40B9     		cbnz	r0, .L327
 3435              	.LBB193:
 3436              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3437              		.loc 2 195 0
 3438              		.syntax unified
 3439              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3440 0002 4FF05003 			mov r3, #80												
 3441 0006 83F31188 		msr basepri, r3											
 3442 000a BFF36F8F 		isb														
 3443 000e BFF34F8F 		dsb														
 3444              	
 3445              	@ 0 "" 2
 3446              	.LVL291:
 3447              		.thumb
 3448              		.syntax unified
 3449              	.L328:
 3450 0012 FEE7     		b	.L328
 3451              	.L327:
 3452              	.LBE194:
 3453              	.LBE193:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3454              		.loc 1 3065 0
 3455 0014 10B5     		push	{r4, lr}
 3456              	.LCFI37:
 3457              		.cfi_def_cfa_offset 8
 3458              		.cfi_offset 4, -8
 3459              		.cfi_offset 14, -4
 3460 0016 0C46     		mov	r4, r1
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3461              		.loc 1 3075 0
 3462 0018 044B     		ldr	r3, .L331
 3463 001a 1968     		ldr	r1, [r3]
 3464              	.LVL292:
 3465 001c 1831     		adds	r1, r1, #24
 3466 001e FFF7FEFF 		bl	vListInsert
 3467              	.LVL293:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3468              		.loc 1 3077 0
 3469 0022 0121     		movs	r1, #1
ARM GAS  /tmp/ccu8P93f.s 			page 165


 3470 0024 2046     		mov	r0, r4
 3471 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3472              	.LVL294:
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3473              		.loc 1 3078 0
 3474 002a 10BD     		pop	{r4, pc}
 3475              	.LVL295:
 3476              	.L332:
 3477              		.align	2
 3478              	.L331:
 3479 002c 00000000 		.word	.LANCHOR10
 3480              		.cfi_endproc
 3481              	.LFE31:
 3483              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3484              		.align	1
 3485              		.global	vTaskPlaceOnUnorderedEventList
 3486              		.syntax unified
 3487              		.thumb
 3488              		.thumb_func
 3489              		.fpu fpv5-d16
 3491              	vTaskPlaceOnUnorderedEventList:
 3492              	.LFB32:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3493              		.loc 1 3082 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497              	.LVL296:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3498              		.loc 1 3083 0
 3499 0000 40B9     		cbnz	r0, .L334
 3500              	.LBB195:
 3501              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3502              		.loc 2 195 0
 3503              		.syntax unified
 3504              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3505 0002 4FF05003 			mov r3, #80												
 3506 0006 83F31188 		msr basepri, r3											
 3507 000a BFF36F8F 		isb														
 3508 000e BFF34F8F 		dsb														
 3509              	
 3510              	@ 0 "" 2
 3511              	.LVL297:
 3512              		.thumb
 3513              		.syntax unified
 3514              	.L335:
 3515 0012 FEE7     		b	.L335
 3516              	.L334:
 3517 0014 0346     		mov	r3, r0
 3518              	.LBE196:
 3519              	.LBE195:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3520              		.loc 1 3087 0
 3521 0016 0F48     		ldr	r0, .L340
 3522              	.LVL298:
 3523 0018 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccu8P93f.s 			page 166


 3524 001a 40B9     		cbnz	r0, .L336
 3525              	.LBB197:
 3526              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3527              		.loc 2 195 0
 3528              		.syntax unified
 3529              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3530 001c 4FF05003 			mov r3, #80												
 3531 0020 83F31188 		msr basepri, r3											
 3532 0024 BFF36F8F 		isb														
 3533 0028 BFF34F8F 		dsb														
 3534              	
 3535              	@ 0 "" 2
 3536              	.LVL299:
 3537              		.thumb
 3538              		.syntax unified
 3539              	.L337:
 3540 002c FEE7     		b	.L337
 3541              	.LVL300:
 3542              	.L336:
 3543              	.LBE198:
 3544              	.LBE197:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3545              		.loc 1 3082 0
 3546 002e 10B5     		push	{r4, lr}
 3547              	.LCFI38:
 3548              		.cfi_def_cfa_offset 8
 3549              		.cfi_offset 4, -8
 3550              		.cfi_offset 14, -4
 3551 0030 1846     		mov	r0, r3
 3552 0032 1446     		mov	r4, r2
 3553 0034 0B46     		mov	r3, r1
 3554              	.LVL301:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3555              		.loc 1 3092 0
 3556 0036 084A     		ldr	r2, .L340+4
 3557              	.LVL302:
 3558 0038 1168     		ldr	r1, [r2]
 3559              	.LVL303:
 3560 003a 43F00043 		orr	r3, r3, #-2147483648
 3561              	.LVL304:
 3562 003e 8B61     		str	r3, [r1, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3563              		.loc 1 3099 0
 3564 0040 1168     		ldr	r1, [r2]
 3565 0042 1831     		adds	r1, r1, #24
 3566 0044 FFF7FEFF 		bl	vListInsertEnd
 3567              	.LVL305:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3568              		.loc 1 3101 0
 3569 0048 0121     		movs	r1, #1
 3570 004a 2046     		mov	r0, r4
 3571 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3572              	.LVL306:
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3573              		.loc 1 3102 0
 3574 0050 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccu8P93f.s 			page 167


 3575              	.LVL307:
 3576              	.L341:
 3577 0052 00BF     		.align	2
 3578              	.L340:
 3579 0054 00000000 		.word	.LANCHOR16
 3580 0058 00000000 		.word	.LANCHOR10
 3581              		.cfi_endproc
 3582              	.LFE32:
 3584              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3585              		.align	1
 3586              		.global	vTaskPlaceOnEventListRestricted
 3587              		.syntax unified
 3588              		.thumb
 3589              		.thumb_func
 3590              		.fpu fpv5-d16
 3592              	vTaskPlaceOnEventListRestricted:
 3593              	.LFB33:
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3594              		.loc 1 3108 0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 0
 3597              		@ frame_needed = 0, uses_anonymous_args = 0
 3598              	.LVL308:
 3599 0000 38B5     		push	{r3, r4, r5, lr}
 3600              	.LCFI39:
 3601              		.cfi_def_cfa_offset 16
 3602              		.cfi_offset 3, -16
 3603              		.cfi_offset 4, -12
 3604              		.cfi_offset 5, -8
 3605              		.cfi_offset 14, -4
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3606              		.loc 1 3109 0
 3607 0002 40B9     		cbnz	r0, .L343
 3608              	.LBB199:
 3609              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3610              		.loc 2 195 0
 3611              		.syntax unified
 3612              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3613 0004 4FF05003 			mov r3, #80												
 3614 0008 83F31188 		msr basepri, r3											
 3615 000c BFF36F8F 		isb														
 3616 0010 BFF34F8F 		dsb														
 3617              	
 3618              	@ 0 "" 2
 3619              	.LVL309:
 3620              		.thumb
 3621              		.syntax unified
 3622              	.L344:
 3623 0014 FEE7     		b	.L344
 3624              	.L343:
 3625 0016 0C46     		mov	r4, r1
 3626 0018 1546     		mov	r5, r2
 3627              	.LBE200:
 3628              	.LBE199:
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3629              		.loc 1 3121 0
ARM GAS  /tmp/ccu8P93f.s 			page 168


 3630 001a 064A     		ldr	r2, .L348
 3631              	.LVL310:
 3632 001c 1168     		ldr	r1, [r2]
 3633              	.LVL311:
 3634 001e 1831     		adds	r1, r1, #24
 3635 0020 FFF7FEFF 		bl	vListInsertEnd
 3636              	.LVL312:
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3637              		.loc 1 3126 0
 3638 0024 0DB1     		cbz	r5, .L345
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3639              		.loc 1 3128 0
 3640 0026 4FF0FF34 		mov	r4, #-1
 3641              	.LVL313:
 3642              	.L345:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3643              		.loc 1 3132 0
 3644 002a 2946     		mov	r1, r5
 3645 002c 2046     		mov	r0, r4
 3646 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3647              	.LVL314:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3648              		.loc 1 3133 0
 3649 0032 38BD     		pop	{r3, r4, r5, pc}
 3650              	.LVL315:
 3651              	.L349:
 3652              		.align	2
 3653              	.L348:
 3654 0034 00000000 		.word	.LANCHOR10
 3655              		.cfi_endproc
 3656              	.LFE33:
 3658              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3659              		.align	1
 3660              		.global	xTaskRemoveFromEventList
 3661              		.syntax unified
 3662              		.thumb
 3663              		.thumb_func
 3664              		.fpu fpv5-d16
 3666              	xTaskRemoveFromEventList:
 3667              	.LFB34:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3668              		.loc 1 3139 0
 3669              		.cfi_startproc
 3670              		@ args = 0, pretend = 0, frame = 0
 3671              		@ frame_needed = 0, uses_anonymous_args = 0
 3672              	.LVL316:
 3673 0000 38B5     		push	{r3, r4, r5, lr}
 3674              	.LCFI40:
 3675              		.cfi_def_cfa_offset 16
 3676              		.cfi_offset 3, -16
 3677              		.cfi_offset 4, -12
 3678              		.cfi_offset 5, -8
 3679              		.cfi_offset 14, -4
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3680              		.loc 1 3156 0
 3681 0002 C368     		ldr	r3, [r0, #12]
 3682 0004 DC68     		ldr	r4, [r3, #12]
ARM GAS  /tmp/ccu8P93f.s 			page 169


 3683              	.LVL317:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3684              		.loc 1 3157 0
 3685 0006 44B9     		cbnz	r4, .L351
 3686              	.LBB201:
 3687              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3688              		.loc 2 195 0
 3689              		.syntax unified
 3690              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3691 0008 4FF05003 			mov r3, #80												
 3692 000c 83F31188 		msr basepri, r3											
 3693 0010 BFF36F8F 		isb														
 3694 0014 BFF34F8F 		dsb														
 3695              	
 3696              	@ 0 "" 2
 3697              	.LVL318:
 3698              		.thumb
 3699              		.syntax unified
 3700              	.L352:
 3701 0018 FEE7     		b	.L352
 3702              	.L351:
 3703              	.LBE202:
 3704              	.LBE201:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3705              		.loc 1 3158 0
 3706 001a 04F11805 		add	r5, r4, #24
 3707 001e 2846     		mov	r0, r5
 3708              	.LVL319:
 3709 0020 FFF7FEFF 		bl	uxListRemove
 3710              	.LVL320:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3711              		.loc 1 3160 0
 3712 0024 134B     		ldr	r3, .L359
 3713 0026 1B68     		ldr	r3, [r3]
 3714 0028 E3B9     		cbnz	r3, .L353
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3715              		.loc 1 3162 0
 3716 002a 251D     		adds	r5, r4, #4
 3717 002c 2846     		mov	r0, r5
 3718 002e FFF7FEFF 		bl	uxListRemove
 3719              	.LVL321:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3720              		.loc 1 3163 0
 3721 0032 E36A     		ldr	r3, [r4, #44]
 3722 0034 104A     		ldr	r2, .L359+4
 3723 0036 1268     		ldr	r2, [r2]
 3724 0038 9342     		cmp	r3, r2
 3725 003a 01D9     		bls	.L354
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3726              		.loc 1 3163 0 is_stmt 0 discriminator 1
 3727 003c 0E4A     		ldr	r2, .L359+4
 3728 003e 1360     		str	r3, [r2]
 3729              	.L354:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3730              		.loc 1 3163 0 discriminator 3
 3731 0040 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/ccu8P93f.s 			page 170


 3732 0044 9A00     		lsls	r2, r3, #2
 3733 0046 2946     		mov	r1, r5
 3734 0048 0C48     		ldr	r0, .L359+8
 3735 004a 1044     		add	r0, r0, r2
 3736 004c FFF7FEFF 		bl	vListInsertEnd
 3737              	.LVL322:
 3738              	.L355:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3739              		.loc 1 3186 0 is_stmt 1
 3740 0050 E26A     		ldr	r2, [r4, #44]
 3741 0052 0B4B     		ldr	r3, .L359+12
 3742 0054 1B68     		ldr	r3, [r3]
 3743 0056 DB6A     		ldr	r3, [r3, #44]
 3744 0058 9A42     		cmp	r2, r3
 3745 005a 08D9     		bls	.L357
 3746              	.LVL323:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3747              		.loc 1 3195 0
 3748 005c 0120     		movs	r0, #1
 3749 005e 094B     		ldr	r3, .L359+16
 3750 0060 1860     		str	r0, [r3]
 3751              	.LVL324:
 3752              	.L350:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3753              		.loc 1 3203 0
 3754 0062 38BD     		pop	{r3, r4, r5, pc}
 3755              	.LVL325:
 3756              	.L353:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3757              		.loc 1 3183 0
 3758 0064 2946     		mov	r1, r5
 3759 0066 0848     		ldr	r0, .L359+20
 3760 0068 FFF7FEFF 		bl	vListInsertEnd
 3761              	.LVL326:
 3762 006c F0E7     		b	.L355
 3763              	.L357:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3764              		.loc 1 3199 0
 3765 006e 0020     		movs	r0, #0
 3766              	.LVL327:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3767              		.loc 1 3202 0
 3768 0070 F7E7     		b	.L350
 3769              	.L360:
 3770 0072 00BF     		.align	2
 3771              	.L359:
 3772 0074 00000000 		.word	.LANCHOR16
 3773 0078 00000000 		.word	.LANCHOR13
 3774 007c 00000000 		.word	.LANCHOR4
 3775 0080 00000000 		.word	.LANCHOR10
 3776 0084 00000000 		.word	.LANCHOR18
 3777 0088 00000000 		.word	.LANCHOR1
 3778              		.cfi_endproc
 3779              	.LFE34:
 3781              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3782              		.align	1
 3783              		.global	vTaskRemoveFromUnorderedEventList
ARM GAS  /tmp/ccu8P93f.s 			page 171


 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3787              		.fpu fpv5-d16
 3789              	vTaskRemoveFromUnorderedEventList:
 3790              	.LFB35:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3791              		.loc 1 3207 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 0
 3794              		@ frame_needed = 0, uses_anonymous_args = 0
 3795              	.LVL328:
 3796 0000 38B5     		push	{r3, r4, r5, lr}
 3797              	.LCFI41:
 3798              		.cfi_def_cfa_offset 16
 3799              		.cfi_offset 3, -16
 3800              		.cfi_offset 4, -12
 3801              		.cfi_offset 5, -8
 3802              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3803              		.loc 1 3212 0
 3804 0002 1C4B     		ldr	r3, .L370
 3805 0004 1B68     		ldr	r3, [r3]
 3806 0006 43B9     		cbnz	r3, .L362
 3807              	.LBB203:
 3808              	.LBB204:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3809              		.loc 2 195 0
 3810              		.syntax unified
 3811              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3812 0008 4FF05003 			mov r3, #80												
 3813 000c 83F31188 		msr basepri, r3											
 3814 0010 BFF36F8F 		isb														
 3815 0014 BFF34F8F 		dsb														
 3816              	
 3817              	@ 0 "" 2
 3818              	.LVL329:
 3819              		.thumb
 3820              		.syntax unified
 3821              	.L363:
 3822 0018 FEE7     		b	.L363
 3823              	.L362:
 3824              	.LBE204:
 3825              	.LBE203:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3826              		.loc 1 3215 0
 3827 001a 41F00041 		orr	r1, r1, #-2147483648
 3828              	.LVL330:
 3829 001e 0160     		str	r1, [r0]
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3830              		.loc 1 3219 0
 3831 0020 C468     		ldr	r4, [r0, #12]
 3832              	.LVL331:
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3833              		.loc 1 3220 0
 3834 0022 F4B1     		cbz	r4, .L369
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 172


 3835              		.loc 1 3221 0
 3836 0024 FFF7FEFF 		bl	uxListRemove
 3837              	.LVL332:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3838              		.loc 1 3240 0
 3839 0028 251D     		adds	r5, r4, #4
 3840 002a 2846     		mov	r0, r5
 3841 002c FFF7FEFF 		bl	uxListRemove
 3842              	.LVL333:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3843              		.loc 1 3241 0
 3844 0030 E36A     		ldr	r3, [r4, #44]
 3845 0032 114A     		ldr	r2, .L370+4
 3846 0034 1268     		ldr	r2, [r2]
 3847 0036 9342     		cmp	r3, r2
 3848 0038 01D9     		bls	.L366
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3849              		.loc 1 3241 0 is_stmt 0 discriminator 1
 3850 003a 0F4A     		ldr	r2, .L370+4
 3851 003c 1360     		str	r3, [r2]
 3852              	.L366:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3853              		.loc 1 3241 0 discriminator 3
 3854 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3855 0042 9A00     		lsls	r2, r3, #2
 3856 0044 2946     		mov	r1, r5
 3857 0046 0D48     		ldr	r0, .L370+8
 3858 0048 1044     		add	r0, r0, r2
 3859 004a FFF7FEFF 		bl	vListInsertEnd
 3860              	.LVL334:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3861              		.loc 1 3243 0 is_stmt 1 discriminator 3
 3862 004e E26A     		ldr	r2, [r4, #44]
 3863 0050 0B4B     		ldr	r3, .L370+12
 3864 0052 1B68     		ldr	r3, [r3]
 3865 0054 DB6A     		ldr	r3, [r3, #44]
 3866 0056 9A42     		cmp	r2, r3
 3867 0058 02D9     		bls	.L361
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3868              		.loc 1 3249 0
 3869 005a 0A4B     		ldr	r3, .L370+16
 3870 005c 0122     		movs	r2, #1
 3871 005e 1A60     		str	r2, [r3]
 3872              	.L361:
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3873              		.loc 1 3251 0
 3874 0060 38BD     		pop	{r3, r4, r5, pc}
 3875              	.LVL335:
 3876              	.L369:
 3877              	.LBB205:
 3878              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3879              		.loc 2 195 0
 3880              		.syntax unified
 3881              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3882 0062 4FF05003 			mov r3, #80												
 3883 0066 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccu8P93f.s 			page 173


 3884 006a BFF36F8F 		isb														
 3885 006e BFF34F8F 		dsb														
 3886              	
 3887              	@ 0 "" 2
 3888              	.LVL336:
 3889              		.thumb
 3890              		.syntax unified
 3891              	.L365:
 3892 0072 FEE7     		b	.L365
 3893              	.L371:
 3894              		.align	2
 3895              	.L370:
 3896 0074 00000000 		.word	.LANCHOR16
 3897 0078 00000000 		.word	.LANCHOR13
 3898 007c 00000000 		.word	.LANCHOR4
 3899 0080 00000000 		.word	.LANCHOR10
 3900 0084 00000000 		.word	.LANCHOR18
 3901              	.LBE206:
 3902              	.LBE205:
 3903              		.cfi_endproc
 3904              	.LFE35:
 3906              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3907              		.align	1
 3908              		.global	vTaskSetTimeOutState
 3909              		.syntax unified
 3910              		.thumb
 3911              		.thumb_func
 3912              		.fpu fpv5-d16
 3914              	vTaskSetTimeOutState:
 3915              	.LFB36:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3916              		.loc 1 3255 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 0
 3919              		@ frame_needed = 0, uses_anonymous_args = 0
 3920              	.LVL337:
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3921              		.loc 1 3256 0
 3922 0000 40B9     		cbnz	r0, .L373
 3923              	.LBB207:
 3924              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3925              		.loc 2 195 0
 3926              		.syntax unified
 3927              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3928 0002 4FF05003 			mov r3, #80												
 3929 0006 83F31188 		msr basepri, r3											
 3930 000a BFF36F8F 		isb														
 3931 000e BFF34F8F 		dsb														
 3932              	
 3933              	@ 0 "" 2
 3934              	.LVL338:
 3935              		.thumb
 3936              		.syntax unified
 3937              	.L374:
 3938 0012 FEE7     		b	.L374
 3939              	.L373:
ARM GAS  /tmp/ccu8P93f.s 			page 174


 3940              	.LBE208:
 3941              	.LBE207:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3942              		.loc 1 3255 0
 3943 0014 10B5     		push	{r4, lr}
 3944              	.LCFI42:
 3945              		.cfi_def_cfa_offset 8
 3946              		.cfi_offset 4, -8
 3947              		.cfi_offset 14, -4
 3948 0016 0446     		mov	r4, r0
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3949              		.loc 1 3257 0
 3950 0018 FFF7FEFF 		bl	vPortEnterCritical
 3951              	.LVL339:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3952              		.loc 1 3259 0
 3953 001c 044B     		ldr	r3, .L377
 3954 001e 1B68     		ldr	r3, [r3]
 3955 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3956              		.loc 1 3260 0
 3957 0022 044B     		ldr	r3, .L377+4
 3958 0024 1B68     		ldr	r3, [r3]
 3959 0026 6360     		str	r3, [r4, #4]
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3960              		.loc 1 3262 0
 3961 0028 FFF7FEFF 		bl	vPortExitCritical
 3962              	.LVL340:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3963              		.loc 1 3263 0
 3964 002c 10BD     		pop	{r4, pc}
 3965              	.LVL341:
 3966              	.L378:
 3967 002e 00BF     		.align	2
 3968              	.L377:
 3969 0030 00000000 		.word	.LANCHOR17
 3970 0034 00000000 		.word	.LANCHOR15
 3971              		.cfi_endproc
 3972              	.LFE36:
 3974              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3975              		.align	1
 3976              		.global	vTaskInternalSetTimeOutState
 3977              		.syntax unified
 3978              		.thumb
 3979              		.thumb_func
 3980              		.fpu fpv5-d16
 3982              	vTaskInternalSetTimeOutState:
 3983              	.LFB37:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3984              		.loc 1 3267 0
 3985              		.cfi_startproc
 3986              		@ args = 0, pretend = 0, frame = 0
 3987              		@ frame_needed = 0, uses_anonymous_args = 0
 3988              		@ link register save eliminated.
 3989              	.LVL342:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3990              		.loc 1 3269 0
ARM GAS  /tmp/ccu8P93f.s 			page 175


 3991 0000 034B     		ldr	r3, .L380
 3992 0002 1B68     		ldr	r3, [r3]
 3993 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3994              		.loc 1 3270 0
 3995 0006 034B     		ldr	r3, .L380+4
 3996 0008 1B68     		ldr	r3, [r3]
 3997 000a 4360     		str	r3, [r0, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3998              		.loc 1 3271 0
 3999 000c 7047     		bx	lr
 4000              	.L381:
 4001 000e 00BF     		.align	2
 4002              	.L380:
 4003 0010 00000000 		.word	.LANCHOR17
 4004 0014 00000000 		.word	.LANCHOR15
 4005              		.cfi_endproc
 4006              	.LFE37:
 4008              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4009              		.align	1
 4010              		.global	xTaskCheckForTimeOut
 4011              		.syntax unified
 4012              		.thumb
 4013              		.thumb_func
 4014              		.fpu fpv5-d16
 4016              	xTaskCheckForTimeOut:
 4017              	.LFB38:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4018              		.loc 1 3275 0
 4019              		.cfi_startproc
 4020              		@ args = 0, pretend = 0, frame = 0
 4021              		@ frame_needed = 0, uses_anonymous_args = 0
 4022              	.LVL343:
 4023 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4024              	.LCFI43:
 4025              		.cfi_def_cfa_offset 24
 4026              		.cfi_offset 3, -24
 4027              		.cfi_offset 4, -20
 4028              		.cfi_offset 5, -16
 4029              		.cfi_offset 6, -12
 4030              		.cfi_offset 7, -8
 4031              		.cfi_offset 14, -4
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4032              		.loc 1 3278 0
 4033 0002 50B1     		cbz	r0, .L393
 4034 0004 0546     		mov	r5, r0
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4035              		.loc 1 3279 0
 4036 0006 89B9     		cbnz	r1, .L385
 4037              	.LBB209:
 4038              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4039              		.loc 2 195 0
 4040              		.syntax unified
 4041              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4042 0008 4FF05003 			mov r3, #80												
 4043 000c 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccu8P93f.s 			page 176


 4044 0010 BFF36F8F 		isb														
 4045 0014 BFF34F8F 		dsb														
 4046              	
 4047              	@ 0 "" 2
 4048              	.LVL344:
 4049              		.thumb
 4050              		.syntax unified
 4051              	.L386:
 4052 0018 FEE7     		b	.L386
 4053              	.L393:
 4054              	.LBE210:
 4055              	.LBE209:
 4056              	.LBB211:
 4057              	.LBB212:
 4058              		.syntax unified
 4059              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4060 001a 4FF05003 			mov r3, #80												
 4061 001e 83F31188 		msr basepri, r3											
 4062 0022 BFF36F8F 		isb														
 4063 0026 BFF34F8F 		dsb														
 4064              	
 4065              	@ 0 "" 2
 4066              	.LVL345:
 4067              		.thumb
 4068              		.syntax unified
 4069              	.L384:
 4070 002a FEE7     		b	.L384
 4071              	.L385:
 4072 002c 0C46     		mov	r4, r1
 4073              	.LBE212:
 4074              	.LBE211:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4075              		.loc 1 3281 0
 4076 002e FFF7FEFF 		bl	vPortEnterCritical
 4077              	.LVL346:
 4078              	.LBB213:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4079              		.loc 1 3284 0
 4080 0032 114B     		ldr	r3, .L395
 4081 0034 1968     		ldr	r1, [r3]
 4082              	.LVL347:
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4083              		.loc 1 3285 0
 4084 0036 6868     		ldr	r0, [r5, #4]
 4085 0038 0A1A     		subs	r2, r1, r0
 4086              	.LVL348:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4087              		.loc 1 3299 0
 4088 003a 2368     		ldr	r3, [r4]
 4089 003c B3F1FF3F 		cmp	r3, #-1
 4090 0040 16D0     		beq	.L390
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4091              		.loc 1 3309 0
 4092 0042 2F68     		ldr	r7, [r5]
 4093 0044 0D4E     		ldr	r6, .L395+4
 4094 0046 3668     		ldr	r6, [r6]
 4095 0048 B742     		cmp	r7, r6
ARM GAS  /tmp/ccu8P93f.s 			page 177


 4096 004a 01D0     		beq	.L388
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4097              		.loc 1 3309 0 is_stmt 0 discriminator 1
 4098 004c 8842     		cmp	r0, r1
 4099 004e 11D9     		bls	.L391
 4100              	.L388:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4101              		.loc 1 3318 0 is_stmt 1
 4102 0050 9342     		cmp	r3, r2
 4103 0052 03D8     		bhi	.L394
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4104              		.loc 1 3327 0
 4105 0054 0023     		movs	r3, #0
 4106 0056 2360     		str	r3, [r4]
 4107              	.LVL349:
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4108              		.loc 1 3328 0
 4109 0058 0124     		movs	r4, #1
 4110              	.LVL350:
 4111 005a 05E0     		b	.L387
 4112              	.LVL351:
 4113              	.L394:
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4114              		.loc 1 3321 0
 4115 005c 9B1A     		subs	r3, r3, r2
 4116 005e 2360     		str	r3, [r4]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4117              		.loc 1 3322 0
 4118 0060 2846     		mov	r0, r5
 4119 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4120              	.LVL352:
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4121              		.loc 1 3323 0
 4122 0066 0024     		movs	r4, #0
 4123              	.LVL353:
 4124              	.L387:
 4125              	.LBE213:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4126              		.loc 1 3331 0
 4127 0068 FFF7FEFF 		bl	vPortExitCritical
 4128              	.LVL354:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4129              		.loc 1 3334 0
 4130 006c 2046     		mov	r0, r4
 4131 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4132              	.LVL355:
 4133              	.L390:
 4134              	.LBB214:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4135              		.loc 1 3304 0
 4136 0070 0024     		movs	r4, #0
 4137              	.LVL356:
 4138 0072 F9E7     		b	.L387
 4139              	.LVL357:
 4140              	.L391:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4141              		.loc 1 3316 0
ARM GAS  /tmp/ccu8P93f.s 			page 178


 4142 0074 0124     		movs	r4, #1
 4143              	.LVL358:
 4144 0076 F7E7     		b	.L387
 4145              	.L396:
 4146              		.align	2
 4147              	.L395:
 4148 0078 00000000 		.word	.LANCHOR15
 4149 007c 00000000 		.word	.LANCHOR17
 4150              	.LBE214:
 4151              		.cfi_endproc
 4152              	.LFE38:
 4154              		.section	.text.vTaskMissedYield,"ax",%progbits
 4155              		.align	1
 4156              		.global	vTaskMissedYield
 4157              		.syntax unified
 4158              		.thumb
 4159              		.thumb_func
 4160              		.fpu fpv5-d16
 4162              	vTaskMissedYield:
 4163              	.LFB39:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4164              		.loc 1 3338 0
 4165              		.cfi_startproc
 4166              		@ args = 0, pretend = 0, frame = 0
 4167              		@ frame_needed = 0, uses_anonymous_args = 0
 4168              		@ link register save eliminated.
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4169              		.loc 1 3339 0
 4170 0000 014B     		ldr	r3, .L398
 4171 0002 0122     		movs	r2, #1
 4172 0004 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4173              		.loc 1 3340 0
 4174 0006 7047     		bx	lr
 4175              	.L399:
 4176              		.align	2
 4177              	.L398:
 4178 0008 00000000 		.word	.LANCHOR18
 4179              		.cfi_endproc
 4180              	.LFE39:
 4182              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4183              		.align	1
 4184              		.global	uxTaskGetTaskNumber
 4185              		.syntax unified
 4186              		.thumb
 4187              		.thumb_func
 4188              		.fpu fpv5-d16
 4190              	uxTaskGetTaskNumber:
 4191              	.LFB40:
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4192              		.loc 1 3346 0
 4193              		.cfi_startproc
 4194              		@ args = 0, pretend = 0, frame = 0
 4195              		@ frame_needed = 0, uses_anonymous_args = 0
 4196              		@ link register save eliminated.
 4197              	.LVL359:
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccu8P93f.s 			page 179


 4198              		.loc 1 3350 0
 4199 0000 08B1     		cbz	r0, .L402
 4200              	.LVL360:
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4201              		.loc 1 3353 0
 4202 0002 806C     		ldr	r0, [r0, #72]
 4203              	.LVL361:
 4204 0004 7047     		bx	lr
 4205              	.LVL362:
 4206              	.L402:
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4207              		.loc 1 3357 0
 4208 0006 0020     		movs	r0, #0
 4209              	.LVL363:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4210              		.loc 1 3361 0
 4211 0008 7047     		bx	lr
 4212              		.cfi_endproc
 4213              	.LFE40:
 4215              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4216              		.align	1
 4217              		.global	vTaskSetTaskNumber
 4218              		.syntax unified
 4219              		.thumb
 4220              		.thumb_func
 4221              		.fpu fpv5-d16
 4223              	vTaskSetTaskNumber:
 4224              	.LFB41:
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4225              		.loc 1 3369 0
 4226              		.cfi_startproc
 4227              		@ args = 0, pretend = 0, frame = 0
 4228              		@ frame_needed = 0, uses_anonymous_args = 0
 4229              		@ link register save eliminated.
 4230              	.LVL364:
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4231              		.loc 1 3372 0
 4232 0000 00B1     		cbz	r0, .L403
 4233              	.LVL365:
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4234              		.loc 1 3375 0
 4235 0002 8164     		str	r1, [r0, #72]
 4236              	.LVL366:
 4237              	.L403:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4238              		.loc 1 3377 0
 4239 0004 7047     		bx	lr
 4240              		.cfi_endproc
 4241              	.LFE41:
 4243              		.section	.text.vTaskGetInfo,"ax",%progbits
 4244              		.align	1
 4245              		.global	vTaskGetInfo
 4246              		.syntax unified
 4247              		.thumb
 4248              		.thumb_func
 4249              		.fpu fpv5-d16
 4251              	vTaskGetInfo:
ARM GAS  /tmp/ccu8P93f.s 			page 180


 4252              	.LFB45:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4253              		.loc 1 3671 0
 4254              		.cfi_startproc
 4255              		@ args = 0, pretend = 0, frame = 0
 4256              		@ frame_needed = 0, uses_anonymous_args = 0
 4257              	.LVL367:
 4258 0000 70B5     		push	{r4, r5, r6, lr}
 4259              	.LCFI44:
 4260              		.cfi_def_cfa_offset 16
 4261              		.cfi_offset 4, -16
 4262              		.cfi_offset 5, -12
 4263              		.cfi_offset 6, -8
 4264              		.cfi_offset 14, -4
 4265 0002 0C46     		mov	r4, r1
 4266 0004 1646     		mov	r6, r2
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4267              		.loc 1 3675 0
 4268 0006 0546     		mov	r5, r0
 4269 0008 D0B1     		cbz	r0, .L414
 4270              	.LVL368:
 4271              	.L406:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4272              		.loc 1 3677 0 discriminator 4
 4273 000a 2560     		str	r5, [r4]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4274              		.loc 1 3678 0 discriminator 4
 4275 000c 05F13402 		add	r2, r5, #52
 4276 0010 6260     		str	r2, [r4, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4277              		.loc 1 3679 0 discriminator 4
 4278 0012 EA6A     		ldr	r2, [r5, #44]
 4279 0014 2261     		str	r2, [r4, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4280              		.loc 1 3680 0 discriminator 4
 4281 0016 2A6B     		ldr	r2, [r5, #48]
 4282 0018 E261     		str	r2, [r4, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4283              		.loc 1 3681 0 discriminator 4
 4284 001a 6A6C     		ldr	r2, [r5, #68]
 4285 001c A260     		str	r2, [r4, #8]
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4286              		.loc 1 3685 0 discriminator 4
 4287 001e EA6C     		ldr	r2, [r5, #76]
 4288 0020 6261     		str	r2, [r4, #20]
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4289              		.loc 1 3699 0 discriminator 4
 4290 0022 0022     		movs	r2, #0
 4291 0024 A261     		str	r2, [r4, #24]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4292              		.loc 1 3706 0 discriminator 4
 4293 0026 052B     		cmp	r3, #5
 4294 0028 19D0     		beq	.L407
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4295              		.loc 1 3708 0
 4296 002a 124A     		ldr	r2, .L418
 4297 002c 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccu8P93f.s 			page 181


 4298 002e AA42     		cmp	r2, r5
 4299 0030 09D0     		beq	.L415
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4300              		.loc 1 3714 0
 4301 0032 2373     		strb	r3, [r4, #12]
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4302              		.loc 1 3721 0
 4303 0034 032B     		cmp	r3, #3
 4304 0036 09D0     		beq	.L416
 4305              	.LVL369:
 4306              	.L409:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4307              		.loc 1 3743 0
 4308 0038 B6B9     		cbnz	r6, .L417
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4309              		.loc 1 3757 0
 4310 003a 0023     		movs	r3, #0
 4311 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4312              	.L405:
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4313              		.loc 1 3759 0
 4314 003e 70BD     		pop	{r4, r5, r6, pc}
 4315              	.LVL370:
 4316              	.L414:
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4317              		.loc 1 3675 0 discriminator 1
 4318 0040 0C4A     		ldr	r2, .L418
 4319              	.LVL371:
 4320 0042 1568     		ldr	r5, [r2]
 4321              	.LVL372:
 4322 0044 E1E7     		b	.L406
 4323              	.LVL373:
 4324              	.L415:
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4325              		.loc 1 3710 0
 4326 0046 0023     		movs	r3, #0
 4327              	.LVL374:
 4328 0048 2373     		strb	r3, [r4, #12]
 4329 004a F5E7     		b	.L409
 4330              	.LVL375:
 4331              	.L416:
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4332              		.loc 1 3723 0
 4333 004c FFF7FEFF 		bl	vTaskSuspendAll
 4334              	.LVL376:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4335              		.loc 1 3725 0
 4336 0050 AB6A     		ldr	r3, [r5, #40]
 4337 0052 0BB1     		cbz	r3, .L410
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4338              		.loc 1 3727 0
 4339 0054 0223     		movs	r3, #2
 4340 0056 2373     		strb	r3, [r4, #12]
 4341              	.L410:
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4342              		.loc 1 3730 0
 4343 0058 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  /tmp/ccu8P93f.s 			page 182


 4344              	.LVL377:
 4345 005c ECE7     		b	.L409
 4346              	.LVL378:
 4347              	.L407:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4348              		.loc 1 3738 0
 4349 005e 2846     		mov	r0, r5
 4350 0060 FFF7FEFF 		bl	eTaskGetState
 4351              	.LVL379:
 4352 0064 2073     		strb	r0, [r4, #12]
 4353 0066 E7E7     		b	.L409
 4354              	.L417:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4355              		.loc 1 3751 0
 4356 0068 286B     		ldr	r0, [r5, #48]
 4357 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4358              	.LVL380:
 4359 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4360 0070 E5E7     		b	.L405
 4361              	.L419:
 4362 0072 00BF     		.align	2
 4363              	.L418:
 4364 0074 00000000 		.word	.LANCHOR10
 4365              		.cfi_endproc
 4366              	.LFE45:
 4368              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4369              		.align	1
 4370              		.syntax unified
 4371              		.thumb
 4372              		.thumb_func
 4373              		.fpu fpv5-d16
 4375              	prvListTasksWithinSingleList:
 4376              	.LFB46:
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4377              		.loc 1 3767 0
 4378              		.cfi_startproc
 4379              		@ args = 0, pretend = 0, frame = 0
 4380              		@ frame_needed = 0, uses_anonymous_args = 0
 4381              	.LVL381:
 4382 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4383              	.LCFI45:
 4384              		.cfi_def_cfa_offset 32
 4385              		.cfi_offset 4, -32
 4386              		.cfi_offset 5, -28
 4387              		.cfi_offset 6, -24
 4388              		.cfi_offset 7, -20
 4389              		.cfi_offset 8, -16
 4390              		.cfi_offset 9, -12
 4391              		.cfi_offset 10, -8
 4392              		.cfi_offset 14, -4
 4393              	.LVL382:
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4394              		.loc 1 3771 0
 4395 0004 0B68     		ldr	r3, [r1]
 4396 0006 3BB3     		cbz	r3, .L425
 4397              	.LVL383:
 4398              	.LBB215:
ARM GAS  /tmp/ccu8P93f.s 			page 183


3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4399              		.loc 1 3773 0
 4400 0008 4B68     		ldr	r3, [r1, #4]
 4401 000a 5B68     		ldr	r3, [r3, #4]
 4402 000c 4B60     		str	r3, [r1, #4]
 4403 000e 01F10809 		add	r9, r1, #8
 4404 0012 4B45     		cmp	r3, r9
 4405 0014 07D0     		beq	.L427
 4406              	.L422:
 4407 0016 9046     		mov	r8, r2
 4408 0018 0C46     		mov	r4, r1
 4409 001a 0746     		mov	r7, r0
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4410              		.loc 1 3773 0 is_stmt 0 discriminator 3
 4411 001c 4B68     		ldr	r3, [r1, #4]
 4412 001e D3F80CA0 		ldr	r10, [r3, #12]
 4413              	.LVL384:
 4414              	.LBE215:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4415              		.loc 1 3769 0 is_stmt 1 discriminator 3
 4416 0022 0025     		movs	r5, #0
 4417 0024 10E0     		b	.L424
 4418              	.LVL385:
 4419              	.L427:
 4420              	.LBB216:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4421              		.loc 1 3773 0 discriminator 1
 4422 0026 5B68     		ldr	r3, [r3, #4]
 4423 0028 4B60     		str	r3, [r1, #4]
 4424 002a F4E7     		b	.L422
 4425              	.LVL386:
 4426              	.L423:
 4427              	.LBE216:
 4428              	.LBB217:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4429              		.loc 1 3781 0 discriminator 3
 4430 002c 6368     		ldr	r3, [r4, #4]
 4431 002e DE68     		ldr	r6, [r3, #12]
 4432              	.LVL387:
 4433              	.LBE217:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4434              		.loc 1 3782 0 discriminator 3
 4435 0030 05EBC503 		add	r3, r5, r5, lsl #3
 4436 0034 9900     		lsls	r1, r3, #2
 4437 0036 4346     		mov	r3, r8
 4438 0038 0122     		movs	r2, #1
 4439 003a 3944     		add	r1, r1, r7
 4440 003c 3046     		mov	r0, r6
 4441 003e FFF7FEFF 		bl	vTaskGetInfo
 4442              	.LVL388:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4443              		.loc 1 3783 0 discriminator 3
 4444 0042 0135     		adds	r5, r5, #1
 4445              	.LVL389:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4446              		.loc 1 3784 0 discriminator 3
 4447 0044 B245     		cmp	r10, r6
ARM GAS  /tmp/ccu8P93f.s 			page 184


 4448 0046 08D0     		beq	.L420
 4449              	.LVL390:
 4450              	.L424:
 4451              	.LBB218:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4452              		.loc 1 3781 0
 4453 0048 6368     		ldr	r3, [r4, #4]
 4454 004a 5B68     		ldr	r3, [r3, #4]
 4455 004c 6360     		str	r3, [r4, #4]
 4456 004e 9945     		cmp	r9, r3
 4457 0050 ECD1     		bne	.L423
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4458              		.loc 1 3781 0 is_stmt 0 discriminator 1
 4459 0052 5B68     		ldr	r3, [r3, #4]
 4460 0054 6360     		str	r3, [r4, #4]
 4461 0056 E9E7     		b	.L423
 4462              	.LVL391:
 4463              	.L425:
 4464              	.LBE218:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4465              		.loc 1 3769 0 is_stmt 1
 4466 0058 0025     		movs	r5, #0
 4467              	.LVL392:
 4468              	.L420:
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4469              		.loc 1 3792 0
 4470 005a 2846     		mov	r0, r5
 4471 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4472              		.cfi_endproc
 4473              	.LFE46:
 4475              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4476              		.align	1
 4477              		.global	uxTaskGetSystemState
 4478              		.syntax unified
 4479              		.thumb
 4480              		.thumb_func
 4481              		.fpu fpv5-d16
 4483              	uxTaskGetSystemState:
 4484              	.LFB27:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4485              		.loc 1 2506 0
 4486              		.cfi_startproc
 4487              		@ args = 0, pretend = 0, frame = 0
 4488              		@ frame_needed = 0, uses_anonymous_args = 0
 4489              	.LVL393:
 4490 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4491              	.LCFI46:
 4492              		.cfi_def_cfa_offset 24
 4493              		.cfi_offset 3, -24
 4494              		.cfi_offset 4, -20
 4495              		.cfi_offset 5, -16
 4496              		.cfi_offset 6, -12
 4497              		.cfi_offset 7, -8
 4498              		.cfi_offset 14, -4
 4499 0002 0746     		mov	r7, r0
 4500 0004 0C46     		mov	r4, r1
 4501 0006 1646     		mov	r6, r2
ARM GAS  /tmp/ccu8P93f.s 			page 185


 4502              	.LVL394:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4503              		.loc 1 2509 0
 4504 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4505              	.LVL395:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4506              		.loc 1 2512 0
 4507 000c 224B     		ldr	r3, .L433
 4508 000e 1B68     		ldr	r3, [r3]
 4509 0010 A342     		cmp	r3, r4
 4510 0012 3BD8     		bhi	.L431
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4511              		.loc 1 2507 0
 4512 0014 3824     		movs	r4, #56
 4513              	.LVL396:
 4514 0016 0025     		movs	r5, #0
 4515              	.LVL397:
 4516              	.L430:
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4517              		.loc 1 2518 0 discriminator 1
 4518 0018 013C     		subs	r4, r4, #1
 4519              	.LVL398:
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4520              		.loc 1 2519 0 discriminator 1
 4521 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4522 001e 9800     		lsls	r0, r3, #2
 4523 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4524 0024 9300     		lsls	r3, r2, #2
 4525 0026 0122     		movs	r2, #1
 4526 0028 1C49     		ldr	r1, .L433+4
 4527 002a 1944     		add	r1, r1, r3
 4528 002c 3844     		add	r0, r0, r7
 4529 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4530              	.LVL399:
 4531 0032 0544     		add	r5, r5, r0
 4532              	.LVL400:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4533              		.loc 1 2521 0 discriminator 1
 4534 0034 002C     		cmp	r4, #0
 4535 0036 EFD1     		bne	.L430
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4536              		.loc 1 2525 0
 4537 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4538 003c 9800     		lsls	r0, r3, #2
 4539 003e 184B     		ldr	r3, .L433+8
 4540 0040 1968     		ldr	r1, [r3]
 4541 0042 0222     		movs	r2, #2
 4542 0044 3844     		add	r0, r0, r7
 4543 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4544              	.LVL401:
 4545 004a 2C18     		adds	r4, r5, r0
 4546              	.LVL402:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4547              		.loc 1 2526 0
 4548 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4549 0050 9800     		lsls	r0, r3, #2
 4550 0052 144B     		ldr	r3, .L433+12
ARM GAS  /tmp/ccu8P93f.s 			page 186


 4551 0054 1968     		ldr	r1, [r3]
 4552 0056 0222     		movs	r2, #2
 4553 0058 3844     		add	r0, r0, r7
 4554 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4555              	.LVL403:
 4556 005e 0444     		add	r4, r4, r0
 4557              	.LVL404:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4558              		.loc 1 2532 0
 4559 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4560 0064 9800     		lsls	r0, r3, #2
 4561 0066 0422     		movs	r2, #4
 4562 0068 0F49     		ldr	r1, .L433+16
 4563 006a 3844     		add	r0, r0, r7
 4564 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4565              	.LVL405:
 4566 0070 0444     		add	r4, r4, r0
 4567              	.LVL406:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4568              		.loc 1 2540 0
 4569 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4570 0076 9800     		lsls	r0, r3, #2
 4571 0078 0322     		movs	r2, #3
 4572 007a 0C49     		ldr	r1, .L433+20
 4573 007c 3844     		add	r0, r0, r7
 4574 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4575              	.LVL407:
 4576 0082 0444     		add	r4, r4, r0
 4577              	.LVL408:
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4578              		.loc 1 2557 0
 4579 0084 1EB1     		cbz	r6, .L429
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4580              		.loc 1 2559 0
 4581 0086 0023     		movs	r3, #0
 4582 0088 3360     		str	r3, [r6]
 4583 008a 00E0     		b	.L429
 4584              	.LVL409:
 4585              	.L431:
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4586              		.loc 1 2507 0
 4587 008c 0024     		movs	r4, #0
 4588              	.LVL410:
 4589              	.L429:
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4590              		.loc 1 2569 0
 4591 008e FFF7FEFF 		bl	xTaskResumeAll
 4592              	.LVL411:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4593              		.loc 1 2572 0
 4594 0092 2046     		mov	r0, r4
 4595 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4596              	.LVL412:
 4597              	.L434:
 4598 0096 00BF     		.align	2
 4599              	.L433:
 4600 0098 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/ccu8P93f.s 			page 187


 4601 009c 00000000 		.word	.LANCHOR4
 4602 00a0 00000000 		.word	.LANCHOR2
 4603 00a4 00000000 		.word	.LANCHOR8
 4604 00a8 00000000 		.word	.LANCHOR7
 4605 00ac 00000000 		.word	.LANCHOR0
 4606              		.cfi_endproc
 4607              	.LFE27:
 4609              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4610              		.align	1
 4611              		.global	uxTaskGetStackHighWaterMark
 4612              		.syntax unified
 4613              		.thumb
 4614              		.thumb_func
 4615              		.fpu fpv5-d16
 4617              	uxTaskGetStackHighWaterMark:
 4618              	.LFB48:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4619              		.loc 1 3860 0
 4620              		.cfi_startproc
 4621              		@ args = 0, pretend = 0, frame = 0
 4622              		@ frame_needed = 0, uses_anonymous_args = 0
 4623              	.LVL413:
 4624 0000 08B5     		push	{r3, lr}
 4625              	.LCFI47:
 4626              		.cfi_def_cfa_offset 8
 4627              		.cfi_offset 3, -8
 4628              		.cfi_offset 14, -4
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4629              		.loc 1 3865 0
 4630 0002 0346     		mov	r3, r0
 4631 0004 18B1     		cbz	r0, .L438
 4632              	.LVL414:
 4633              	.L436:
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4634              		.loc 1 3877 0 discriminator 4
 4635 0006 186B     		ldr	r0, [r3, #48]
 4636 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4637              	.LVL415:
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4638              		.loc 1 3880 0 discriminator 4
 4639 000c 08BD     		pop	{r3, pc}
 4640              	.LVL416:
 4641              	.L438:
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4642              		.loc 1 3865 0 discriminator 1
 4643 000e 014B     		ldr	r3, .L439
 4644 0010 1B68     		ldr	r3, [r3]
 4645              	.LVL417:
 4646 0012 F8E7     		b	.L436
 4647              	.L440:
 4648              		.align	2
 4649              	.L439:
 4650 0014 00000000 		.word	.LANCHOR10
 4651              		.cfi_endproc
 4652              	.LFE48:
 4654              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4655              		.align	1
ARM GAS  /tmp/ccu8P93f.s 			page 188


 4656              		.global	xTaskGetCurrentTaskHandle
 4657              		.syntax unified
 4658              		.thumb
 4659              		.thumb_func
 4660              		.fpu fpv5-d16
 4662              	xTaskGetCurrentTaskHandle:
 4663              	.LFB51:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4664              		.loc 1 3970 0
 4665              		.cfi_startproc
 4666              		@ args = 0, pretend = 0, frame = 0
 4667              		@ frame_needed = 0, uses_anonymous_args = 0
 4668              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4669              		.loc 1 3976 0
 4670 0000 014B     		ldr	r3, .L442
 4671 0002 1868     		ldr	r0, [r3]
 4672              	.LVL418:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4673              		.loc 1 3979 0
 4674 0004 7047     		bx	lr
 4675              	.L443:
 4676 0006 00BF     		.align	2
 4677              	.L442:
 4678 0008 00000000 		.word	.LANCHOR10
 4679              		.cfi_endproc
 4680              	.LFE51:
 4682              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4683              		.align	1
 4684              		.global	xTaskGetSchedulerState
 4685              		.syntax unified
 4686              		.thumb
 4687              		.thumb_func
 4688              		.fpu fpv5-d16
 4690              	xTaskGetSchedulerState:
 4691              	.LFB52:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4692              		.loc 1 3987 0
 4693              		.cfi_startproc
 4694              		@ args = 0, pretend = 0, frame = 0
 4695              		@ frame_needed = 0, uses_anonymous_args = 0
 4696              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4697              		.loc 1 3990 0
 4698 0000 054B     		ldr	r3, .L449
 4699 0002 1B68     		ldr	r3, [r3]
 4700 0004 33B1     		cbz	r3, .L446
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4701              		.loc 1 3996 0
 4702 0006 054B     		ldr	r3, .L449+4
 4703 0008 1B68     		ldr	r3, [r3]
 4704 000a 0BB1     		cbz	r3, .L448
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4705              		.loc 1 4002 0
 4706 000c 0020     		movs	r0, #0
 4707              	.LVL419:
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 189


 4708              		.loc 1 4007 0
 4709 000e 7047     		bx	lr
 4710              	.LVL420:
 4711              	.L448:
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4712              		.loc 1 3998 0
 4713 0010 0220     		movs	r0, #2
 4714 0012 7047     		bx	lr
 4715              	.L446:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4716              		.loc 1 3992 0
 4717 0014 0120     		movs	r0, #1
 4718 0016 7047     		bx	lr
 4719              	.L450:
 4720              		.align	2
 4721              	.L449:
 4722 0018 00000000 		.word	.LANCHOR11
 4723 001c 00000000 		.word	.LANCHOR16
 4724              		.cfi_endproc
 4725              	.LFE52:
 4727              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4728              		.align	1
 4729              		.global	xTaskPriorityInherit
 4730              		.syntax unified
 4731              		.thumb
 4732              		.thumb_func
 4733              		.fpu fpv5-d16
 4735              	xTaskPriorityInherit:
 4736              	.LFB53:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4737              		.loc 1 4015 0
 4738              		.cfi_startproc
 4739              		@ args = 0, pretend = 0, frame = 0
 4740              		@ frame_needed = 0, uses_anonymous_args = 0
 4741              	.LVL421:
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4742              		.loc 1 4022 0
 4743 0000 0028     		cmp	r0, #0
 4744 0002 40D0     		beq	.L457
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4745              		.loc 1 4015 0
 4746 0004 38B5     		push	{r3, r4, r5, lr}
 4747              	.LCFI48:
 4748              		.cfi_def_cfa_offset 16
 4749              		.cfi_offset 3, -16
 4750              		.cfi_offset 4, -12
 4751              		.cfi_offset 5, -8
 4752              		.cfi_offset 14, -4
 4753 0006 0546     		mov	r5, r0
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4754              		.loc 1 4027 0
 4755 0008 C26A     		ldr	r2, [r0, #44]
 4756 000a 2049     		ldr	r1, .L465
 4757 000c 0968     		ldr	r1, [r1]
 4758 000e C96A     		ldr	r1, [r1, #44]
 4759 0010 8A42     		cmp	r2, r1
 4760 0012 2ED2     		bcs	.L453
ARM GAS  /tmp/ccu8P93f.s 			page 190


4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4761              		.loc 1 4032 0
 4762 0014 8169     		ldr	r1, [r0, #24]
 4763 0016 0029     		cmp	r1, #0
 4764 0018 05DB     		blt	.L454
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4765              		.loc 1 4034 0
 4766 001a 1C49     		ldr	r1, .L465
 4767 001c 0968     		ldr	r1, [r1]
 4768 001e C96A     		ldr	r1, [r1, #44]
 4769 0020 C1F13801 		rsb	r1, r1, #56
 4770 0024 8161     		str	r1, [r0, #24]
 4771              	.L454:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4772              		.loc 1 4043 0
 4773 0026 6869     		ldr	r0, [r5, #20]
 4774              	.LVL422:
 4775 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4776 002c 9100     		lsls	r1, r2, #2
 4777 002e 184A     		ldr	r2, .L465+4
 4778 0030 0A44     		add	r2, r2, r1
 4779 0032 9042     		cmp	r0, r2
 4780 0034 05D0     		beq	.L463
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4781              		.loc 1 4064 0
 4782 0036 154A     		ldr	r2, .L465
 4783 0038 1268     		ldr	r2, [r2]
 4784 003a D26A     		ldr	r2, [r2, #44]
 4785 003c EA62     		str	r2, [r5, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4786              		.loc 1 4070 0
 4787 003e 0120     		movs	r0, #1
 4788              	.LVL423:
 4789              	.L451:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4790              		.loc 1 4097 0
 4791 0040 38BD     		pop	{r3, r4, r5, pc}
 4792              	.LVL424:
 4793              	.L463:
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4794              		.loc 1 4045 0
 4795 0042 2C1D     		adds	r4, r5, #4
 4796 0044 2046     		mov	r0, r4
 4797 0046 FFF7FEFF 		bl	uxListRemove
 4798              	.LVL425:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4799              		.loc 1 4058 0
 4800 004a 104B     		ldr	r3, .L465
 4801 004c 1B68     		ldr	r3, [r3]
 4802 004e DB6A     		ldr	r3, [r3, #44]
 4803 0050 EB62     		str	r3, [r5, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4804              		.loc 1 4059 0
 4805 0052 104A     		ldr	r2, .L465+8
 4806 0054 1268     		ldr	r2, [r2]
 4807 0056 9342     		cmp	r3, r2
 4808 0058 01D9     		bls	.L456
ARM GAS  /tmp/ccu8P93f.s 			page 191


4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4809              		.loc 1 4059 0 is_stmt 0 discriminator 1
 4810 005a 0E4A     		ldr	r2, .L465+8
 4811 005c 1360     		str	r3, [r2]
 4812              	.L456:
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4813              		.loc 1 4059 0 discriminator 3
 4814 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4815 0062 9A00     		lsls	r2, r3, #2
 4816 0064 2146     		mov	r1, r4
 4817 0066 0A48     		ldr	r0, .L465+4
 4818 0068 1044     		add	r0, r0, r2
 4819 006a FFF7FEFF 		bl	vListInsertEnd
 4820              	.LVL426:
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4821              		.loc 1 4070 0 is_stmt 1 discriminator 3
 4822 006e 0120     		movs	r0, #1
 4823 0070 E6E7     		b	.L451
 4824              	.LVL427:
 4825              	.L453:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4826              		.loc 1 4074 0
 4827 0072 C26C     		ldr	r2, [r0, #76]
 4828 0074 054B     		ldr	r3, .L465
 4829 0076 1B68     		ldr	r3, [r3]
 4830 0078 DB6A     		ldr	r3, [r3, #44]
 4831 007a 9A42     		cmp	r2, r3
 4832 007c 01D2     		bcs	.L464
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4833              		.loc 1 4083 0
 4834 007e 0120     		movs	r0, #1
 4835              	.LVL428:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4836              		.loc 1 4096 0
 4837 0080 DEE7     		b	.L451
 4838              	.LVL429:
 4839              	.L464:
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4840              		.loc 1 4017 0
 4841 0082 0020     		movs	r0, #0
 4842              	.LVL430:
 4843 0084 DCE7     		b	.L451
 4844              	.LVL431:
 4845              	.L457:
 4846              	.LCFI49:
 4847              		.cfi_def_cfa_offset 0
 4848              		.cfi_restore 3
 4849              		.cfi_restore 4
 4850              		.cfi_restore 5
 4851              		.cfi_restore 14
 4852 0086 0020     		movs	r0, #0
 4853              	.LVL432:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4854              		.loc 1 4097 0
 4855 0088 7047     		bx	lr
 4856              	.L466:
 4857 008a 00BF     		.align	2
ARM GAS  /tmp/ccu8P93f.s 			page 192


 4858              	.L465:
 4859 008c 00000000 		.word	.LANCHOR10
 4860 0090 00000000 		.word	.LANCHOR4
 4861 0094 00000000 		.word	.LANCHOR13
 4862              		.cfi_endproc
 4863              	.LFE53:
 4865              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4866              		.align	1
 4867              		.global	xTaskPriorityDisinherit
 4868              		.syntax unified
 4869              		.thumb
 4870              		.thumb_func
 4871              		.fpu fpv5-d16
 4873              	xTaskPriorityDisinherit:
 4874              	.LFB54:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4875              		.loc 1 4105 0
 4876              		.cfi_startproc
 4877              		@ args = 0, pretend = 0, frame = 0
 4878              		@ frame_needed = 0, uses_anonymous_args = 0
 4879              	.LVL433:
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4880              		.loc 1 4109 0
 4881 0000 0028     		cmp	r0, #0
 4882 0002 38D0     		beq	.L474
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4883              		.loc 1 4105 0
 4884 0004 38B5     		push	{r3, r4, r5, lr}
 4885              	.LCFI50:
 4886              		.cfi_def_cfa_offset 16
 4887              		.cfi_offset 3, -16
 4888              		.cfi_offset 4, -12
 4889              		.cfi_offset 5, -8
 4890              		.cfi_offset 14, -4
 4891 0006 0446     		mov	r4, r0
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4892              		.loc 1 4115 0
 4893 0008 1E4A     		ldr	r2, .L481
 4894 000a 1268     		ldr	r2, [r2]
 4895 000c 8242     		cmp	r2, r0
 4896 000e 08D0     		beq	.L469
 4897              	.LBB219:
 4898              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4899              		.loc 2 195 0
 4900              		.syntax unified
 4901              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4902 0010 4FF05003 			mov r3, #80												
 4903 0014 83F31188 		msr basepri, r3											
 4904 0018 BFF36F8F 		isb														
 4905 001c BFF34F8F 		dsb														
 4906              	
 4907              	@ 0 "" 2
 4908              	.LVL434:
 4909              		.thumb
 4910              		.syntax unified
 4911              	.L470:
ARM GAS  /tmp/ccu8P93f.s 			page 193


 4912 0020 FEE7     		b	.L470
 4913              	.L469:
 4914              	.LBE220:
 4915              	.LBE219:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4916              		.loc 1 4116 0
 4917 0022 026D     		ldr	r2, [r0, #80]
 4918 0024 42B9     		cbnz	r2, .L471
 4919              	.LBB221:
 4920              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4921              		.loc 2 195 0
 4922              		.syntax unified
 4923              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4924 0026 4FF05003 			mov r3, #80												
 4925 002a 83F31188 		msr basepri, r3											
 4926 002e BFF36F8F 		isb														
 4927 0032 BFF34F8F 		dsb														
 4928              	
 4929              	@ 0 "" 2
 4930              	.LVL435:
 4931              		.thumb
 4932              		.syntax unified
 4933              	.L472:
 4934 0036 FEE7     		b	.L472
 4935              	.L471:
 4936              	.LBE222:
 4937              	.LBE221:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4938              		.loc 1 4117 0
 4939 0038 013A     		subs	r2, r2, #1
 4940 003a 0265     		str	r2, [r0, #80]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4941              		.loc 1 4121 0
 4942 003c C06A     		ldr	r0, [r0, #44]
 4943              	.LVL436:
 4944 003e E16C     		ldr	r1, [r4, #76]
 4945 0040 8842     		cmp	r0, r1
 4946 0042 1AD0     		beq	.L475
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4947              		.loc 1 4124 0
 4948 0044 DAB9     		cbnz	r2, .L476
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4949              		.loc 1 4131 0
 4950 0046 251D     		adds	r5, r4, #4
 4951 0048 2846     		mov	r0, r5
 4952 004a FFF7FEFF 		bl	uxListRemove
 4953              	.LVL437:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4954              		.loc 1 4143 0
 4955 004e E36C     		ldr	r3, [r4, #76]
 4956 0050 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4957              		.loc 1 4148 0
 4958 0052 C3F13802 		rsb	r2, r3, #56
 4959 0056 A261     		str	r2, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 194


 4960              		.loc 1 4149 0
 4961 0058 0B4A     		ldr	r2, .L481+4
 4962 005a 1268     		ldr	r2, [r2]
 4963 005c 9342     		cmp	r3, r2
 4964 005e 01D9     		bls	.L473
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4965              		.loc 1 4149 0 is_stmt 0 discriminator 1
 4966 0060 094A     		ldr	r2, .L481+4
 4967 0062 1360     		str	r3, [r2]
 4968              	.L473:
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4969              		.loc 1 4149 0 discriminator 3
 4970 0064 2946     		mov	r1, r5
 4971 0066 094A     		ldr	r2, .L481+8
 4972 0068 1420     		movs	r0, #20
 4973 006a 00FB0320 		mla	r0, r0, r3, r2
 4974 006e FFF7FEFF 		bl	vListInsertEnd
 4975              	.LVL438:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4976              		.loc 1 4159 0 is_stmt 1 discriminator 3
 4977 0072 0120     		movs	r0, #1
 4978              	.LVL439:
 4979              	.L467:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4980              		.loc 1 4177 0
 4981 0074 38BD     		pop	{r3, r4, r5, pc}
 4982              	.LVL440:
 4983              	.L474:
 4984              	.LCFI51:
 4985              		.cfi_def_cfa_offset 0
 4986              		.cfi_restore 3
 4987              		.cfi_restore 4
 4988              		.cfi_restore 5
 4989              		.cfi_restore 14
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4990              		.loc 1 4107 0
 4991 0076 0020     		movs	r0, #0
 4992              	.LVL441:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4993              		.loc 1 4177 0
 4994 0078 7047     		bx	lr
 4995              	.LVL442:
 4996              	.L475:
 4997              	.LCFI52:
 4998              		.cfi_def_cfa_offset 16
 4999              		.cfi_offset 3, -16
 5000              		.cfi_offset 4, -12
 5001              		.cfi_offset 5, -8
 5002              		.cfi_offset 14, -4
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5003              		.loc 1 4107 0
 5004 007a 0020     		movs	r0, #0
 5005 007c FAE7     		b	.L467
 5006              	.L476:
 5007 007e 0020     		movs	r0, #0
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5008              		.loc 1 4176 0
ARM GAS  /tmp/ccu8P93f.s 			page 195


 5009 0080 F8E7     		b	.L467
 5010              	.L482:
 5011 0082 00BF     		.align	2
 5012              	.L481:
 5013 0084 00000000 		.word	.LANCHOR10
 5014 0088 00000000 		.word	.LANCHOR13
 5015 008c 00000000 		.word	.LANCHOR4
 5016              		.cfi_endproc
 5017              	.LFE54:
 5019              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5020              		.align	1
 5021              		.global	vTaskPriorityDisinheritAfterTimeout
 5022              		.syntax unified
 5023              		.thumb
 5024              		.thumb_func
 5025              		.fpu fpv5-d16
 5027              	vTaskPriorityDisinheritAfterTimeout:
 5028              	.LFB55:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5029              		.loc 1 4185 0
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 0
 5032              		@ frame_needed = 0, uses_anonymous_args = 0
 5033              	.LVL443:
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5034              		.loc 1 4190 0
 5035 0000 0028     		cmp	r0, #0
 5036 0002 45D0     		beq	.L493
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5037              		.loc 1 4185 0
 5038 0004 38B5     		push	{r3, r4, r5, lr}
 5039              	.LCFI53:
 5040              		.cfi_def_cfa_offset 16
 5041              		.cfi_offset 3, -16
 5042              		.cfi_offset 4, -12
 5043              		.cfi_offset 5, -8
 5044              		.cfi_offset 14, -4
 5045 0006 0346     		mov	r3, r0
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5046              		.loc 1 4194 0
 5047 0008 006D     		ldr	r0, [r0, #80]
 5048              	.LVL444:
 5049 000a 40B9     		cbnz	r0, .L485
 5050              	.LBB223:
 5051              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5052              		.loc 2 195 0
 5053              		.syntax unified
 5054              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5055 000c 4FF05003 			mov r3, #80												
 5056 0010 83F31188 		msr basepri, r3											
 5057 0014 BFF36F8F 		isb														
 5058 0018 BFF34F8F 		dsb														
 5059              	
 5060              	@ 0 "" 2
 5061              	.LVL445:
 5062              		.thumb
ARM GAS  /tmp/ccu8P93f.s 			page 196


 5063              		.syntax unified
 5064              	.L486:
 5065 001c FEE7     		b	.L486
 5066              	.LVL446:
 5067              	.L485:
 5068              	.LBE224:
 5069              	.LBE223:
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5070              		.loc 1 4200 0
 5071 001e DA6C     		ldr	r2, [r3, #76]
 5072 0020 8A42     		cmp	r2, r1
 5073 0022 00D2     		bcs	.L487
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5074              		.loc 1 4202 0
 5075 0024 0A46     		mov	r2, r1
 5076              	.L487:
 5077              	.LVL447:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5078              		.loc 1 4210 0
 5079 0026 D96A     		ldr	r1, [r3, #44]
 5080              	.LVL448:
 5081 0028 9142     		cmp	r1, r2
 5082 002a 01D0     		beq	.L483
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5083              		.loc 1 4216 0
 5084 002c 0128     		cmp	r0, #1
 5085 002e 00D0     		beq	.L496
 5086              	.LVL449:
 5087              	.L483:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5088              		.loc 1 4282 0
 5089 0030 38BD     		pop	{r3, r4, r5, pc}
 5090              	.LVL450:
 5091              	.L496:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5092              		.loc 1 4221 0
 5093 0032 1848     		ldr	r0, .L497
 5094 0034 0068     		ldr	r0, [r0]
 5095 0036 9842     		cmp	r0, r3
 5096 0038 08D1     		bne	.L488
 5097              	.LBB225:
 5098              	.LBB226:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5099              		.loc 2 195 0
 5100              		.syntax unified
 5101              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5102 003a 4FF05003 			mov r3, #80												
 5103 003e 83F31188 		msr basepri, r3											
 5104 0042 BFF36F8F 		isb														
 5105 0046 BFF34F8F 		dsb														
 5106              	
 5107              	@ 0 "" 2
 5108              	.LVL451:
 5109              		.thumb
 5110              		.syntax unified
 5111              	.L489:
 5112 004a FEE7     		b	.L489
ARM GAS  /tmp/ccu8P93f.s 			page 197


 5113              	.LVL452:
 5114              	.L488:
 5115              	.LBE226:
 5116              	.LBE225:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5117              		.loc 1 4228 0
 5118 004c DA62     		str	r2, [r3, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5119              		.loc 1 4232 0
 5120 004e 9869     		ldr	r0, [r3, #24]
 5121 0050 0028     		cmp	r0, #0
 5122 0052 02DB     		blt	.L490
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5123              		.loc 1 4234 0
 5124 0054 C2F13802 		rsb	r2, r2, #56
 5125              	.LVL453:
 5126 0058 9A61     		str	r2, [r3, #24]
 5127              	.L490:
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5128              		.loc 1 4247 0
 5129 005a 5A69     		ldr	r2, [r3, #20]
 5130 005c 0E48     		ldr	r0, .L497+4
 5131 005e 1424     		movs	r4, #20
 5132 0060 04FB0101 		mla	r1, r4, r1, r0
 5133              	.LVL454:
 5134 0064 8A42     		cmp	r2, r1
 5135 0066 E3D1     		bne	.L483
 5136 0068 1C46     		mov	r4, r3
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5137              		.loc 1 4249 0
 5138 006a 1D1D     		adds	r5, r3, #4
 5139 006c 2846     		mov	r0, r5
 5140 006e FFF7FEFF 		bl	uxListRemove
 5141              	.LVL455:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5142              		.loc 1 4261 0
 5143 0072 E36A     		ldr	r3, [r4, #44]
 5144 0074 094A     		ldr	r2, .L497+8
 5145 0076 1268     		ldr	r2, [r2]
 5146 0078 9342     		cmp	r3, r2
 5147 007a 01D9     		bls	.L491
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5148              		.loc 1 4261 0 is_stmt 0 discriminator 1
 5149 007c 074A     		ldr	r2, .L497+8
 5150 007e 1360     		str	r3, [r2]
 5151              	.L491:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5152              		.loc 1 4261 0 discriminator 3
 5153 0080 2946     		mov	r1, r5
 5154 0082 054A     		ldr	r2, .L497+4
 5155 0084 1420     		movs	r0, #20
 5156 0086 00FB0320 		mla	r0, r0, r3, r2
 5157 008a FFF7FEFF 		bl	vListInsertEnd
 5158              	.LVL456:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5159              		.loc 1 4282 0 is_stmt 1 discriminator 3
 5160 008e CFE7     		b	.L483
ARM GAS  /tmp/ccu8P93f.s 			page 198


 5161              	.LVL457:
 5162              	.L493:
 5163              	.LCFI54:
 5164              		.cfi_def_cfa_offset 0
 5165              		.cfi_restore 3
 5166              		.cfi_restore 4
 5167              		.cfi_restore 5
 5168              		.cfi_restore 14
 5169 0090 7047     		bx	lr
 5170              	.L498:
 5171 0092 00BF     		.align	2
 5172              	.L497:
 5173 0094 00000000 		.word	.LANCHOR10
 5174 0098 00000000 		.word	.LANCHOR4
 5175 009c 00000000 		.word	.LANCHOR13
 5176              		.cfi_endproc
 5177              	.LFE55:
 5179              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5180              		.align	1
 5181              		.global	uxTaskResetEventItemValue
 5182              		.syntax unified
 5183              		.thumb
 5184              		.thumb_func
 5185              		.fpu fpv5-d16
 5187              	uxTaskResetEventItemValue:
 5188              	.LFB56:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5189              		.loc 1 4603 0
 5190              		.cfi_startproc
 5191              		@ args = 0, pretend = 0, frame = 0
 5192              		@ frame_needed = 0, uses_anonymous_args = 0
 5193              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5194              		.loc 1 4606 0
 5195 0000 044A     		ldr	r2, .L500
 5196 0002 1368     		ldr	r3, [r2]
 5197 0004 9869     		ldr	r0, [r3, #24]
 5198              	.LVL458:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5199              		.loc 1 4610 0
 5200 0006 1368     		ldr	r3, [r2]
 5201 0008 DB6A     		ldr	r3, [r3, #44]
 5202 000a 1268     		ldr	r2, [r2]
 5203 000c C3F13803 		rsb	r3, r3, #56
 5204 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5205              		.loc 1 4613 0
 5206 0012 7047     		bx	lr
 5207              	.L501:
 5208              		.align	2
 5209              	.L500:
 5210 0014 00000000 		.word	.LANCHOR10
 5211              		.cfi_endproc
 5212              	.LFE56:
 5214              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5215              		.align	1
 5216              		.global	pvTaskIncrementMutexHeldCount
ARM GAS  /tmp/ccu8P93f.s 			page 199


 5217              		.syntax unified
 5218              		.thumb
 5219              		.thumb_func
 5220              		.fpu fpv5-d16
 5222              	pvTaskIncrementMutexHeldCount:
 5223              	.LFB57:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5224              		.loc 1 4619 0
 5225              		.cfi_startproc
 5226              		@ args = 0, pretend = 0, frame = 0
 5227              		@ frame_needed = 0, uses_anonymous_args = 0
 5228              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5229              		.loc 1 4622 0
 5230 0000 054B     		ldr	r3, .L504
 5231 0002 1B68     		ldr	r3, [r3]
 5232 0004 23B1     		cbz	r3, .L503
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5233              		.loc 1 4624 0
 5234 0006 044B     		ldr	r3, .L504
 5235 0008 1A68     		ldr	r2, [r3]
 5236 000a 136D     		ldr	r3, [r2, #80]
 5237 000c 0133     		adds	r3, r3, #1
 5238 000e 1365     		str	r3, [r2, #80]
 5239              	.L503:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5240              		.loc 1 4627 0
 5241 0010 014B     		ldr	r3, .L504
 5242 0012 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5243              		.loc 1 4628 0
 5244 0014 7047     		bx	lr
 5245              	.L505:
 5246 0016 00BF     		.align	2
 5247              	.L504:
 5248 0018 00000000 		.word	.LANCHOR10
 5249              		.cfi_endproc
 5250              	.LFE57:
 5252              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5253              		.align	1
 5254              		.global	ulTaskNotifyTake
 5255              		.syntax unified
 5256              		.thumb
 5257              		.thumb_func
 5258              		.fpu fpv5-d16
 5260              	ulTaskNotifyTake:
 5261              	.LFB58:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5262              		.loc 1 4636 0
 5263              		.cfi_startproc
 5264              		@ args = 0, pretend = 0, frame = 0
 5265              		@ frame_needed = 0, uses_anonymous_args = 0
 5266              	.LVL459:
 5267 0000 38B5     		push	{r3, r4, r5, lr}
 5268              	.LCFI55:
 5269              		.cfi_def_cfa_offset 16
 5270              		.cfi_offset 3, -16
ARM GAS  /tmp/ccu8P93f.s 			page 200


 5271              		.cfi_offset 4, -12
 5272              		.cfi_offset 5, -8
 5273              		.cfi_offset 14, -4
 5274 0002 0546     		mov	r5, r0
 5275 0004 0C46     		mov	r4, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5276              		.loc 1 4639 0
 5277 0006 FFF7FEFF 		bl	vPortEnterCritical
 5278              	.LVL460:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5279              		.loc 1 4642 0
 5280 000a 194B     		ldr	r3, .L513
 5281 000c 1B68     		ldr	r3, [r3]
 5282 000e 5B6D     		ldr	r3, [r3, #84]
 5283 0010 2BB9     		cbnz	r3, .L507
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5284              		.loc 1 4645 0
 5285 0012 174B     		ldr	r3, .L513
 5286 0014 1B68     		ldr	r3, [r3]
 5287 0016 0122     		movs	r2, #1
 5288 0018 83F85820 		strb	r2, [r3, #88]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5289              		.loc 1 4647 0
 5290 001c ACB9     		cbnz	r4, .L511
 5291              	.L507:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5292              		.loc 1 4668 0
 5293 001e FFF7FEFF 		bl	vPortExitCritical
 5294              	.LVL461:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5295              		.loc 1 4670 0
 5296 0022 FFF7FEFF 		bl	vPortEnterCritical
 5297              	.LVL462:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5298              		.loc 1 4673 0
 5299 0026 124B     		ldr	r3, .L513
 5300 0028 1B68     		ldr	r3, [r3]
 5301 002a 5C6D     		ldr	r4, [r3, #84]
 5302              	.LVL463:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5303              		.loc 1 4675 0
 5304 002c 24B1     		cbz	r4, .L508
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5305              		.loc 1 4677 0
 5306 002e CDB9     		cbnz	r5, .L512
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5307              		.loc 1 4683 0
 5308 0030 0F4B     		ldr	r3, .L513
 5309 0032 1B68     		ldr	r3, [r3]
 5310 0034 621E     		subs	r2, r4, #1
 5311 0036 5A65     		str	r2, [r3, #84]
 5312              	.L508:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5313              		.loc 1 4691 0
 5314 0038 0D4B     		ldr	r3, .L513
 5315 003a 1B68     		ldr	r3, [r3]
 5316 003c 0022     		movs	r2, #0
ARM GAS  /tmp/ccu8P93f.s 			page 201


 5317 003e 83F85820 		strb	r2, [r3, #88]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5318              		.loc 1 4693 0
 5319 0042 FFF7FEFF 		bl	vPortExitCritical
 5320              	.LVL464:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5321              		.loc 1 4696 0
 5322 0046 2046     		mov	r0, r4
 5323 0048 38BD     		pop	{r3, r4, r5, pc}
 5324              	.LVL465:
 5325              	.L511:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5326              		.loc 1 4649 0
 5327 004a 1146     		mov	r1, r2
 5328 004c 2046     		mov	r0, r4
 5329 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5330              	.LVL466:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5331              		.loc 1 4656 0
 5332 0052 084B     		ldr	r3, .L513+4
 5333 0054 4FF08052 		mov	r2, #268435456
 5334 0058 1A60     		str	r2, [r3]
 5335              		.syntax unified
 5336              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5337 005a BFF34F8F 		dsb
 5338              	@ 0 "" 2
 5339              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5340 005e BFF36F8F 		isb
 5341              	@ 0 "" 2
 5342              		.thumb
 5343              		.syntax unified
 5344 0062 DCE7     		b	.L507
 5345              	.LVL467:
 5346              	.L512:
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5347              		.loc 1 4679 0
 5348 0064 024B     		ldr	r3, .L513
 5349 0066 1B68     		ldr	r3, [r3]
 5350 0068 0022     		movs	r2, #0
 5351 006a 5A65     		str	r2, [r3, #84]
 5352 006c E4E7     		b	.L508
 5353              	.L514:
 5354 006e 00BF     		.align	2
 5355              	.L513:
 5356 0070 00000000 		.word	.LANCHOR10
 5357 0074 04ED00E0 		.word	-536810236
 5358              		.cfi_endproc
 5359              	.LFE58:
 5361              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5362              		.align	1
 5363              		.global	xTaskNotifyWait
 5364              		.syntax unified
 5365              		.thumb
 5366              		.thumb_func
 5367              		.fpu fpv5-d16
 5369              	xTaskNotifyWait:
 5370              	.LFB59:
ARM GAS  /tmp/ccu8P93f.s 			page 202


4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5371              		.loc 1 4704 0
 5372              		.cfi_startproc
 5373              		@ args = 0, pretend = 0, frame = 0
 5374              		@ frame_needed = 0, uses_anonymous_args = 0
 5375              	.LVL468:
 5376 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5377              	.LCFI56:
 5378              		.cfi_def_cfa_offset 24
 5379              		.cfi_offset 3, -24
 5380              		.cfi_offset 4, -20
 5381              		.cfi_offset 5, -16
 5382              		.cfi_offset 6, -12
 5383              		.cfi_offset 7, -8
 5384              		.cfi_offset 14, -4
 5385 0002 0746     		mov	r7, r0
 5386 0004 0D46     		mov	r5, r1
 5387 0006 1446     		mov	r4, r2
 5388 0008 1E46     		mov	r6, r3
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5389              		.loc 1 4707 0
 5390 000a FFF7FEFF 		bl	vPortEnterCritical
 5391              	.LVL469:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5392              		.loc 1 4710 0
 5393 000e 204B     		ldr	r3, .L523
 5394 0010 1B68     		ldr	r3, [r3]
 5395 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5396 0016 DBB2     		uxtb	r3, r3
 5397 0018 022B     		cmp	r3, #2
 5398 001a 0AD0     		beq	.L516
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5399              		.loc 1 4715 0
 5400 001c 1C4B     		ldr	r3, .L523
 5401 001e 1A68     		ldr	r2, [r3]
 5402 0020 506D     		ldr	r0, [r2, #84]
 5403 0022 20EA0700 		bic	r0, r0, r7
 5404 0026 5065     		str	r0, [r2, #84]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5405              		.loc 1 4718 0
 5406 0028 1B68     		ldr	r3, [r3]
 5407 002a 0122     		movs	r2, #1
 5408 002c 83F85820 		strb	r2, [r3, #88]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5409              		.loc 1 4720 0
 5410 0030 CEB9     		cbnz	r6, .L521
 5411              	.L516:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5412              		.loc 1 4741 0
 5413 0032 FFF7FEFF 		bl	vPortExitCritical
 5414              	.LVL470:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5415              		.loc 1 4743 0
 5416 0036 FFF7FEFF 		bl	vPortEnterCritical
 5417              	.LVL471:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5418              		.loc 1 4747 0
ARM GAS  /tmp/ccu8P93f.s 			page 203


 5419 003a 1CB1     		cbz	r4, .L517
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5420              		.loc 1 4751 0
 5421 003c 144B     		ldr	r3, .L523
 5422 003e 1B68     		ldr	r3, [r3]
 5423 0040 5B6D     		ldr	r3, [r3, #84]
 5424 0042 2360     		str	r3, [r4]
 5425              	.L517:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5426              		.loc 1 4758 0
 5427 0044 124B     		ldr	r3, .L523
 5428 0046 1B68     		ldr	r3, [r3]
 5429 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5430 004c DBB2     		uxtb	r3, r3
 5431 004e 022B     		cmp	r3, #2
 5432 0050 16D0     		beq	.L522
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5433              		.loc 1 4761 0
 5434 0052 0024     		movs	r4, #0
 5435              	.LVL472:
 5436              	.L518:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5437              		.loc 1 4771 0
 5438 0054 0E4B     		ldr	r3, .L523
 5439 0056 1B68     		ldr	r3, [r3]
 5440 0058 0022     		movs	r2, #0
 5441 005a 83F85820 		strb	r2, [r3, #88]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5442              		.loc 1 4773 0
 5443 005e FFF7FEFF 		bl	vPortExitCritical
 5444              	.LVL473:
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5445              		.loc 1 4776 0
 5446 0062 2046     		mov	r0, r4
 5447 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5448              	.LVL474:
 5449              	.L521:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5450              		.loc 1 4722 0
 5451 0066 1146     		mov	r1, r2
 5452 0068 3046     		mov	r0, r6
 5453 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5454              	.LVL475:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5455              		.loc 1 4729 0
 5456 006e 094B     		ldr	r3, .L523+4
 5457 0070 4FF08052 		mov	r2, #268435456
 5458 0074 1A60     		str	r2, [r3]
 5459              		.syntax unified
 5460              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5461 0076 BFF34F8F 		dsb
 5462              	@ 0 "" 2
 5463              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5464 007a BFF36F8F 		isb
 5465              	@ 0 "" 2
 5466              		.thumb
 5467              		.syntax unified
ARM GAS  /tmp/ccu8P93f.s 			page 204


 5468 007e D8E7     		b	.L516
 5469              	.L522:
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5470              		.loc 1 4767 0
 5471 0080 034B     		ldr	r3, .L523
 5472 0082 1A68     		ldr	r2, [r3]
 5473 0084 536D     		ldr	r3, [r2, #84]
 5474 0086 23EA0505 		bic	r5, r3, r5
 5475              	.LVL476:
 5476 008a 5565     		str	r5, [r2, #84]
 5477              	.LVL477:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5478              		.loc 1 4768 0
 5479 008c 0124     		movs	r4, #1
 5480              	.LVL478:
 5481 008e E1E7     		b	.L518
 5482              	.L524:
 5483              		.align	2
 5484              	.L523:
 5485 0090 00000000 		.word	.LANCHOR10
 5486 0094 04ED00E0 		.word	-536810236
 5487              		.cfi_endproc
 5488              	.LFE59:
 5490              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5491              		.align	1
 5492              		.global	xTaskGenericNotify
 5493              		.syntax unified
 5494              		.thumb
 5495              		.thumb_func
 5496              		.fpu fpv5-d16
 5498              	xTaskGenericNotify:
 5499              	.LFB60:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5500              		.loc 1 4784 0
 5501              		.cfi_startproc
 5502              		@ args = 0, pretend = 0, frame = 0
 5503              		@ frame_needed = 0, uses_anonymous_args = 0
 5504              	.LVL479:
 5505 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5506              	.LCFI57:
 5507              		.cfi_def_cfa_offset 24
 5508              		.cfi_offset 3, -24
 5509              		.cfi_offset 4, -20
 5510              		.cfi_offset 5, -16
 5511              		.cfi_offset 6, -12
 5512              		.cfi_offset 7, -8
 5513              		.cfi_offset 14, -4
 5514              	.LVL480:
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5515              		.loc 1 4789 0
 5516 0002 40B9     		cbnz	r0, .L526
 5517              	.LBB227:
 5518              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5519              		.loc 2 195 0
 5520              		.syntax unified
 5521              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccu8P93f.s 			page 205


 5522 0004 4FF05003 			mov r3, #80												
 5523 0008 83F31188 		msr basepri, r3											
 5524 000c BFF36F8F 		isb														
 5525 0010 BFF34F8F 		dsb														
 5526              	
 5527              	@ 0 "" 2
 5528              	.LVL481:
 5529              		.thumb
 5530              		.syntax unified
 5531              	.L527:
 5532 0014 FEE7     		b	.L527
 5533              	.LVL482:
 5534              	.L526:
 5535 0016 0446     		mov	r4, r0
 5536 0018 1F46     		mov	r7, r3
 5537 001a 1646     		mov	r6, r2
 5538 001c 0D46     		mov	r5, r1
 5539              	.LVL483:
 5540              	.LBE228:
 5541              	.LBE227:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5542              		.loc 1 4792 0
 5543 001e FFF7FEFF 		bl	vPortEnterCritical
 5544              	.LVL484:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5545              		.loc 1 4794 0
 5546 0022 0FB1     		cbz	r7, .L528
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5547              		.loc 1 4796 0
 5548 0024 636D     		ldr	r3, [r4, #84]
 5549 0026 3B60     		str	r3, [r7]
 5550              	.L528:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5551              		.loc 1 4799 0
 5552 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5553 002c DBB2     		uxtb	r3, r3
 5554              	.LVL485:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5555              		.loc 1 4801 0
 5556 002e 0222     		movs	r2, #2
 5557 0030 84F85820 		strb	r2, [r4, #88]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5558              		.loc 1 4803 0
 5559 0034 042E     		cmp	r6, #4
 5560 0036 1BD8     		bhi	.L529
 5561 0038 DFE806F0 		tbb	[pc, r6]
 5562              	.L531:
 5563 003c 27       		.byte	(.L541-.L531)/2
 5564 003d 03       		.byte	(.L532-.L531)/2
 5565 003e 0D       		.byte	(.L533-.L531)/2
 5566 003f 12       		.byte	(.L534-.L531)/2
 5567 0040 15       		.byte	(.L535-.L531)/2
 5568 0041 00       		.p2align 1
 5569              	.L532:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5570              		.loc 1 4806 0
 5571 0042 626D     		ldr	r2, [r4, #84]
ARM GAS  /tmp/ccu8P93f.s 			page 206


 5572 0044 1543     		orrs	r5, r5, r2
 5573              	.LVL486:
 5574 0046 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5575              		.loc 1 4786 0
 5576 0048 0125     		movs	r5, #1
 5577              	.L530:
 5578              	.LVL487:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5579              		.loc 1 4847 0
 5580 004a 012B     		cmp	r3, #1
 5581 004c 23D0     		beq	.L545
 5582              	.LVL488:
 5583              	.L537:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5584              		.loc 1 4887 0
 5585 004e FFF7FEFF 		bl	vPortExitCritical
 5586              	.LVL489:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5587              		.loc 1 4890 0
 5588 0052 2846     		mov	r0, r5
 5589 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5590              	.LVL490:
 5591              	.L533:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5592              		.loc 1 4810 0
 5593 0056 626D     		ldr	r2, [r4, #84]
 5594 0058 0132     		adds	r2, r2, #1
 5595 005a 6265     		str	r2, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5596              		.loc 1 4786 0
 5597 005c 0125     		movs	r5, #1
 5598              	.LVL491:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5599              		.loc 1 4811 0
 5600 005e F4E7     		b	.L530
 5601              	.LVL492:
 5602              	.L534:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5603              		.loc 1 4814 0
 5604 0060 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5605              		.loc 1 4786 0
 5606 0062 0125     		movs	r5, #1
 5607              	.LVL493:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5608              		.loc 1 4815 0
 5609 0064 F1E7     		b	.L530
 5610              	.LVL494:
 5611              	.L535:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5612              		.loc 1 4818 0
 5613 0066 022B     		cmp	r3, #2
 5614 0068 11D0     		beq	.L542
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5615              		.loc 1 4820 0
 5616 006a 6565     		str	r5, [r4, #84]
ARM GAS  /tmp/ccu8P93f.s 			page 207


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5617              		.loc 1 4786 0
 5618 006c 0125     		movs	r5, #1
 5619              	.LVL495:
 5620 006e ECE7     		b	.L530
 5621              	.LVL496:
 5622              	.L529:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5623              		.loc 1 4838 0
 5624 0070 626D     		ldr	r2, [r4, #84]
 5625 0072 B2F1FF3F 		cmp	r2, #-1
 5626 0076 0CD0     		beq	.L543
 5627              	.LBB229:
 5628              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5629              		.loc 2 195 0
 5630              		.syntax unified
 5631              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5632 0078 4FF05003 			mov r3, #80												
 5633 007c 83F31188 		msr basepri, r3											
 5634 0080 BFF36F8F 		isb														
 5635 0084 BFF34F8F 		dsb														
 5636              	
 5637              	@ 0 "" 2
 5638              	.LVL497:
 5639              		.thumb
 5640              		.syntax unified
 5641              	.L536:
 5642 0088 FEE7     		b	.L536
 5643              	.LVL498:
 5644              	.L541:
 5645              	.LBE230:
 5646              	.LBE229:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5647              		.loc 1 4786 0
 5648 008a 0125     		movs	r5, #1
 5649              	.LVL499:
 5650 008c DDE7     		b	.L530
 5651              	.LVL500:
 5652              	.L542:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5653              		.loc 1 4825 0
 5654 008e 0025     		movs	r5, #0
 5655              	.LVL501:
 5656 0090 DBE7     		b	.L530
 5657              	.LVL502:
 5658              	.L543:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5659              		.loc 1 4786 0
 5660 0092 0125     		movs	r5, #1
 5661              	.LVL503:
 5662 0094 D9E7     		b	.L530
 5663              	.LVL504:
 5664              	.L545:
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5665              		.loc 1 4849 0
 5666 0096 261D     		adds	r6, r4, #4
ARM GAS  /tmp/ccu8P93f.s 			page 208


 5667 0098 3046     		mov	r0, r6
 5668 009a FFF7FEFF 		bl	uxListRemove
 5669              	.LVL505:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5670              		.loc 1 4850 0
 5671 009e E36A     		ldr	r3, [r4, #44]
 5672 00a0 134A     		ldr	r2, .L546
 5673 00a2 1268     		ldr	r2, [r2]
 5674 00a4 9342     		cmp	r3, r2
 5675 00a6 01D9     		bls	.L538
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5676              		.loc 1 4850 0 is_stmt 0 discriminator 1
 5677 00a8 114A     		ldr	r2, .L546
 5678 00aa 1360     		str	r3, [r2]
 5679              	.L538:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5680              		.loc 1 4850 0 discriminator 3
 5681 00ac 3146     		mov	r1, r6
 5682 00ae 114A     		ldr	r2, .L546+4
 5683 00b0 1420     		movs	r0, #20
 5684 00b2 00FB0320 		mla	r0, r0, r3, r2
 5685 00b6 FFF7FEFF 		bl	vListInsertEnd
 5686              	.LVL506:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5687              		.loc 1 4853 0 is_stmt 1 discriminator 3
 5688 00ba A36A     		ldr	r3, [r4, #40]
 5689 00bc 43B1     		cbz	r3, .L539
 5690              	.LBB231:
 5691              	.LBB232:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5692              		.loc 2 195 0
 5693              		.syntax unified
 5694              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5695 00be 4FF05003 			mov r3, #80												
 5696 00c2 83F31188 		msr basepri, r3											
 5697 00c6 BFF36F8F 		isb														
 5698 00ca BFF34F8F 		dsb														
 5699              	
 5700              	@ 0 "" 2
 5701              	.LVL507:
 5702              		.thumb
 5703              		.syntax unified
 5704              	.L540:
 5705 00ce FEE7     		b	.L540
 5706              	.L539:
 5707              	.LBE232:
 5708              	.LBE231:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5709              		.loc 1 4871 0
 5710 00d0 E26A     		ldr	r2, [r4, #44]
 5711 00d2 094B     		ldr	r3, .L546+8
 5712 00d4 1B68     		ldr	r3, [r3]
 5713 00d6 DB6A     		ldr	r3, [r3, #44]
 5714 00d8 9A42     		cmp	r2, r3
 5715 00da B8D9     		bls	.L537
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5716              		.loc 1 4875 0
ARM GAS  /tmp/ccu8P93f.s 			page 209


 5717 00dc 074B     		ldr	r3, .L546+12
 5718 00de 4FF08052 		mov	r2, #268435456
 5719 00e2 1A60     		str	r2, [r3]
 5720              		.syntax unified
 5721              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5722 00e4 BFF34F8F 		dsb
 5723              	@ 0 "" 2
 5724              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5725 00e8 BFF36F8F 		isb
 5726              	@ 0 "" 2
 5727              		.thumb
 5728              		.syntax unified
 5729 00ec AFE7     		b	.L537
 5730              	.L547:
 5731 00ee 00BF     		.align	2
 5732              	.L546:
 5733 00f0 00000000 		.word	.LANCHOR13
 5734 00f4 00000000 		.word	.LANCHOR4
 5735 00f8 00000000 		.word	.LANCHOR10
 5736 00fc 04ED00E0 		.word	-536810236
 5737              		.cfi_endproc
 5738              	.LFE60:
 5740              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5741              		.align	1
 5742              		.global	xTaskGenericNotifyFromISR
 5743              		.syntax unified
 5744              		.thumb
 5745              		.thumb_func
 5746              		.fpu fpv5-d16
 5748              	xTaskGenericNotifyFromISR:
 5749              	.LFB61:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5750              		.loc 1 4898 0
 5751              		.cfi_startproc
 5752              		@ args = 4, pretend = 0, frame = 0
 5753              		@ frame_needed = 0, uses_anonymous_args = 0
 5754              	.LVL508:
 5755 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5756              	.LCFI58:
 5757              		.cfi_def_cfa_offset 32
 5758              		.cfi_offset 3, -32
 5759              		.cfi_offset 4, -28
 5760              		.cfi_offset 5, -24
 5761              		.cfi_offset 6, -20
 5762              		.cfi_offset 7, -16
 5763              		.cfi_offset 8, -12
 5764              		.cfi_offset 9, -8
 5765              		.cfi_offset 14, -4
 5766 0004 089F     		ldr	r7, [sp, #32]
 5767              	.LVL509:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5768              		.loc 1 4904 0
 5769 0006 40B9     		cbnz	r0, .L549
 5770              	.LBB233:
 5771              	.LBB234:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5772              		.loc 2 195 0
ARM GAS  /tmp/ccu8P93f.s 			page 210


 5773              		.syntax unified
 5774              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5775 0008 4FF05003 			mov r3, #80												
 5776 000c 83F31188 		msr basepri, r3											
 5777 0010 BFF36F8F 		isb														
 5778 0014 BFF34F8F 		dsb														
 5779              	
 5780              	@ 0 "" 2
 5781              	.LVL510:
 5782              		.thumb
 5783              		.syntax unified
 5784              	.L550:
 5785 0018 FEE7     		b	.L550
 5786              	.LVL511:
 5787              	.L549:
 5788 001a 0446     		mov	r4, r0
 5789 001c 9946     		mov	r9, r3
 5790 001e 1646     		mov	r6, r2
 5791 0020 0D46     		mov	r5, r1
 5792              	.LBE234:
 5793              	.LBE233:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5794              		.loc 1 4922 0
 5795 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5796              	.LVL512:
 5797              	.LBB235:
 5798              	.LBB236:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5799              		.loc 2 211 0
 5800              		.syntax unified
 5801              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5802 0026 EFF31188 			mrs r8, basepri											
 5803 002a 4FF05003 		mov r3, #80												
 5804 002e 83F31188 		msr basepri, r3											
 5805 0032 BFF36F8F 		isb														
 5806 0036 BFF34F8F 		dsb														
 5807              	
 5808              	@ 0 "" 2
 5809              		.thumb
 5810              		.syntax unified
 5811              	.LBE236:
 5812              	.LBE235:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5813              		.loc 1 4928 0
 5814 003a B9F1000F 		cmp	r9, #0
 5815 003e 02D0     		beq	.L551
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5816              		.loc 1 4930 0
 5817 0040 636D     		ldr	r3, [r4, #84]
 5818 0042 C9F80030 		str	r3, [r9]
 5819              	.L551:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5820              		.loc 1 4933 0
 5821 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5822 004a DBB2     		uxtb	r3, r3
 5823              	.LVL513:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu8P93f.s 			page 211


 5824              		.loc 1 4934 0
 5825 004c 0222     		movs	r2, #2
 5826 004e 84F85820 		strb	r2, [r4, #88]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5827              		.loc 1 4936 0
 5828 0052 042E     		cmp	r6, #4
 5829 0054 1CD8     		bhi	.L552
 5830 0056 DFE806F0 		tbb	[pc, r6]
 5831              	.L554:
 5832 005a 28       		.byte	(.L567-.L554)/2
 5833 005b 03       		.byte	(.L555-.L554)/2
 5834 005c 0E       		.byte	(.L556-.L554)/2
 5835 005d 13       		.byte	(.L557-.L554)/2
 5836 005e 16       		.byte	(.L558-.L554)/2
 5837 005f 00       		.p2align 1
 5838              	.L555:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5839              		.loc 1 4939 0
 5840 0060 626D     		ldr	r2, [r4, #84]
 5841 0062 1543     		orrs	r5, r5, r2
 5842              	.LVL514:
 5843 0064 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5844              		.loc 1 4901 0
 5845 0066 0125     		movs	r5, #1
 5846              	.L553:
 5847              	.LVL515:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5848              		.loc 1 4979 0
 5849 0068 012B     		cmp	r3, #1
 5850 006a 24D0     		beq	.L571
 5851              	.LVL516:
 5852              	.L560:
 5853              	.LBB237:
 5854              	.LBB238:
 5855              		.loc 2 229 0
 5856              		.syntax unified
 5857              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5858 006c 88F31188 			msr basepri, r8	
 5859              	@ 0 "" 2
 5860              	.LVL517:
 5861              		.thumb
 5862              		.syntax unified
 5863              	.LBE238:
 5864              	.LBE237:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5865              		.loc 1 5019 0
 5866 0070 2846     		mov	r0, r5
 5867 0072 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5868              	.LVL518:
 5869              	.L556:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5870              		.loc 1 4943 0
 5871 0076 626D     		ldr	r2, [r4, #84]
 5872 0078 0132     		adds	r2, r2, #1
 5873 007a 6265     		str	r2, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccu8P93f.s 			page 212


 5874              		.loc 1 4901 0
 5875 007c 0125     		movs	r5, #1
 5876              	.LVL519:
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5877              		.loc 1 4944 0
 5878 007e F3E7     		b	.L553
 5879              	.LVL520:
 5880              	.L557:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5881              		.loc 1 4947 0
 5882 0080 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5883              		.loc 1 4901 0
 5884 0082 0125     		movs	r5, #1
 5885              	.LVL521:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5886              		.loc 1 4948 0
 5887 0084 F0E7     		b	.L553
 5888              	.LVL522:
 5889              	.L558:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5890              		.loc 1 4951 0
 5891 0086 022B     		cmp	r3, #2
 5892 0088 11D0     		beq	.L568
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5893              		.loc 1 4953 0
 5894 008a 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5895              		.loc 1 4901 0
 5896 008c 0125     		movs	r5, #1
 5897              	.LVL523:
 5898 008e EBE7     		b	.L553
 5899              	.LVL524:
 5900              	.L552:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5901              		.loc 1 4971 0
 5902 0090 626D     		ldr	r2, [r4, #84]
 5903 0092 B2F1FF3F 		cmp	r2, #-1
 5904 0096 0CD0     		beq	.L569
 5905              	.LBB239:
 5906              	.LBB240:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5907              		.loc 2 195 0
 5908              		.syntax unified
 5909              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5910 0098 4FF05003 			mov r3, #80												
 5911 009c 83F31188 		msr basepri, r3											
 5912 00a0 BFF36F8F 		isb														
 5913 00a4 BFF34F8F 		dsb														
 5914              	
 5915              	@ 0 "" 2
 5916              	.LVL525:
 5917              		.thumb
 5918              		.syntax unified
 5919              	.L559:
 5920 00a8 FEE7     		b	.L559
 5921              	.LVL526:
ARM GAS  /tmp/ccu8P93f.s 			page 213


 5922              	.L567:
 5923              	.LBE240:
 5924              	.LBE239:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5925              		.loc 1 4901 0
 5926 00aa 0125     		movs	r5, #1
 5927              	.LVL527:
 5928 00ac DCE7     		b	.L553
 5929              	.LVL528:
 5930              	.L568:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5931              		.loc 1 4958 0
 5932 00ae 0025     		movs	r5, #0
 5933              	.LVL529:
 5934 00b0 DAE7     		b	.L553
 5935              	.LVL530:
 5936              	.L569:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5937              		.loc 1 4901 0
 5938 00b2 0125     		movs	r5, #1
 5939              	.LVL531:
 5940 00b4 D8E7     		b	.L553
 5941              	.LVL532:
 5942              	.L571:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5943              		.loc 1 4982 0
 5944 00b6 A36A     		ldr	r3, [r4, #40]
 5945              	.LVL533:
 5946 00b8 43B1     		cbz	r3, .L561
 5947              	.LBB241:
 5948              	.LBB242:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5949              		.loc 2 195 0
 5950              		.syntax unified
 5951              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5952 00ba 4FF05003 			mov r3, #80												
 5953 00be 83F31188 		msr basepri, r3											
 5954 00c2 BFF36F8F 		isb														
 5955 00c6 BFF34F8F 		dsb														
 5956              	
 5957              	@ 0 "" 2
 5958              	.LVL534:
 5959              		.thumb
 5960              		.syntax unified
 5961              	.L562:
 5962 00ca FEE7     		b	.L562
 5963              	.L561:
 5964              	.LBE242:
 5965              	.LBE241:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5966              		.loc 1 4984 0
 5967 00cc 134B     		ldr	r3, .L572
 5968 00ce 1B68     		ldr	r3, [r3]
 5969 00d0 F3B9     		cbnz	r3, .L563
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5970              		.loc 1 4986 0
 5971 00d2 261D     		adds	r6, r4, #4
ARM GAS  /tmp/ccu8P93f.s 			page 214


 5972 00d4 3046     		mov	r0, r6
 5973 00d6 FFF7FEFF 		bl	uxListRemove
 5974              	.LVL535:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5975              		.loc 1 4987 0
 5976 00da E36A     		ldr	r3, [r4, #44]
 5977 00dc 104A     		ldr	r2, .L572+4
 5978 00de 1268     		ldr	r2, [r2]
 5979 00e0 9342     		cmp	r3, r2
 5980 00e2 01D9     		bls	.L564
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5981              		.loc 1 4987 0 is_stmt 0 discriminator 1
 5982 00e4 0E4A     		ldr	r2, .L572+4
 5983 00e6 1360     		str	r3, [r2]
 5984              	.L564:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5985              		.loc 1 4987 0 discriminator 3
 5986 00e8 3146     		mov	r1, r6
 5987 00ea 0E4A     		ldr	r2, .L572+8
 5988 00ec 1420     		movs	r0, #20
 5989 00ee 00FB0320 		mla	r0, r0, r3, r2
 5990 00f2 FFF7FEFF 		bl	vListInsertEnd
 5991              	.LVL536:
 5992              	.L565:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5993              		.loc 1 4996 0 is_stmt 1
 5994 00f6 E26A     		ldr	r2, [r4, #44]
 5995 00f8 0B4B     		ldr	r3, .L572+12
 5996 00fa 1B68     		ldr	r3, [r3]
 5997 00fc DB6A     		ldr	r3, [r3, #44]
 5998 00fe 9A42     		cmp	r2, r3
 5999 0100 B4D9     		bls	.L560
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6000              		.loc 1 5000 0
 6001 0102 0FB1     		cbz	r7, .L566
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6002              		.loc 1 5002 0
 6003 0104 0123     		movs	r3, #1
 6004 0106 3B60     		str	r3, [r7]
 6005              	.L566:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6006              		.loc 1 5008 0
 6007 0108 084B     		ldr	r3, .L572+16
 6008 010a 0122     		movs	r2, #1
 6009 010c 1A60     		str	r2, [r3]
 6010 010e ADE7     		b	.L560
 6011              	.L563:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6012              		.loc 1 4993 0
 6013 0110 04F11801 		add	r1, r4, #24
 6014 0114 0648     		ldr	r0, .L572+20
 6015 0116 FFF7FEFF 		bl	vListInsertEnd
 6016              	.LVL537:
 6017 011a ECE7     		b	.L565
 6018              	.L573:
 6019              		.align	2
 6020              	.L572:
ARM GAS  /tmp/ccu8P93f.s 			page 215


 6021 011c 00000000 		.word	.LANCHOR16
 6022 0120 00000000 		.word	.LANCHOR13
 6023 0124 00000000 		.word	.LANCHOR4
 6024 0128 00000000 		.word	.LANCHOR10
 6025 012c 00000000 		.word	.LANCHOR18
 6026 0130 00000000 		.word	.LANCHOR1
 6027              		.cfi_endproc
 6028              	.LFE61:
 6030              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6031              		.align	1
 6032              		.global	vTaskNotifyGiveFromISR
 6033              		.syntax unified
 6034              		.thumb
 6035              		.thumb_func
 6036              		.fpu fpv5-d16
 6038              	vTaskNotifyGiveFromISR:
 6039              	.LFB62:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6040              		.loc 1 5027 0
 6041              		.cfi_startproc
 6042              		@ args = 0, pretend = 0, frame = 0
 6043              		@ frame_needed = 0, uses_anonymous_args = 0
 6044              	.LVL538:
 6045 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6046              	.LCFI59:
 6047              		.cfi_def_cfa_offset 24
 6048              		.cfi_offset 3, -24
 6049              		.cfi_offset 4, -20
 6050              		.cfi_offset 5, -16
 6051              		.cfi_offset 6, -12
 6052              		.cfi_offset 7, -8
 6053              		.cfi_offset 14, -4
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6054              		.loc 1 5032 0
 6055 0002 40B9     		cbnz	r0, .L575
 6056              	.LBB243:
 6057              	.LBB244:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6058              		.loc 2 195 0
 6059              		.syntax unified
 6060              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6061 0004 4FF05003 			mov r3, #80												
 6062 0008 83F31188 		msr basepri, r3											
 6063 000c BFF36F8F 		isb														
 6064 0010 BFF34F8F 		dsb														
 6065              	
 6066              	@ 0 "" 2
 6067              	.LVL539:
 6068              		.thumb
 6069              		.syntax unified
 6070              	.L576:
 6071 0014 FEE7     		b	.L576
 6072              	.L575:
 6073 0016 0446     		mov	r4, r0
 6074 0018 0D46     		mov	r5, r1
 6075              	.LBE244:
 6076              	.LBE243:
ARM GAS  /tmp/ccu8P93f.s 			page 216


5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6077              		.loc 1 5050 0
 6078 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 6079              	.LVL540:
 6080              	.LBB245:
 6081              	.LBB246:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6082              		.loc 2 211 0
 6083              		.syntax unified
 6084              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6085 001e EFF31186 			mrs r6, basepri											
 6086 0022 4FF05003 		mov r3, #80												
 6087 0026 83F31188 		msr basepri, r3											
 6088 002a BFF36F8F 		isb														
 6089 002e BFF34F8F 		dsb														
 6090              	
 6091              	@ 0 "" 2
 6092              		.thumb
 6093              		.syntax unified
 6094              	.LBE246:
 6095              	.LBE245:
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6096              		.loc 1 5056 0
 6097 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6098 0036 DBB2     		uxtb	r3, r3
 6099              	.LVL541:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6100              		.loc 1 5057 0
 6101 0038 0222     		movs	r2, #2
 6102 003a 84F85820 		strb	r2, [r4, #88]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6103              		.loc 1 5061 0
 6104 003e 626D     		ldr	r2, [r4, #84]
 6105 0040 0132     		adds	r2, r2, #1
 6106 0042 6265     		str	r2, [r4, #84]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6107              		.loc 1 5067 0
 6108 0044 012B     		cmp	r3, #1
 6109 0046 02D0     		beq	.L585
 6110              	.LVL542:
 6111              	.L577:
 6112              	.LBB247:
 6113              	.LBB248:
 6114              		.loc 2 229 0
 6115              		.syntax unified
 6116              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6117 0048 86F31188 			msr basepri, r6	
 6118              	@ 0 "" 2
 6119              	.LVL543:
 6120              		.thumb
 6121              		.syntax unified
 6122              	.LBE248:
 6123              	.LBE247:
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6124              		.loc 1 5105 0
 6125 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6126              	.LVL544:
ARM GAS  /tmp/ccu8P93f.s 			page 217


 6127              	.L585:
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6128              		.loc 1 5070 0
 6129 004e A36A     		ldr	r3, [r4, #40]
 6130              	.LVL545:
 6131 0050 43B1     		cbz	r3, .L578
 6132              	.LBB249:
 6133              	.LBB250:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6134              		.loc 2 195 0
 6135              		.syntax unified
 6136              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6137 0052 4FF05003 			mov r3, #80												
 6138 0056 83F31188 		msr basepri, r3											
 6139 005a BFF36F8F 		isb														
 6140 005e BFF34F8F 		dsb														
 6141              	
 6142              	@ 0 "" 2
 6143              	.LVL546:
 6144              		.thumb
 6145              		.syntax unified
 6146              	.L579:
 6147 0062 FEE7     		b	.L579
 6148              	.L578:
 6149              	.LBE250:
 6150              	.LBE249:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6151              		.loc 1 5072 0
 6152 0064 134B     		ldr	r3, .L586
 6153 0066 1B68     		ldr	r3, [r3]
 6154 0068 F3B9     		cbnz	r3, .L580
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6155              		.loc 1 5074 0
 6156 006a 271D     		adds	r7, r4, #4
 6157 006c 3846     		mov	r0, r7
 6158 006e FFF7FEFF 		bl	uxListRemove
 6159              	.LVL547:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6160              		.loc 1 5075 0
 6161 0072 E36A     		ldr	r3, [r4, #44]
 6162 0074 104A     		ldr	r2, .L586+4
 6163 0076 1268     		ldr	r2, [r2]
 6164 0078 9342     		cmp	r3, r2
 6165 007a 01D9     		bls	.L581
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6166              		.loc 1 5075 0 is_stmt 0 discriminator 1
 6167 007c 0E4A     		ldr	r2, .L586+4
 6168 007e 1360     		str	r3, [r2]
 6169              	.L581:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6170              		.loc 1 5075 0 discriminator 3
 6171 0080 3946     		mov	r1, r7
 6172 0082 0E4A     		ldr	r2, .L586+8
 6173 0084 1420     		movs	r0, #20
 6174 0086 00FB0320 		mla	r0, r0, r3, r2
 6175 008a FFF7FEFF 		bl	vListInsertEnd
 6176              	.LVL548:
ARM GAS  /tmp/ccu8P93f.s 			page 218


 6177              	.L582:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6178              		.loc 1 5084 0 is_stmt 1
 6179 008e E26A     		ldr	r2, [r4, #44]
 6180 0090 0B4B     		ldr	r3, .L586+12
 6181 0092 1B68     		ldr	r3, [r3]
 6182 0094 DB6A     		ldr	r3, [r3, #44]
 6183 0096 9A42     		cmp	r2, r3
 6184 0098 D6D9     		bls	.L577
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6185              		.loc 1 5088 0
 6186 009a 0DB1     		cbz	r5, .L583
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6187              		.loc 1 5090 0
 6188 009c 0123     		movs	r3, #1
 6189 009e 2B60     		str	r3, [r5]
 6190              	.L583:
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6191              		.loc 1 5096 0
 6192 00a0 084B     		ldr	r3, .L586+16
 6193 00a2 0122     		movs	r2, #1
 6194 00a4 1A60     		str	r2, [r3]
 6195 00a6 CFE7     		b	.L577
 6196              	.L580:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6197              		.loc 1 5081 0
 6198 00a8 04F11801 		add	r1, r4, #24
 6199 00ac 0648     		ldr	r0, .L586+20
 6200 00ae FFF7FEFF 		bl	vListInsertEnd
 6201              	.LVL549:
 6202 00b2 ECE7     		b	.L582
 6203              	.L587:
 6204              		.align	2
 6205              	.L586:
 6206 00b4 00000000 		.word	.LANCHOR16
 6207 00b8 00000000 		.word	.LANCHOR13
 6208 00bc 00000000 		.word	.LANCHOR4
 6209 00c0 00000000 		.word	.LANCHOR10
 6210 00c4 00000000 		.word	.LANCHOR18
 6211 00c8 00000000 		.word	.LANCHOR1
 6212              		.cfi_endproc
 6213              	.LFE62:
 6215              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6216              		.align	1
 6217              		.global	xTaskNotifyStateClear
 6218              		.syntax unified
 6219              		.thumb
 6220              		.thumb_func
 6221              		.fpu fpv5-d16
 6223              	xTaskNotifyStateClear:
 6224              	.LFB63:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6225              		.loc 1 5113 0
 6226              		.cfi_startproc
 6227              		@ args = 0, pretend = 0, frame = 0
 6228              		@ frame_needed = 0, uses_anonymous_args = 0
 6229              	.LVL550:
ARM GAS  /tmp/ccu8P93f.s 			page 219


 6230 0000 10B5     		push	{r4, lr}
 6231              	.LCFI60:
 6232              		.cfi_def_cfa_offset 8
 6233              		.cfi_offset 4, -8
 6234              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6235              		.loc 1 5119 0
 6236 0002 0446     		mov	r4, r0
 6237 0004 58B1     		cbz	r0, .L593
 6238              	.LVL551:
 6239              	.L589:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6240              		.loc 1 5121 0 discriminator 4
 6241 0006 FFF7FEFF 		bl	vPortEnterCritical
 6242              	.LVL552:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6243              		.loc 1 5123 0 discriminator 4
 6244 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6245 000e DBB2     		uxtb	r3, r3
 6246 0010 022B     		cmp	r3, #2
 6247 0012 07D0     		beq	.L594
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6248              		.loc 1 5130 0
 6249 0014 0024     		movs	r4, #0
 6250              	.LVL553:
 6251              	.L590:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6252              		.loc 1 5133 0
 6253 0016 FFF7FEFF 		bl	vPortExitCritical
 6254              	.LVL554:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6255              		.loc 1 5136 0
 6256 001a 2046     		mov	r0, r4
 6257 001c 10BD     		pop	{r4, pc}
 6258              	.LVL555:
 6259              	.L593:
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6260              		.loc 1 5119 0 discriminator 1
 6261 001e 044B     		ldr	r3, .L595
 6262 0020 1C68     		ldr	r4, [r3]
 6263              	.LVL556:
 6264 0022 F0E7     		b	.L589
 6265              	.LVL557:
 6266              	.L594:
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6267              		.loc 1 5125 0
 6268 0024 0023     		movs	r3, #0
 6269 0026 84F85830 		strb	r3, [r4, #88]
 6270              	.LVL558:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6271              		.loc 1 5126 0
 6272 002a 0124     		movs	r4, #1
 6273              	.LVL559:
 6274 002c F3E7     		b	.L590
 6275              	.L596:
 6276 002e 00BF     		.align	2
 6277              	.L595:
ARM GAS  /tmp/ccu8P93f.s 			page 220


 6278 0030 00000000 		.word	.LANCHOR10
 6279              		.cfi_endproc
 6280              	.LFE63:
 6282              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6283              		.align	1
 6284              		.global	ulTaskNotifyValueClear
 6285              		.syntax unified
 6286              		.thumb
 6287              		.thumb_func
 6288              		.fpu fpv5-d16
 6290              	ulTaskNotifyValueClear:
 6291              	.LFB64:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6292              		.loc 1 5144 0
 6293              		.cfi_startproc
 6294              		@ args = 0, pretend = 0, frame = 0
 6295              		@ frame_needed = 0, uses_anonymous_args = 0
 6296              	.LVL560:
 6297 0000 70B5     		push	{r4, r5, r6, lr}
 6298              	.LCFI61:
 6299              		.cfi_def_cfa_offset 16
 6300              		.cfi_offset 4, -16
 6301              		.cfi_offset 5, -12
 6302              		.cfi_offset 6, -8
 6303              		.cfi_offset 14, -4
 6304 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6305              		.loc 1 5150 0
 6306 0004 0446     		mov	r4, r0
 6307 0006 60B1     		cbz	r0, .L600
 6308              	.LVL561:
 6309              	.L598:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6310              		.loc 1 5152 0 discriminator 4
 6311 0008 FFF7FEFF 		bl	vPortEnterCritical
 6312              	.LVL562:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 6313              		.loc 1 5156 0 discriminator 4
 6314 000c 064B     		ldr	r3, .L601
 6315 000e 1B68     		ldr	r3, [r3]
 6316 0010 5D6D     		ldr	r5, [r3, #84]
 6317              	.LVL563:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 6318              		.loc 1 5157 0 discriminator 4
 6319 0012 616D     		ldr	r1, [r4, #84]
 6320 0014 21EA0601 		bic	r1, r1, r6
 6321 0018 6165     		str	r1, [r4, #84]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6322              		.loc 1 5159 0 discriminator 4
 6323 001a FFF7FEFF 		bl	vPortExitCritical
 6324              	.LVL564:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6325              		.loc 1 5162 0 discriminator 4
 6326 001e 2846     		mov	r0, r5
 6327 0020 70BD     		pop	{r4, r5, r6, pc}
 6328              	.LVL565:
 6329              	.L600:
ARM GAS  /tmp/ccu8P93f.s 			page 221


5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6330              		.loc 1 5150 0 discriminator 1
 6331 0022 014B     		ldr	r3, .L601
 6332 0024 1C68     		ldr	r4, [r3]
 6333              	.LVL566:
 6334 0026 EFE7     		b	.L598
 6335              	.L602:
 6336              		.align	2
 6337              	.L601:
 6338 0028 00000000 		.word	.LANCHOR10
 6339              		.cfi_endproc
 6340              	.LFE64:
 6342              		.global	pxCurrentTCB
 6343              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6344              		.align	2
 6345              		.set	.LANCHOR10,. + 0
 6348              	pxCurrentTCB:
 6349 0000 00000000 		.space	4
 6350              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6351              		.align	2
 6352              		.set	.LANCHOR2,. + 0
 6355              	pxDelayedTaskList:
 6356 0000 00000000 		.space	4
 6357              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6358              		.align	2
 6359              		.set	.LANCHOR8,. + 0
 6362              	pxOverflowDelayedTaskList:
 6363 0000 00000000 		.space	4
 6364              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6365              		.align	2
 6366              		.set	.LANCHOR4,. + 0
 6369              	pxReadyTasksLists:
 6370 0000 00000000 		.space	1120
 6370      00000000 
 6370      00000000 
 6370      00000000 
 6370      00000000 
 6371              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6372              		.align	2
 6373              		.set	.LANCHOR9,. + 0
 6376              	uxCurrentNumberOfTasks:
 6377 0000 00000000 		.space	4
 6378              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6379              		.align	2
 6380              		.set	.LANCHOR14,. + 0
 6383              	uxDeletedTasksWaitingCleanUp:
 6384 0000 00000000 		.space	4
 6385              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6386              		.align	2
 6387              		.set	.LANCHOR16,. + 0
 6390              	uxSchedulerSuspended:
 6391 0000 00000000 		.space	4
 6392              		.section	.bss.uxTaskNumber,"aw",%nobits
 6393              		.align	2
 6394              		.set	.LANCHOR12,. + 0
 6397              	uxTaskNumber:
 6398 0000 00000000 		.space	4
ARM GAS  /tmp/ccu8P93f.s 			page 222


 6399              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6400              		.align	2
 6401              		.set	.LANCHOR13,. + 0
 6404              	uxTopReadyPriority:
 6405 0000 00000000 		.space	4
 6406              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6407              		.align	2
 6408              		.set	.LANCHOR5,. + 0
 6411              	xDelayedTaskList1:
 6412 0000 00000000 		.space	20
 6412      00000000 
 6412      00000000 
 6412      00000000 
 6412      00000000 
 6413              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6414              		.align	2
 6415              		.set	.LANCHOR6,. + 0
 6418              	xDelayedTaskList2:
 6419 0000 00000000 		.space	20
 6419      00000000 
 6419      00000000 
 6419      00000000 
 6419      00000000 
 6420              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6421              		.align	2
 6422              		.set	.LANCHOR3,. + 0
 6425              	xNextTaskUnblockTime:
 6426 0000 00000000 		.space	4
 6427              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6428              		.align	2
 6429              		.set	.LANCHOR17,. + 0
 6432              	xNumOfOverflows:
 6433 0000 00000000 		.space	4
 6434              		.section	.bss.xPendedTicks,"aw",%nobits
 6435              		.align	2
 6436              		.set	.LANCHOR19,. + 0
 6439              	xPendedTicks:
 6440 0000 00000000 		.space	4
 6441              		.section	.bss.xPendingReadyList,"aw",%nobits
 6442              		.align	2
 6443              		.set	.LANCHOR1,. + 0
 6446              	xPendingReadyList:
 6447 0000 00000000 		.space	20
 6447      00000000 
 6447      00000000 
 6447      00000000 
 6447      00000000 
 6448              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6449              		.align	2
 6450              		.set	.LANCHOR11,. + 0
 6453              	xSchedulerRunning:
 6454 0000 00000000 		.space	4
 6455              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6456              		.align	2
 6457              		.set	.LANCHOR0,. + 0
 6460              	xSuspendedTaskList:
 6461 0000 00000000 		.space	20
ARM GAS  /tmp/ccu8P93f.s 			page 223


 6461      00000000 
 6461      00000000 
 6461      00000000 
 6461      00000000 
 6462              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6463              		.align	2
 6464              		.set	.LANCHOR7,. + 0
 6467              	xTasksWaitingTermination:
 6468 0000 00000000 		.space	20
 6468      00000000 
 6468      00000000 
 6468      00000000 
 6468      00000000 
 6469              		.section	.bss.xTickCount,"aw",%nobits
 6470              		.align	2
 6471              		.set	.LANCHOR15,. + 0
 6474              	xTickCount:
 6475 0000 00000000 		.space	4
 6476              		.section	.bss.xYieldPending,"aw",%nobits
 6477              		.align	2
 6478              		.set	.LANCHOR18,. + 0
 6481              	xYieldPending:
 6482 0000 00000000 		.space	4
 6483              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6484              		.align	2
 6485              	.LC0:
 6486 0000 49444C45 		.ascii	"IDLE\000"
 6486      00
 6487              		.text
 6488              	.Letext0:
 6489              		.file 3 "/opt/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 6490              		.file 4 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h"
 6491              		.file 5 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 6492              		.file 6 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 6493              		.file 7 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 6494              		.file 8 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdlib.h"
 6495              		.file 9 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 6496              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 6497              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6498              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6499              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6500              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6501              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6502              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6503              		.file 17 "/opt/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/string.h"
ARM GAS  /tmp/ccu8P93f.s 			page 224


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccu8P93f.s:17     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccu8P93f.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccu8P93f.s:91     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccu8P93f.s:97     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccu8P93f.s:103    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccu8P93f.s:137    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccu8P93f.s:143    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccu8P93f.s:177    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccu8P93f.s:183    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccu8P93f.s:189    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccu8P93f.s:320    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccu8P93f.s:326    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccu8P93f.s:393    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccu8P93f.s:405    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccu8P93f.s:411    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccu8P93f.s:524    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccu8P93f.s:535    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccu8P93f.s:541    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccu8P93f.s:604    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccu8P93f.s:610    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccu8P93f.s:677    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccu8P93f.s:684    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccu8P93f.s:690    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccu8P93f.s:730    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccu8P93f.s:736    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccu8P93f.s:742    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccu8P93f.s:833    .text.prvAddCurrentTaskToDelayedList:000000000000006c $d
     /tmp/ccu8P93f.s:843    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccu8P93f.s:850    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccu8P93f.s:975    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccu8P93f.s:982    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccu8P93f.s:1089   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccu8P93f.s:1096   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccu8P93f.s:1231   .text.vTaskDelete:0000000000000098 $d
     /tmp/ccu8P93f.s:1243   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccu8P93f.s:1250   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccu8P93f.s:1375   .text.eTaskGetState:0000000000000078 $d
     /tmp/ccu8P93f.s:1384   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccu8P93f.s:1391   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccu8P93f.s:1430   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccu8P93f.s:1435   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccu8P93f.s:1442   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccu8P93f.s:1505   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccu8P93f.s:1510   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccu8P93f.s:1517   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccu8P93f.s:1688   .text.vTaskPrioritySet:00000000000000bc $d
     /tmp/ccu8P93f.s:1696   .text.vTaskResume:0000000000000000 $t
     /tmp/ccu8P93f.s:1703   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccu8P93f.s:1809   .text.vTaskResume:0000000000000074 $d
     /tmp/ccu8P93f.s:1817   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccu8P93f.s:1824   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccu8P93f.s:1960   .text.xTaskResumeFromISR:0000000000000090 $d
     /tmp/ccu8P93f.s:1969   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccu8P93f.s:1976   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccu8P93f.s:2100   .text.vTaskStartScheduler:0000000000000080 $d
ARM GAS  /tmp/ccu8P93f.s 			page 225


     /tmp/ccu8P93f.s:2111   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccu8P93f.s:2118   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccu8P93f.s:2156   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccu8P93f.s:2161   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccu8P93f.s:2168   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccu8P93f.s:2186   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccu8P93f.s:2191   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccu8P93f.s:2198   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccu8P93f.s:2214   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccu8P93f.s:2219   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccu8P93f.s:2226   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccu8P93f.s:2249   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccu8P93f.s:2254   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccu8P93f.s:2261   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccu8P93f.s:2276   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccu8P93f.s:2281   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccu8P93f.s:2288   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccu8P93f.s:2334   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccu8P93f.s:2341   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccu8P93f.s:2348   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccu8P93f.s:2559   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccu8P93f.s:2574   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccu8P93f.s:2581   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccu8P93f.s:2768   .text.xTaskResumeAll:00000000000000d0 $d
     /tmp/ccu8P93f.s:2781   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccu8P93f.s:2788   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccu8P93f.s:2953   .text.vTaskDelayUntil:0000000000000098 $d
     /tmp/ccu8P93f.s:2961   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccu8P93f.s:2968   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccu8P93f.s:3041   .text.vTaskDelay:0000000000000044 $d
     /tmp/ccu8P93f.s:3047   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccu8P93f.s:3054   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccu8P93f.s:3108   .text.xTaskCatchUpTicks:0000000000000030 $d
     /tmp/ccu8P93f.s:3114   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccu8P93f.s:3121   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccu8P93f.s:3241   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccu8P93f.s:3252   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccu8P93f.s:3259   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccu8P93f.s:3409   .text.vTaskSuspend:00000000000000ac $d
     /tmp/ccu8P93f.s:3419   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccu8P93f.s:3426   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccu8P93f.s:3479   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccu8P93f.s:3484   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccu8P93f.s:3491   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccu8P93f.s:3579   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccu8P93f.s:3585   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccu8P93f.s:3592   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccu8P93f.s:3654   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccu8P93f.s:3659   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccu8P93f.s:3666   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccu8P93f.s:3772   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccu8P93f.s:3782   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccu8P93f.s:3789   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccu8P93f.s:3896   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccu8P93f.s:3907   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccu8P93f.s:3914   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccu8P93f.s:3969   .text.vTaskSetTimeOutState:0000000000000030 $d
ARM GAS  /tmp/ccu8P93f.s 			page 226


     /tmp/ccu8P93f.s:3975   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccu8P93f.s:3982   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccu8P93f.s:4003   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccu8P93f.s:4009   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccu8P93f.s:4016   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccu8P93f.s:4148   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccu8P93f.s:4155   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccu8P93f.s:4162   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccu8P93f.s:4178   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccu8P93f.s:4183   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccu8P93f.s:4190   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccu8P93f.s:4216   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccu8P93f.s:4223   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccu8P93f.s:4244   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccu8P93f.s:4251   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccu8P93f.s:4364   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/ccu8P93f.s:4369   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccu8P93f.s:4375   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccu8P93f.s:4476   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccu8P93f.s:4483   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccu8P93f.s:4600   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccu8P93f.s:4610   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccu8P93f.s:4617   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccu8P93f.s:4650   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccu8P93f.s:4655   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccu8P93f.s:4662   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccu8P93f.s:4678   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccu8P93f.s:4683   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccu8P93f.s:4690   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccu8P93f.s:4722   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccu8P93f.s:4728   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccu8P93f.s:4735   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccu8P93f.s:4859   .text.xTaskPriorityInherit:000000000000008c $d
     /tmp/ccu8P93f.s:4866   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccu8P93f.s:4873   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccu8P93f.s:5013   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/ccu8P93f.s:5020   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccu8P93f.s:5027   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccu8P93f.s:5173   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000094 $d
     /tmp/ccu8P93f.s:5180   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccu8P93f.s:5187   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccu8P93f.s:5210   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccu8P93f.s:5215   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccu8P93f.s:5222   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccu8P93f.s:5248   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccu8P93f.s:5253   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccu8P93f.s:5260   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccu8P93f.s:5356   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccu8P93f.s:5362   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccu8P93f.s:5369   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccu8P93f.s:5485   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccu8P93f.s:5491   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccu8P93f.s:5498   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccu8P93f.s:5563   .text.xTaskGenericNotify:000000000000003c $d
     /tmp/ccu8P93f.s:5733   .text.xTaskGenericNotify:00000000000000f0 $d
     /tmp/ccu8P93f.s:5741   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccu8P93f.s:5748   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
ARM GAS  /tmp/ccu8P93f.s 			page 227


     /tmp/ccu8P93f.s:5832   .text.xTaskGenericNotifyFromISR:000000000000005a $d
     /tmp/ccu8P93f.s:6021   .text.xTaskGenericNotifyFromISR:000000000000011c $d
     /tmp/ccu8P93f.s:6031   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccu8P93f.s:6038   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccu8P93f.s:6206   .text.vTaskNotifyGiveFromISR:00000000000000b4 $d
     /tmp/ccu8P93f.s:6216   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccu8P93f.s:6223   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccu8P93f.s:6278   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccu8P93f.s:6283   .text.ulTaskNotifyValueClear:0000000000000000 $t
     /tmp/ccu8P93f.s:6290   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
     /tmp/ccu8P93f.s:6338   .text.ulTaskNotifyValueClear:0000000000000028 $d
     /tmp/ccu8P93f.s:6348   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccu8P93f.s:6344   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccu8P93f.s:6351   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccu8P93f.s:6355   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccu8P93f.s:6358   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccu8P93f.s:6362   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccu8P93f.s:6365   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccu8P93f.s:6369   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccu8P93f.s:6372   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccu8P93f.s:6376   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccu8P93f.s:6379   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccu8P93f.s:6383   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccu8P93f.s:6386   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccu8P93f.s:6390   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccu8P93f.s:6393   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccu8P93f.s:6397   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccu8P93f.s:6400   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccu8P93f.s:6404   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccu8P93f.s:6407   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccu8P93f.s:6411   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccu8P93f.s:6414   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccu8P93f.s:6418   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccu8P93f.s:6421   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccu8P93f.s:6425   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccu8P93f.s:6428   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccu8P93f.s:6432   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccu8P93f.s:6435   .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccu8P93f.s:6439   .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccu8P93f.s:6442   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccu8P93f.s:6446   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccu8P93f.s:6449   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccu8P93f.s:6453   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccu8P93f.s:6456   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccu8P93f.s:6460   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccu8P93f.s:6463   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccu8P93f.s:6467   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccu8P93f.s:6470   .bss.xTickCount:0000000000000000 $d
     /tmp/ccu8P93f.s:6474   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccu8P93f.s:6477   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccu8P93f.s:6481   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccu8P93f.s:6484   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/ccu8P93f.s:5568   .text.xTaskGenericNotify:0000000000000041 $d
     /tmp/ccu8P93f.s:5568   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/ccu8P93f.s:5837   .text.xTaskGenericNotifyFromISR:000000000000005f $d
     /tmp/ccu8P93f.s:5837   .text.xTaskGenericNotifyFromISR:0000000000000060 $t

ARM GAS  /tmp/ccu8P93f.s 			page 228


UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
